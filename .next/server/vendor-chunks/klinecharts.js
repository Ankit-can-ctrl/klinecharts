"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/klinecharts";
exports.ids = ["vendor-chunks/klinecharts"];
exports.modules = {

/***/ "(ssr)/./node_modules/klinecharts/dist/index.esm.js":
/*!****************************************************!*\
  !*** ./node_modules/klinecharts/dist/index.esm.js ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ActionType: () => (/* binding */ ActionType),\n/* harmony export */   CandleTooltipRectPosition: () => (/* binding */ CandleTooltipRectPosition),\n/* harmony export */   CandleType: () => (/* binding */ CandleType),\n/* harmony export */   DomPosition: () => (/* binding */ DomPosition),\n/* harmony export */   FormatDateType: () => (/* binding */ FormatDateType),\n/* harmony export */   IndicatorSeries: () => (/* binding */ IndicatorSeries),\n/* harmony export */   LineType: () => (/* binding */ LineType),\n/* harmony export */   OverlayMode: () => (/* binding */ OverlayMode),\n/* harmony export */   PolygonType: () => (/* binding */ PolygonType),\n/* harmony export */   TooltipFeaturePosition: () => (/* binding */ TooltipFeaturePosition),\n/* harmony export */   TooltipFeatureType: () => (/* binding */ TooltipFeatureType),\n/* harmony export */   TooltipShowRule: () => (/* binding */ TooltipShowRule),\n/* harmony export */   TooltipShowType: () => (/* binding */ TooltipShowType),\n/* harmony export */   dispose: () => (/* binding */ dispose),\n/* harmony export */   getFigureClass: () => (/* binding */ getFigureClass),\n/* harmony export */   getOverlayClass: () => (/* binding */ getOverlayClass),\n/* harmony export */   getSupportedFigures: () => (/* binding */ getSupportedFigures),\n/* harmony export */   getSupportedIndicators: () => (/* binding */ getSupportedIndicators),\n/* harmony export */   getSupportedLocales: () => (/* binding */ getSupportedLocales),\n/* harmony export */   getSupportedOverlays: () => (/* binding */ getSupportedOverlays),\n/* harmony export */   init: () => (/* binding */ init),\n/* harmony export */   registerFigure: () => (/* binding */ registerFigure),\n/* harmony export */   registerIndicator: () => (/* binding */ registerIndicator),\n/* harmony export */   registerLocale: () => (/* binding */ registerLocale),\n/* harmony export */   registerOverlay: () => (/* binding */ registerOverlay),\n/* harmony export */   registerStyles: () => (/* binding */ registerStyles),\n/* harmony export */   registerXAxis: () => (/* binding */ registerXAxis),\n/* harmony export */   registerYAxis: () => (/* binding */ registerYAxis),\n/* harmony export */   utils: () => (/* binding */ utils),\n/* harmony export */   version: () => (/* binding */ version)\n/* harmony export */ });\n/**\n     * @license\n     * KLineChart v10.0.0-alpha5\n     * Copyright (c) 2019 lihu.\n     * Licensed under Apache License 2.0 https://www.apache.org/licenses/LICENSE-2.0\n     */ /******************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */ /* global Reflect, Promise, SuppressedError, Symbol, Iterator */ var extendStatics = function(d, b) {\n    extendStatics = Object.setPrototypeOf || ({\n        __proto__: []\n    }) instanceof Array && function(d, b) {\n        d.__proto__ = b;\n    } || function(d, b) {\n        for(var p in b)if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n};\nfunction __extends(d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n    function __() {\n        this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n}\nvar __assign = function() {\n    __assign = Object.assign || function __assign(t) {\n        for(var s, i = 1, n = arguments.length; i < n; i++){\n            s = arguments[i];\n            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nfunction __rest(s, e) {\n    var t = {};\n    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++){\n        if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n    }\n    return t;\n}\nfunction __awaiter(thisArg, _arguments, P, generator) {\n    function adopt(value) {\n        return value instanceof P ? value : new P(function(resolve) {\n            resolve(value);\n        });\n    }\n    return new (P || (P = Promise))(function(resolve, reject) {\n        function fulfilled(value) {\n            try {\n                step(generator.next(value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function rejected(value) {\n            try {\n                step(generator[\"throw\"](value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function step(result) {\n            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n        }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n}\nfunction __generator(thisArg, body) {\n    var _ = {\n        label: 0,\n        sent: function() {\n            if (t[0] & 1) throw t[1];\n            return t[1];\n        },\n        trys: [],\n        ops: []\n    }, f, y, t, g = Object.create((typeof Iterator === \"function\" ? Iterator : Object).prototype);\n    return g.next = verb(0), g[\"throw\"] = verb(1), g[\"return\"] = verb(2), typeof Symbol === \"function\" && (g[Symbol.iterator] = function() {\n        return this;\n    }), g;\n    function verb(n) {\n        return function(v) {\n            return step([\n                n,\n                v\n            ]);\n        };\n    }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while(g && (g = 0, op[0] && (_ = 0)), _)try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [\n                op[0] & 2,\n                t.value\n            ];\n            switch(op[0]){\n                case 0:\n                case 1:\n                    t = op;\n                    break;\n                case 4:\n                    _.label++;\n                    return {\n                        value: op[1],\n                        done: false\n                    };\n                case 5:\n                    _.label++;\n                    y = op[1];\n                    op = [\n                        0\n                    ];\n                    continue;\n                case 7:\n                    op = _.ops.pop();\n                    _.trys.pop();\n                    continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n                        _ = 0;\n                        continue;\n                    }\n                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n                        _.label = op[1];\n                        break;\n                    }\n                    if (op[0] === 6 && _.label < t[1]) {\n                        _.label = t[1];\n                        t = op;\n                        break;\n                    }\n                    if (t && _.label < t[2]) {\n                        _.label = t[2];\n                        _.ops.push(op);\n                        break;\n                    }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop();\n                    continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) {\n            op = [\n                6,\n                e\n            ];\n            y = 0;\n        } finally{\n            f = t = 0;\n        }\n        if (op[0] & 5) throw op[1];\n        return {\n            value: op[0] ? op[1] : void 0,\n            done: true\n        };\n    }\n}\nfunction __values(o) {\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n    if (m) return m.call(o);\n    if (o && typeof o.length === \"number\") return {\n        next: function() {\n            if (o && i >= o.length) o = void 0;\n            return {\n                value: o && o[i++],\n                done: !o\n            };\n        }\n    };\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n}\nfunction __read(o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);\n    } catch (error) {\n        e = {\n            error: error\n        };\n    } finally{\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        } finally{\n            if (e) throw e.error;\n        }\n    }\n    return ar;\n}\nfunction __spreadArray(to, from, pack) {\n    if (pack || arguments.length === 2) for(var i = 0, l = from.length, ar; i < l; i++){\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n}\ntypeof SuppressedError === \"function\" ? SuppressedError : function(error, suppressed, message) {\n    var e = new Error(message);\n    return e.name = \"SuppressedError\", e.error = error, e.suppressed = suppressed, e;\n};\n/**\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n\n * http://www.apache.org/licenses/LICENSE-2.0\n\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ // eslint-disable-next-line @typescript-eslint/no-explicit-any -- ignore\nfunction merge(target, source) {\n    if (!isObject(target) && !isObject(source)) {\n        return;\n    }\n    for(var key in source){\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-unsafe-member-access -- ignore\n            var targetProp = target[key];\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-unsafe-member-access -- ignore\n            var sourceProp = source[key];\n            if (isObject(sourceProp) && isObject(targetProp)) {\n                merge(targetProp, sourceProp);\n            } else {\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access -- ignore\n                if (isValid(source[key])) {\n                    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-unsafe-member-access -- ignore\n                    target[key] = clone(source[key]);\n                }\n            }\n        }\n    }\n}\nfunction clone(target) {\n    if (!isObject(target)) {\n        return target;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any -- ignore\n    var copy = null;\n    if (isArray(target)) {\n        copy = [];\n    } else {\n        copy = {};\n    }\n    for(var key in target){\n        if (Object.prototype.hasOwnProperty.call(target, key)) {\n            var v = target[key];\n            if (isObject(v)) {\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access -- ignore\n                copy[key] = clone(v);\n            } else {\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access -- ignore\n                copy[key] = v;\n            }\n        }\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-return -- ignore\n    return copy;\n}\nfunction isArray(value) {\n    return Object.prototype.toString.call(value) === \"[object Array]\";\n}\n// eslint-disable-next-line @typescript-eslint/no-unnecessary-type-parameters -- ignore\nfunction isFunction(value) {\n    return typeof value === \"function\";\n}\nfunction isObject(value) {\n    return typeof value === \"object\" && isValid(value);\n}\nfunction isNumber(value) {\n    return typeof value === \"number\" && Number.isFinite(value);\n}\nfunction isValid(value) {\n    return value !== null && value !== undefined;\n}\nfunction isBoolean(value) {\n    return typeof value === \"boolean\";\n}\nfunction isString(value) {\n    return typeof value === \"string\";\n}\n/**\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n\n * http://www.apache.org/licenses/LICENSE-2.0\n\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ function isTransparent(color) {\n    return color === \"transparent\" || color === \"none\" || /^[rR][gG][Bb][Aa]\\(([\\s]*(2[0-4][0-9]|25[0-5]|[01]?[0-9][0-9]?)[\\s]*,){3}[\\s]*0[\\s]*\\)$/.test(color) || /^[hH][Ss][Ll][Aa]\\(([\\s]*(360｜3[0-5][0-9]|[012]?[0-9][0-9]?)[\\s]*,)([\\s]*((100|[0-9][0-9]?)%|0)[\\s]*,){2}([\\s]*0[\\s]*)\\)$/.test(color);\n}\nfunction hexToRgb(hex, alpha) {\n    var h = hex.replace(/^#/, \"\");\n    var i = parseInt(h, 16);\n    var r = i >> 16 & 255;\n    var g = i >> 8 & 255;\n    var b = i & 255;\n    return \"rgba(\".concat(r, \", \").concat(g, \", \").concat(b, \", \").concat(alpha !== null && alpha !== void 0 ? alpha : 1, \")\");\n}\n/**\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n\n * http://www.apache.org/licenses/LICENSE-2.0\n\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ /**\n * line type\n */ var LineType;\n(function(LineType) {\n    LineType[\"Dashed\"] = \"dashed\";\n    LineType[\"Solid\"] = \"solid\";\n})(LineType || (LineType = {}));\nvar PathType;\n(function(PathType) {\n    PathType[\"Stroke\"] = \"stroke\";\n    PathType[\"Fill\"] = \"fill\";\n})(PathType || (PathType = {}));\nvar PolygonType;\n(function(PolygonType) {\n    PolygonType[\"Stroke\"] = \"stroke\";\n    PolygonType[\"Fill\"] = \"fill\";\n    PolygonType[\"StrokeFill\"] = \"stroke_fill\";\n})(PolygonType || (PolygonType = {}));\nvar TooltipShowRule;\n(function(TooltipShowRule) {\n    TooltipShowRule[\"Always\"] = \"always\";\n    TooltipShowRule[\"FollowCross\"] = \"follow_cross\";\n    TooltipShowRule[\"None\"] = \"none\";\n})(TooltipShowRule || (TooltipShowRule = {}));\nvar TooltipShowType;\n(function(TooltipShowType) {\n    TooltipShowType[\"Standard\"] = \"standard\";\n    TooltipShowType[\"Rect\"] = \"rect\";\n})(TooltipShowType || (TooltipShowType = {}));\nvar TooltipFeatureType;\n(function(TooltipFeatureType) {\n    TooltipFeatureType[\"Path\"] = \"path\";\n    TooltipFeatureType[\"IconFont\"] = \"icon_font\";\n})(TooltipFeatureType || (TooltipFeatureType = {}));\nvar TooltipFeaturePosition;\n(function(TooltipFeaturePosition) {\n    TooltipFeaturePosition[\"Left\"] = \"left\";\n    TooltipFeaturePosition[\"Middle\"] = \"middle\";\n    TooltipFeaturePosition[\"Right\"] = \"right\";\n})(TooltipFeaturePosition || (TooltipFeaturePosition = {}));\nvar CandleTooltipRectPosition;\n(function(CandleTooltipRectPosition) {\n    CandleTooltipRectPosition[\"Fixed\"] = \"fixed\";\n    CandleTooltipRectPosition[\"Pointer\"] = \"pointer\";\n})(CandleTooltipRectPosition || (CandleTooltipRectPosition = {}));\nvar CandleType;\n(function(CandleType) {\n    CandleType[\"CandleSolid\"] = \"candle_solid\";\n    CandleType[\"CandleStroke\"] = \"candle_stroke\";\n    CandleType[\"CandleUpStroke\"] = \"candle_up_stroke\";\n    CandleType[\"CandleDownStroke\"] = \"candle_down_stroke\";\n    CandleType[\"Ohlc\"] = \"ohlc\";\n    CandleType[\"Area\"] = \"area\";\n})(CandleType || (CandleType = {}));\nvar CandleColorCompareRule;\n(function(CandleColorCompareRule) {\n    CandleColorCompareRule[\"CurrentOpen\"] = \"current_open\";\n    CandleColorCompareRule[\"PreviousClose\"] = \"previous_close\";\n})(CandleColorCompareRule || (CandleColorCompareRule = {}));\nvar Color = {\n    RED: \"#F92855\",\n    GREEN: \"#2DC08E\",\n    WHITE: \"#FFFFFF\",\n    GREY: \"#76808F\",\n    BLUE: \"#1677FF\"\n};\nfunction getDefaultGridStyle() {\n    return {\n        show: true,\n        horizontal: {\n            show: true,\n            size: 1,\n            color: \"#EDEDED\",\n            style: LineType.Dashed,\n            dashedValue: [\n                2,\n                2\n            ]\n        },\n        vertical: {\n            show: true,\n            size: 1,\n            color: \"#EDEDED\",\n            style: LineType.Dashed,\n            dashedValue: [\n                2,\n                2\n            ]\n        }\n    };\n}\n/**\n * Get default candle style\n * @type {{area: {backgroundColor: [{offset: number, color: string}, {offset: number, color: string}], lineColor: string, lineSize: number, value: string}, bar: {noChangeColor: string, upColor: string, downColor: string}, tooltip: {rect: {offsetTop: number, fillColor: string, borderColor: string, paddingBottom: number, borderRadius: number, paddingRight: number, borderSize: number, offsetLeft: number, paddingTop: number, paddingLeft: number, offsetRight: number}, showRule: string, values: null, showType: string, text: {marginRight: number, size: number, color: string, weight: string, marginBottom: number, family: string, marginTop: number, marginLeft: number}, labels: string[]}, type: string, priceMark: {high: {textMargin: number, textSize: number, color: string, textFamily: string, show: boolean, textWeight: string}, last: {noChangeColor: string, upColor: string, line: {dashValue: number[], size: number, show: boolean, style: string}, show: boolean, text: {paddingBottom: number, size: number, color: string, paddingRight: number, show: boolean, weight: string, paddingTop: number, family: string, paddingLeft: number}, downColor: string}, low: {textMargin: number, textSize: number, color: string, textFamily: string, show: boolean, textWeight: string}, show: boolean}}}\n */ function getDefaultCandleStyle() {\n    var highLow = {\n        show: true,\n        color: Color.GREY,\n        textOffset: 5,\n        textSize: 10,\n        textFamily: \"Helvetica Neue\",\n        textWeight: \"normal\"\n    };\n    return {\n        type: CandleType.CandleSolid,\n        bar: {\n            compareRule: CandleColorCompareRule.CurrentOpen,\n            upColor: Color.GREEN,\n            downColor: Color.RED,\n            noChangeColor: Color.GREY,\n            upBorderColor: Color.GREEN,\n            downBorderColor: Color.RED,\n            noChangeBorderColor: Color.GREY,\n            upWickColor: Color.GREEN,\n            downWickColor: Color.RED,\n            noChangeWickColor: Color.GREY\n        },\n        area: {\n            lineSize: 2,\n            lineColor: Color.BLUE,\n            smooth: false,\n            value: \"close\",\n            backgroundColor: [\n                {\n                    offset: 0,\n                    color: hexToRgb(Color.BLUE, 0.01)\n                },\n                {\n                    offset: 1,\n                    color: hexToRgb(Color.BLUE, 0.2)\n                }\n            ],\n            point: {\n                show: true,\n                color: Color.BLUE,\n                radius: 4,\n                rippleColor: hexToRgb(Color.BLUE, 0.3),\n                rippleRadius: 8,\n                animation: true,\n                animationDuration: 1000\n            }\n        },\n        priceMark: {\n            show: true,\n            high: __assign({}, highLow),\n            low: __assign({}, highLow),\n            last: {\n                show: true,\n                compareRule: CandleColorCompareRule.CurrentOpen,\n                upColor: Color.GREEN,\n                downColor: Color.RED,\n                noChangeColor: Color.GREY,\n                line: {\n                    show: true,\n                    style: LineType.Dashed,\n                    dashedValue: [\n                        4,\n                        4\n                    ],\n                    size: 1\n                },\n                text: {\n                    show: true,\n                    style: PolygonType.Fill,\n                    size: 12,\n                    paddingLeft: 4,\n                    paddingTop: 4,\n                    paddingRight: 4,\n                    paddingBottom: 4,\n                    borderColor: \"transparent\",\n                    borderStyle: LineType.Solid,\n                    borderSize: 0,\n                    borderDashedValue: [\n                        2,\n                        2\n                    ],\n                    color: Color.WHITE,\n                    family: \"Helvetica Neue\",\n                    weight: \"normal\",\n                    borderRadius: 2\n                }\n            }\n        },\n        tooltip: {\n            offsetLeft: 4,\n            offsetTop: 6,\n            offsetRight: 4,\n            offsetBottom: 6,\n            showRule: TooltipShowRule.Always,\n            showType: TooltipShowType.Standard,\n            custom: [\n                {\n                    title: \"time\",\n                    value: \"{time}\"\n                },\n                {\n                    title: \"open\",\n                    value: \"{open}\"\n                },\n                {\n                    title: \"high\",\n                    value: \"{high}\"\n                },\n                {\n                    title: \"low\",\n                    value: \"{low}\"\n                },\n                {\n                    title: \"close\",\n                    value: \"{close}\"\n                },\n                {\n                    title: \"volume\",\n                    value: \"{volume}\"\n                }\n            ],\n            defaultValue: \"n/a\",\n            rect: {\n                position: CandleTooltipRectPosition.Fixed,\n                paddingLeft: 4,\n                paddingRight: 4,\n                paddingTop: 4,\n                paddingBottom: 4,\n                offsetLeft: 4,\n                offsetTop: 4,\n                offsetRight: 4,\n                offsetBottom: 4,\n                borderRadius: 4,\n                borderSize: 1,\n                borderColor: \"#F2F3F5\",\n                color: \"#FEFEFE\"\n            },\n            text: {\n                size: 12,\n                family: \"Helvetica Neue\",\n                weight: \"normal\",\n                color: Color.GREY,\n                marginLeft: 8,\n                marginTop: 4,\n                marginRight: 8,\n                marginBottom: 4\n            },\n            features: []\n        }\n    };\n}\n/**\n * Get default indicator style\n */ function getDefaultIndicatorStyle() {\n    var alphaGreen = hexToRgb(Color.GREEN, 0.7);\n    var alphaRed = hexToRgb(Color.RED, 0.7);\n    return {\n        ohlc: {\n            compareRule: CandleColorCompareRule.CurrentOpen,\n            upColor: alphaGreen,\n            downColor: alphaRed,\n            noChangeColor: Color.GREY\n        },\n        bars: [\n            {\n                style: PolygonType.Fill,\n                borderStyle: LineType.Solid,\n                borderSize: 1,\n                borderDashedValue: [\n                    2,\n                    2\n                ],\n                upColor: alphaGreen,\n                downColor: alphaRed,\n                noChangeColor: Color.GREY\n            }\n        ],\n        lines: [\n            \"#FF9600\",\n            \"#935EBD\",\n            Color.BLUE,\n            \"#E11D74\",\n            \"#01C5C4\"\n        ].map(function(color) {\n            return {\n                style: LineType.Solid,\n                smooth: false,\n                size: 1,\n                dashedValue: [\n                    2,\n                    2\n                ],\n                color: color\n            };\n        }),\n        circles: [\n            {\n                style: PolygonType.Fill,\n                borderStyle: LineType.Solid,\n                borderSize: 1,\n                borderDashedValue: [\n                    2,\n                    2\n                ],\n                upColor: alphaGreen,\n                downColor: alphaRed,\n                noChangeColor: Color.GREY\n            }\n        ],\n        lastValueMark: {\n            show: false,\n            text: {\n                show: false,\n                style: PolygonType.Fill,\n                color: Color.WHITE,\n                size: 12,\n                family: \"Helvetica Neue\",\n                weight: \"normal\",\n                borderStyle: LineType.Solid,\n                borderColor: \"transparent\",\n                borderSize: 0,\n                borderDashedValue: [\n                    2,\n                    2\n                ],\n                paddingLeft: 4,\n                paddingTop: 4,\n                paddingRight: 4,\n                paddingBottom: 4,\n                borderRadius: 2\n            }\n        },\n        tooltip: {\n            offsetLeft: 4,\n            offsetTop: 6,\n            offsetRight: 4,\n            offsetBottom: 6,\n            showRule: TooltipShowRule.Always,\n            showType: TooltipShowType.Standard,\n            showName: true,\n            showParams: true,\n            defaultValue: \"n/a\",\n            text: {\n                size: 12,\n                family: \"Helvetica Neue\",\n                weight: \"normal\",\n                color: Color.GREY,\n                marginLeft: 8,\n                marginTop: 4,\n                marginRight: 8,\n                marginBottom: 4\n            },\n            features: []\n        }\n    };\n}\nfunction getDefaultAxisStyle() {\n    return {\n        show: true,\n        size: \"auto\",\n        axisLine: {\n            show: true,\n            color: \"#DDDDDD\",\n            size: 1\n        },\n        tickText: {\n            show: true,\n            color: Color.GREY,\n            size: 12,\n            family: \"Helvetica Neue\",\n            weight: \"normal\",\n            marginStart: 4,\n            marginEnd: 6\n        },\n        tickLine: {\n            show: true,\n            size: 1,\n            length: 3,\n            color: \"#DDDDDD\"\n        }\n    };\n}\nfunction getDefaultCrosshairStyle() {\n    function item() {\n        return {\n            show: true,\n            line: {\n                show: true,\n                style: LineType.Dashed,\n                dashedValue: [\n                    4,\n                    2\n                ],\n                size: 1,\n                color: Color.GREY\n            },\n            text: {\n                show: true,\n                style: PolygonType.Fill,\n                color: Color.WHITE,\n                size: 12,\n                family: \"Helvetica Neue\",\n                weight: \"normal\",\n                borderStyle: LineType.Solid,\n                borderDashedValue: [\n                    2,\n                    2\n                ],\n                borderSize: 1,\n                borderColor: Color.GREY,\n                borderRadius: 2,\n                paddingLeft: 4,\n                paddingRight: 4,\n                paddingTop: 4,\n                paddingBottom: 4,\n                backgroundColor: Color.GREY\n            }\n        };\n    }\n    return {\n        show: true,\n        horizontal: item(),\n        vertical: item()\n    };\n}\nfunction getDefaultOverlayStyle() {\n    var pointBorderColor = hexToRgb(Color.BLUE, 0.35);\n    var alphaBg = hexToRgb(Color.BLUE, 0.25);\n    function text() {\n        return {\n            style: PolygonType.Fill,\n            color: Color.WHITE,\n            size: 12,\n            family: \"Helvetica Neue\",\n            weight: \"normal\",\n            borderStyle: LineType.Solid,\n            borderDashedValue: [\n                2,\n                2\n            ],\n            borderSize: 1,\n            borderRadius: 2,\n            borderColor: Color.BLUE,\n            paddingLeft: 4,\n            paddingRight: 4,\n            paddingTop: 4,\n            paddingBottom: 4,\n            backgroundColor: Color.BLUE\n        };\n    }\n    return {\n        point: {\n            color: Color.BLUE,\n            borderColor: pointBorderColor,\n            borderSize: 1,\n            radius: 5,\n            activeColor: Color.BLUE,\n            activeBorderColor: pointBorderColor,\n            activeBorderSize: 3,\n            activeRadius: 5\n        },\n        line: {\n            style: LineType.Solid,\n            smooth: false,\n            color: Color.BLUE,\n            size: 1,\n            dashedValue: [\n                2,\n                2\n            ]\n        },\n        rect: {\n            style: PolygonType.Fill,\n            color: alphaBg,\n            borderColor: Color.BLUE,\n            borderSize: 1,\n            borderRadius: 0,\n            borderStyle: LineType.Solid,\n            borderDashedValue: [\n                2,\n                2\n            ]\n        },\n        polygon: {\n            style: PolygonType.Fill,\n            color: Color.BLUE,\n            borderColor: Color.BLUE,\n            borderSize: 1,\n            borderStyle: LineType.Solid,\n            borderDashedValue: [\n                2,\n                2\n            ]\n        },\n        circle: {\n            style: PolygonType.Fill,\n            color: alphaBg,\n            borderColor: Color.BLUE,\n            borderSize: 1,\n            borderStyle: LineType.Solid,\n            borderDashedValue: [\n                2,\n                2\n            ]\n        },\n        arc: {\n            style: LineType.Solid,\n            color: Color.BLUE,\n            size: 1,\n            dashedValue: [\n                2,\n                2\n            ]\n        },\n        text: text()\n    };\n}\nfunction getDefaultSeparatorStyle() {\n    return {\n        size: 1,\n        color: \"#DDDDDD\",\n        fill: true,\n        activeBackgroundColor: hexToRgb(Color.BLUE, 0.08)\n    };\n}\nfunction getDefaultStyles() {\n    return {\n        grid: getDefaultGridStyle(),\n        candle: getDefaultCandleStyle(),\n        indicator: getDefaultIndicatorStyle(),\n        xAxis: getDefaultAxisStyle(),\n        yAxis: getDefaultAxisStyle(),\n        separator: getDefaultSeparatorStyle(),\n        crosshair: getDefaultCrosshairStyle(),\n        overlay: getDefaultOverlayStyle()\n    };\n}\n/**\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n\n * http://www.apache.org/licenses/LICENSE-2.0\n\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ var DEV = \"development\" === \"development\";\nfunction log(templateText, tagStyle, messageStyle, api, invalidParam, append) {\n    if (DEV) {\n        var apiStr = api !== \"\" ? \"Call api `\".concat(api, \"`\").concat(invalidParam !== \"\" || append !== \"\" ? \", \" : \".\") : \"\";\n        var invalidParamStr = invalidParam !== \"\" ? \"invalid parameter `\".concat(invalidParam, \"`\").concat(append !== \"\" ? \", \" : \".\") : \"\";\n        var appendStr = append !== \"\" ? append : \"\";\n        console.log(templateText, tagStyle, messageStyle, apiStr, invalidParamStr, appendStr);\n    }\n}\nfunction logWarn(api, invalidParam, append) {\n    log(\"%c\\uD83D\\uDE11 klinecharts warning%c %s%s%s\", \"padding:3px 4px;border-radius:2px;color:#ffffff;background-color:#FF9600\", \"color:#FF9600\", api, invalidParam, append !== null && append !== void 0 ? append : \"\");\n}\nfunction logError(api, invalidParam, append) {\n    log(\"%c\\uD83D\\uDE1F klinecharts error%c %s%s%s\", \"padding:3px 4px;border-radius:2px;color:#ffffff;background-color:#F92855;\", \"color:#F92855;\", api, invalidParam, append);\n}\nfunction logTag() {\n    log(\"%c❤️ Welcome to klinecharts. Version is 10.0.0-alpha5\", \"border-radius:4px;border:dashed 1px #1677FF;line-height:70px;padding:0 20px;margin:16px 0;font-size:14px;color:#1677FF;\", \"\", \"\", \"\", \"\");\n}\n/**\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n\n * http://www.apache.org/licenses/LICENSE-2.0\n\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ var reEscapeChar = /\\\\(\\\\)?/g;\nvar rePropName = RegExp(\"[^.[\\\\]]+\" + \"|\" + \"\\\\[(?:\" + \"([^\\\"'][^[]*)\" + \"|\" + \"([\\\"'])((?:(?!\\\\2)[^\\\\\\\\]|\\\\\\\\.)*?)\\\\2\" + \")\\\\]\" + \"|\" + \"(?=(?:\\\\.|\\\\[\\\\])(?:\\\\.|\\\\[\\\\]|$))\", \"g\");\nfunction formatValue(data, key, defaultValue) {\n    if (isValid(data)) {\n        var path_1 = [];\n        key.replace(rePropName, function(subString) {\n            var args = [];\n            for(var _i = 1; _i < arguments.length; _i++){\n                args[_i - 1] = arguments[_i];\n            }\n            var k = subString;\n            if (isValid(args[1])) {\n                k = args[2].replace(reEscapeChar, \"$1\");\n            } else if (isValid(args[0])) {\n                k = args[0].trim();\n            }\n            path_1.push(k);\n            return \"\";\n        });\n        var value = data;\n        var index = 0;\n        var length_1 = path_1.length;\n        while(isValid(value) && index < length_1){\n            value = value === null || value === void 0 ? void 0 : value[path_1[index++]];\n        }\n        return isValid(value) ? value : defaultValue !== null && defaultValue !== void 0 ? defaultValue : \"--\";\n    }\n    return defaultValue !== null && defaultValue !== void 0 ? defaultValue : \"--\";\n}\nfunction formatTimestampToDateTime(dateTimeFormat, timestamp) {\n    var date = {};\n    dateTimeFormat.formatToParts(new Date(timestamp)).forEach(function(_a) {\n        var type = _a.type, value = _a.value;\n        switch(type){\n            case \"year\":\n                {\n                    date.YYYY = value;\n                    break;\n                }\n            case \"month\":\n                {\n                    date.MM = value;\n                    break;\n                }\n            case \"day\":\n                {\n                    date.DD = value;\n                    break;\n                }\n            case \"hour\":\n                {\n                    date.HH = value === \"24\" ? \"00\" : value;\n                    break;\n                }\n            case \"minute\":\n                {\n                    date.mm = value;\n                    break;\n                }\n            case \"second\":\n                {\n                    date.ss = value;\n                    break;\n                }\n        }\n    });\n    return date;\n}\nfunction formatTimestampToString(dateTimeFormat, timestamp, format) {\n    var date = formatTimestampToDateTime(dateTimeFormat, timestamp);\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-return -- ignore\n    return format.replace(/YYYY|MM|DD|HH|mm|ss/g, function(key) {\n        return date[key];\n    });\n}\nfunction formatPrecision(value, precision) {\n    var v = +value;\n    if (isNumber(v)) {\n        return v.toFixed(precision !== null && precision !== void 0 ? precision : 2);\n    }\n    return \"\".concat(value);\n}\nfunction formatBigNumber(value) {\n    var v = +value;\n    if (isNumber(v)) {\n        if (v > 1000000000) {\n            return \"\".concat(+(v / 1000000000).toFixed(3), \"B\");\n        }\n        if (v > 1000000) {\n            return \"\".concat(+(v / 1000000).toFixed(3), \"M\");\n        }\n        if (v > 1000) {\n            return \"\".concat(+(v / 1000).toFixed(3), \"K\");\n        }\n    }\n    return \"\".concat(value);\n}\nfunction formatThousands(value, sign) {\n    var vl = \"\".concat(value);\n    if (sign.length === 0) {\n        return vl;\n    }\n    if (vl.includes(\".\")) {\n        var arr = vl.split(\".\");\n        return \"\".concat(arr[0].replace(/(\\d)(?=(\\d{3})+$)/g, function($1) {\n            return \"\".concat($1).concat(sign);\n        }), \".\").concat(arr[1]);\n    }\n    return vl.replace(/(\\d)(?=(\\d{3})+$)/g, function($1) {\n        return \"\".concat($1).concat(sign);\n    });\n}\nfunction formatFoldDecimal(value, threshold) {\n    var vl = \"\".concat(value);\n    var reg = new RegExp(\"\\\\.0{\" + threshold + \",}[1-9][0-9]*$\");\n    if (reg.test(vl)) {\n        var result = vl.split(\".\");\n        var lastIndex = result.length - 1;\n        var v = result[lastIndex];\n        var match = /0*/.exec(v);\n        if (isValid(match)) {\n            var count = match[0].length;\n            result[lastIndex] = v.replace(/0*/, \"0{\".concat(count, \"}\"));\n            return result.join(\".\");\n        }\n    }\n    return vl;\n}\n/**\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n\n * http://www.apache.org/licenses/LICENSE-2.0\n\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ var measureCtx = null;\n/**\n * Get pixel ratio\n * @param canvas\n * @returns {number}\n */ function getPixelRatio(canvas) {\n    var _a, _b;\n    return (_b = (_a = canvas.ownerDocument.defaultView) === null || _a === void 0 ? void 0 : _a.devicePixelRatio) !== null && _b !== void 0 ? _b : 1;\n}\nfunction createFont(size, weight, family) {\n    return \"\".concat(weight !== null && weight !== void 0 ? weight : \"normal\", \" \").concat(size !== null && size !== void 0 ? size : 12, \"px \").concat(family !== null && family !== void 0 ? family : \"Helvetica Neue\");\n}\n/**\n * Measure the width of text\n * @param text\n * @returns {number}\n */ function calcTextWidth(text, size, weight, family) {\n    if (!isValid(measureCtx)) {\n        var canvas = document.createElement(\"canvas\");\n        var pixelRatio = getPixelRatio(canvas);\n        measureCtx = canvas.getContext(\"2d\");\n        measureCtx.scale(pixelRatio, pixelRatio);\n    }\n    measureCtx.font = createFont(size, weight, family);\n    return Math.round(measureCtx.measureText(text).width);\n}\n/**\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n\n * http://www.apache.org/licenses/LICENSE-2.0\n\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ var ActionType;\n(function(ActionType) {\n    ActionType[\"OnZoom\"] = \"onZoom\";\n    ActionType[\"OnScroll\"] = \"onScroll\";\n    ActionType[\"OnVisibleRangeChange\"] = \"onVisibleRangeChange\";\n    ActionType[\"OnCandleTooltipFeatureClick\"] = \"onCandleTooltipFeatureClick\";\n    ActionType[\"OnCrosshairChange\"] = \"onCrosshairChange\";\n    ActionType[\"OnCandleBarClick\"] = \"onCandleBarClick\";\n    ActionType[\"OnPaneDrag\"] = \"onPaneDrag\";\n})(ActionType || (ActionType = {}));\nvar Action = /** @class */ function() {\n    function Action() {\n        this._callbacks = [];\n    }\n    Action.prototype.subscribe = function(callback) {\n        var index = this._callbacks.indexOf(callback);\n        if (index < 0) {\n            this._callbacks.push(callback);\n        }\n    };\n    Action.prototype.unsubscribe = function(callback) {\n        if (isFunction(callback)) {\n            var index = this._callbacks.indexOf(callback);\n            if (index > -1) {\n                this._callbacks.splice(index, 1);\n            }\n        } else {\n            this._callbacks = [];\n        }\n    };\n    Action.prototype.execute = function(data) {\n        this._callbacks.forEach(function(callback) {\n            callback(data);\n        });\n    };\n    Action.prototype.isEmpty = function() {\n        return this._callbacks.length === 0;\n    };\n    return Action;\n}();\n/**\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n\n * http://www.apache.org/licenses/LICENSE-2.0\n\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ var IndicatorSeries;\n(function(IndicatorSeries) {\n    IndicatorSeries[\"Normal\"] = \"normal\";\n    IndicatorSeries[\"Price\"] = \"price\";\n    IndicatorSeries[\"Volume\"] = \"volume\";\n})(IndicatorSeries || (IndicatorSeries = {}));\nvar IndicatorEventTarget;\n(function(IndicatorEventTarget) {\n    IndicatorEventTarget[\"Feature\"] = \"feature\";\n})(IndicatorEventTarget || (IndicatorEventTarget = {}));\nvar IndicatorDataState;\n(function(IndicatorDataState) {\n    IndicatorDataState[\"Loading\"] = \"loading\";\n    IndicatorDataState[\"Error\"] = \"error\";\n    IndicatorDataState[\"Ready\"] = \"ready\";\n})(IndicatorDataState || (IndicatorDataState = {}));\nfunction eachFigures(indicator, dataIndex, defaultStyles, eachFigureCallback) {\n    var result = indicator.result;\n    var figures = indicator.figures;\n    var styles = indicator.styles;\n    var circleStyles = formatValue(styles, \"circles\", defaultStyles.circles);\n    var circleStyleCount = circleStyles.length;\n    var barStyles = formatValue(styles, \"bars\", defaultStyles.bars);\n    var barStyleCount = barStyles.length;\n    var lineStyles = formatValue(styles, \"lines\", defaultStyles.lines);\n    var lineStyleCount = lineStyles.length;\n    var circleCount = 0;\n    var barCount = 0;\n    var lineCount = 0;\n    // eslint-disable-next-line @typescript-eslint/init-declarations  -- ignore\n    var defaultFigureStyles;\n    var figureIndex = 0;\n    figures.forEach(function(figure) {\n        var _a;\n        switch(figure.type){\n            case \"circle\":\n                {\n                    figureIndex = circleCount;\n                    var styles_1 = circleStyles[circleCount % circleStyleCount];\n                    defaultFigureStyles = __assign(__assign({}, styles_1), {\n                        color: styles_1.noChangeColor\n                    });\n                    circleCount++;\n                    break;\n                }\n            case \"bar\":\n                {\n                    figureIndex = barCount;\n                    var styles_2 = barStyles[barCount % barStyleCount];\n                    defaultFigureStyles = __assign(__assign({}, styles_2), {\n                        color: styles_2.noChangeColor\n                    });\n                    barCount++;\n                    break;\n                }\n            case \"line\":\n                {\n                    figureIndex = lineCount;\n                    defaultFigureStyles = lineStyles[lineCount % lineStyleCount];\n                    lineCount++;\n                    break;\n                }\n        }\n        if (isValid(figure.type)) {\n            var ss = (_a = figure.styles) === null || _a === void 0 ? void 0 : _a.call(figure, {\n                data: {\n                    prev: result[dataIndex - 1],\n                    current: result[dataIndex],\n                    next: result[dataIndex + 1]\n                },\n                indicator: indicator,\n                defaultStyles: defaultStyles\n            });\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-argument -- ignore\n            eachFigureCallback(figure, __assign(__assign({}, defaultFigureStyles), ss), figureIndex);\n        }\n    });\n}\nvar IndicatorImp = /** @class */ function() {\n    function IndicatorImp(indicator) {\n        this.precision = 4;\n        this.calcParams = [];\n        this.shouldOhlc = false;\n        this.shouldFormatBigNumber = false;\n        this.visible = true;\n        this.zLevel = 0;\n        this.series = IndicatorSeries.Normal;\n        this.figures = [];\n        this.minValue = null;\n        this.maxValue = null;\n        this.styles = null;\n        this.shouldUpdate = function(prev, current) {\n            var calc = JSON.stringify(prev.calcParams) !== JSON.stringify(current.calcParams) || prev.figures !== current.figures || prev.calc !== current.calc;\n            var draw = calc || prev.shortName !== current.shortName || prev.series !== current.series || prev.minValue !== current.minValue || prev.maxValue !== current.maxValue || prev.precision !== current.precision || prev.shouldOhlc !== current.shouldOhlc || prev.shouldFormatBigNumber !== current.shouldFormatBigNumber || prev.visible !== current.visible || prev.zLevel !== current.zLevel || prev.extendData !== current.extendData || prev.regenerateFigures !== current.regenerateFigures || prev.createTooltipDataSource !== current.createTooltipDataSource || prev.draw !== current.draw;\n            return {\n                calc: calc,\n                draw: draw\n            };\n        };\n        this.calc = function() {\n            return [];\n        };\n        this.regenerateFigures = null;\n        this.createTooltipDataSource = null;\n        this.draw = null;\n        this.onClick = null;\n        this.onDataStateChange = null;\n        this.result = [];\n        this._lockSeriesPrecision = false;\n        this.override(indicator);\n        this._lockSeriesPrecision = false;\n    }\n    IndicatorImp.prototype.override = function(indicator) {\n        var _a, _b;\n        var _c = this, result = _c.result, currentOthers = __rest(_c, [\n            \"result\"\n        ]);\n        this._prevIndicator = __assign(__assign({}, clone(currentOthers)), {\n            result: result\n        });\n        var id = indicator.id, name = indicator.name, shortName = indicator.shortName, precision = indicator.precision, styles = indicator.styles, figures = indicator.figures, calcParams = indicator.calcParams, others = __rest(indicator, [\n            \"id\",\n            \"name\",\n            \"shortName\",\n            \"precision\",\n            \"styles\",\n            \"figures\",\n            \"calcParams\"\n        ]);\n        if (!isString(this.id) && isString(id)) {\n            this.id = id;\n        }\n        if (!isString(this.name)) {\n            this.name = name !== null && name !== void 0 ? name : \"\";\n        }\n        // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition  -- ignore\n        this.shortName = (_a = shortName !== null && shortName !== void 0 ? shortName : this.shortName) !== null && _a !== void 0 ? _a : this.name;\n        if (isNumber(precision)) {\n            this.precision = precision;\n            this._lockSeriesPrecision = true;\n        }\n        if (isValid(styles)) {\n            (_b = this.styles) !== null && _b !== void 0 ? _b : this.styles = {};\n            merge(this.styles, styles);\n        }\n        merge(this, others);\n        if (isValid(calcParams)) {\n            this.calcParams = calcParams;\n            if (isFunction(this.regenerateFigures)) {\n                this.figures = this.regenerateFigures(this.calcParams);\n            }\n        }\n        this.figures = figures !== null && figures !== void 0 ? figures : this.figures;\n    };\n    IndicatorImp.prototype.setSeriesPrecision = function(precision) {\n        if (!this._lockSeriesPrecision) {\n            this.precision = precision;\n        }\n    };\n    IndicatorImp.prototype.shouldUpdateImp = function() {\n        var sort = this._prevIndicator.zLevel !== this.zLevel;\n        var result = this.shouldUpdate(this._prevIndicator, this);\n        if (isBoolean(result)) {\n            return {\n                calc: result,\n                draw: result,\n                sort: sort\n            };\n        }\n        return __assign(__assign({}, result), {\n            sort: sort\n        });\n    };\n    IndicatorImp.prototype.calcImp = function(dataList) {\n        return __awaiter(this, void 0, void 0, function() {\n            var result;\n            return __generator(this, function(_a) {\n                switch(_a.label){\n                    case 0:\n                        _a.trys.push([\n                            0,\n                            2,\n                            ,\n                            3\n                        ]);\n                        return [\n                            4 /*yield*/ ,\n                            this.calc(dataList, this)\n                        ];\n                    case 1:\n                        result = _a.sent();\n                        this.result = result;\n                        return [\n                            2 /*return*/ ,\n                            true\n                        ];\n                    case 2:\n                        _a.sent();\n                        return [\n                            2 /*return*/ ,\n                            false\n                        ];\n                    case 3:\n                        return [\n                            2 /*return*/ \n                        ];\n                }\n            });\n        });\n    };\n    IndicatorImp.extend = function(template) {\n        var Custom = /** @class */ function(_super) {\n            __extends(Custom, _super);\n            function Custom() {\n                return _super.call(this, template) || this;\n            }\n            return Custom;\n        }(IndicatorImp);\n        return Custom;\n    };\n    return IndicatorImp;\n}();\n/**\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n\n * http://www.apache.org/licenses/LICENSE-2.0\n\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ var OverlayMode;\n(function(OverlayMode) {\n    OverlayMode[\"Normal\"] = \"normal\";\n    OverlayMode[\"WeakMagnet\"] = \"weak_magnet\";\n    OverlayMode[\"StrongMagnet\"] = \"strong_magnet\";\n})(OverlayMode || (OverlayMode = {}));\nfunction checkOverlayFigureEvent(targetEventType, figure) {\n    var _a;\n    var ignoreEvent = (_a = figure === null || figure === void 0 ? void 0 : figure.ignoreEvent) !== null && _a !== void 0 ? _a : false;\n    if (isBoolean(ignoreEvent)) {\n        return !ignoreEvent;\n    }\n    return !ignoreEvent.includes(targetEventType);\n}\nvar OVERLAY_DRAW_STEP_START = 1;\nvar OVERLAY_DRAW_STEP_FINISHED = -1;\nvar OVERLAY_ID_PREFIX = \"overlay_\";\nvar OVERLAY_FIGURE_KEY_PREFIX = \"overlay_figure_\";\nvar OverlayImp = /** @class */ function() {\n    function OverlayImp(overlay) {\n        this.groupId = \"\";\n        this.totalStep = 1;\n        this.currentStep = OVERLAY_DRAW_STEP_START;\n        this.lock = false;\n        this.visible = true;\n        this.zLevel = 0;\n        this.needDefaultPointFigure = false;\n        this.needDefaultXAxisFigure = false;\n        this.needDefaultYAxisFigure = false;\n        this.mode = OverlayMode.Normal;\n        this.modeSensitivity = 8;\n        this.points = [];\n        this.styles = null;\n        this.createPointFigures = null;\n        this.createXAxisFigures = null;\n        this.createYAxisFigures = null;\n        this.performEventPressedMove = null;\n        this.performEventMoveForDrawing = null;\n        this.onDrawStart = null;\n        this.onDrawing = null;\n        this.onDrawEnd = null;\n        this.onClick = null;\n        this.onDoubleClick = null;\n        this.onRightClick = null;\n        this.onPressedMoveStart = null;\n        this.onPressedMoving = null;\n        this.onPressedMoveEnd = null;\n        this.onMouseEnter = null;\n        this.onMouseLeave = null;\n        this.onRemoved = null;\n        this.onSelected = null;\n        this.onDeselected = null;\n        this._prevZLevel = 0;\n        this._prevPressedPoint = null;\n        this._prevPressedPoints = [];\n        this.override(overlay);\n    }\n    OverlayImp.prototype.override = function(overlay) {\n        var _a, _b;\n        this._prevOverlay = clone(this);\n        var id = overlay.id, name = overlay.name;\n        overlay.currentStep;\n        var points = overlay.points, styles = overlay.styles, others = __rest(overlay, [\n            \"id\",\n            \"name\",\n            \"currentStep\",\n            \"points\",\n            \"styles\"\n        ]);\n        merge(this, others);\n        if (!isString(this.name)) {\n            this.name = name !== null && name !== void 0 ? name : \"\";\n        }\n        if (!isString(this.id) && isString(id)) {\n            this.id = id;\n        }\n        if (isValid(styles)) {\n            (_a = this.styles) !== null && _a !== void 0 ? _a : this.styles = {};\n            merge(this.styles, styles);\n        }\n        if (isArray(points) && points.length > 0) {\n            var repeatTotalStep = 0;\n            this.points = __spreadArray([], __read(points), false);\n            if (points.length >= this.totalStep - 1) {\n                this.currentStep = OVERLAY_DRAW_STEP_FINISHED;\n                repeatTotalStep = this.totalStep - 1;\n            } else {\n                this.currentStep = points.length + 1;\n                repeatTotalStep = points.length;\n            }\n            // Prevent wrong drawing due to wrong points\n            if (isFunction(this.performEventMoveForDrawing)) {\n                for(var i = 0; i < repeatTotalStep; i++){\n                    this.performEventMoveForDrawing({\n                        currentStep: i + 2,\n                        mode: this.mode,\n                        points: this.points,\n                        performPointIndex: i,\n                        performPoint: this.points[i]\n                    });\n                }\n            }\n            if (this.currentStep === OVERLAY_DRAW_STEP_FINISHED) {\n                (_b = this.performEventPressedMove) === null || _b === void 0 ? void 0 : _b.call(this, {\n                    currentStep: this.currentStep,\n                    mode: this.mode,\n                    points: this.points,\n                    performPointIndex: this.points.length - 1,\n                    performPoint: this.points[this.points.length - 1]\n                });\n            }\n        }\n    };\n    OverlayImp.prototype.getPrevZLevel = function() {\n        return this._prevZLevel;\n    };\n    OverlayImp.prototype.setPrevZLevel = function(zLevel) {\n        this._prevZLevel = zLevel;\n    };\n    OverlayImp.prototype.shouldUpdate = function() {\n        var sort = this._prevOverlay.zLevel !== this.zLevel;\n        var draw = sort || JSON.stringify(this._prevOverlay) !== JSON.stringify(this.points) || this._prevOverlay.visible !== this.visible || this._prevOverlay.extendData !== this.extendData || this._prevOverlay.styles !== this.styles;\n        return {\n            sort: sort,\n            draw: draw\n        };\n    };\n    OverlayImp.prototype.nextStep = function() {\n        if (this.currentStep === this.totalStep - 1) {\n            this.currentStep = OVERLAY_DRAW_STEP_FINISHED;\n        } else {\n            this.currentStep++;\n        }\n    };\n    OverlayImp.prototype.forceComplete = function() {\n        this.currentStep = OVERLAY_DRAW_STEP_FINISHED;\n    };\n    OverlayImp.prototype.isDrawing = function() {\n        return this.currentStep !== OVERLAY_DRAW_STEP_FINISHED;\n    };\n    OverlayImp.prototype.isStart = function() {\n        return this.currentStep === OVERLAY_DRAW_STEP_START;\n    };\n    OverlayImp.prototype.eventMoveForDrawing = function(point) {\n        var _a;\n        var pointIndex = this.currentStep - 1;\n        var newPoint = {};\n        if (isNumber(point.timestamp)) {\n            newPoint.timestamp = point.timestamp;\n        }\n        if (isNumber(point.dataIndex)) {\n            newPoint.dataIndex = point.dataIndex;\n        }\n        if (isNumber(point.value)) {\n            newPoint.value = point.value;\n        }\n        this.points[pointIndex] = newPoint;\n        (_a = this.performEventMoveForDrawing) === null || _a === void 0 ? void 0 : _a.call(this, {\n            currentStep: this.currentStep,\n            mode: this.mode,\n            points: this.points,\n            performPointIndex: pointIndex,\n            performPoint: newPoint\n        });\n    };\n    OverlayImp.prototype.eventPressedPointMove = function(point, pointIndex) {\n        var _a;\n        this.points[pointIndex].timestamp = point.timestamp;\n        if (isNumber(point.value)) {\n            this.points[pointIndex].value = point.value;\n        }\n        (_a = this.performEventPressedMove) === null || _a === void 0 ? void 0 : _a.call(this, {\n            currentStep: this.currentStep,\n            points: this.points,\n            mode: this.mode,\n            performPointIndex: pointIndex,\n            performPoint: this.points[pointIndex]\n        });\n    };\n    OverlayImp.prototype.startPressedMove = function(point) {\n        this._prevPressedPoint = __assign({}, point);\n        this._prevPressedPoints = clone(this.points);\n    };\n    OverlayImp.prototype.eventPressedOtherMove = function(point, chartStore) {\n        if (this._prevPressedPoint !== null) {\n            var difDataIndex_1 = null;\n            if (isNumber(point.dataIndex) && isNumber(this._prevPressedPoint.dataIndex)) {\n                difDataIndex_1 = point.dataIndex - this._prevPressedPoint.dataIndex;\n            }\n            var difValue_1 = null;\n            if (isNumber(point.value) && isNumber(this._prevPressedPoint.value)) {\n                difValue_1 = point.value - this._prevPressedPoint.value;\n            }\n            this.points = this._prevPressedPoints.map(function(p) {\n                var _a;\n                if (isNumber(p.timestamp)) {\n                    p.dataIndex = chartStore.timestampToDataIndex(p.timestamp);\n                }\n                var newPoint = __assign({}, p);\n                if (isNumber(difDataIndex_1) && isNumber(p.dataIndex)) {\n                    newPoint.dataIndex = p.dataIndex + difDataIndex_1;\n                    newPoint.timestamp = (_a = chartStore.dataIndexToTimestamp(newPoint.dataIndex)) !== null && _a !== void 0 ? _a : undefined;\n                }\n                if (isNumber(difValue_1) && isNumber(p.value)) {\n                    newPoint.value = p.value + difValue_1;\n                }\n                return newPoint;\n            });\n        }\n    };\n    OverlayImp.extend = function(template) {\n        var Custom = /** @class */ function(_super) {\n            __extends(Custom, _super);\n            function Custom() {\n                return _super.call(this, template) || this;\n            }\n            return Custom;\n        }(OverlayImp);\n        return Custom;\n    };\n    return OverlayImp;\n}();\n/**\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n\n * http://www.apache.org/licenses/LICENSE-2.0\n\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ var FormatDateType;\n(function(FormatDateType) {\n    FormatDateType[FormatDateType[\"Tooltip\"] = 0] = \"Tooltip\";\n    FormatDateType[FormatDateType[\"Crosshair\"] = 1] = \"Crosshair\";\n    FormatDateType[FormatDateType[\"XAxis\"] = 2] = \"XAxis\";\n})(FormatDateType || (FormatDateType = {}));\n/**\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n\n * http://www.apache.org/licenses/LICENSE-2.0\n\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ function createDefaultBounding(bounding) {\n    var defaultBounding = {\n        width: 0,\n        height: 0,\n        left: 0,\n        right: 0,\n        top: 0,\n        bottom: 0\n    };\n    if (isValid(bounding)) {\n        merge(defaultBounding, bounding);\n    }\n    return defaultBounding;\n}\n/**\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n\n * http://www.apache.org/licenses/LICENSE-2.0\n\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ var DEFAULT_REQUEST_ID = -1;\nfunction requestAnimationFrame(fn) {\n    if (isFunction(window.requestAnimationFrame)) {\n        return window.requestAnimationFrame(fn);\n    }\n    return window.setTimeout(fn, 20);\n}\nfunction cancelAnimationFrame(id) {\n    if (isFunction(window.cancelAnimationFrame)) {\n        window.cancelAnimationFrame(id);\n    } else {\n        window.clearTimeout(id);\n    }\n}\nfunction requestIdleCallback(fn) {\n    if (isFunction(window.requestIdleCallback)) {\n        return window.requestIdleCallback(fn);\n    }\n    var startTime = performance.now();\n    return window.setTimeout(function() {\n        fn({\n            didTimeout: false,\n            timeRemaining: function() {\n                return Math.max(0, 50 - (performance.now() - startTime));\n            }\n        });\n    }, 1);\n}\nfunction cancelIdleCallback(id) {\n    if (isFunction(window.cancelIdleCallback)) {\n        window.cancelIdleCallback(id);\n    } else {\n        window.clearTimeout(id);\n    }\n}\n/**\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n\n * http://www.apache.org/licenses/LICENSE-2.0\n\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ var Animation = /** @class */ function() {\n    function Animation(options) {\n        this._options = {\n            duration: 500,\n            iterationCount: 1\n        };\n        this._currentIterationCount = 0;\n        this._running = false;\n        this._time = 0;\n        merge(this._options, options);\n    }\n    Animation.prototype._loop = function() {\n        var _this = this;\n        this._running = true;\n        var step = function() {\n            var _a;\n            if (_this._running) {\n                var diffTime = new Date().getTime() - _this._time;\n                if (diffTime < _this._options.duration) {\n                    (_a = _this._doFrameCallback) === null || _a === void 0 ? void 0 : _a.call(_this, diffTime);\n                    requestAnimationFrame(step);\n                } else {\n                    _this.stop();\n                    _this._currentIterationCount++;\n                    if (_this._currentIterationCount < _this._options.iterationCount) {\n                        _this.start();\n                    }\n                }\n            }\n        };\n        requestAnimationFrame(step);\n    };\n    Animation.prototype.doFrame = function(callback) {\n        this._doFrameCallback = callback;\n        return this;\n    };\n    Animation.prototype.setDuration = function(duration) {\n        this._options.duration = duration;\n        return this;\n    };\n    Animation.prototype.setIterationCount = function(iterationCount) {\n        this._options.iterationCount = iterationCount;\n        return this;\n    };\n    Animation.prototype.start = function() {\n        if (!this._running) {\n            this._time = new Date().getTime();\n            this._loop();\n        }\n    };\n    Animation.prototype.stop = function() {\n        var _a;\n        if (this._running) {\n            (_a = this._doFrameCallback) === null || _a === void 0 ? void 0 : _a.call(this, this._options.duration);\n        }\n        this._running = false;\n    };\n    return Animation;\n}();\n/**\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n\n * http://www.apache.org/licenses/LICENSE-2.0\n\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ var baseId = 1;\nvar prevIdTimestamp = new Date().getTime();\nfunction createId(prefix) {\n    var timestamp = new Date().getTime();\n    if (timestamp === prevIdTimestamp) {\n        ++baseId;\n    } else {\n        baseId = 1;\n    }\n    prevIdTimestamp = timestamp;\n    return \"\".concat(prefix !== null && prefix !== void 0 ? prefix : \"\").concat(timestamp, \"_\").concat(baseId);\n}\n/**\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n\n * http://www.apache.org/licenses/LICENSE-2.0\n\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ /**\n * Create dom\n * @param tagName\n * @param styles\n * @return {*}\n */ function createDom(tagName, styles) {\n    var _a;\n    var dom = document.createElement(tagName);\n    var s = styles !== null && styles !== void 0 ? styles : {};\n    // eslint-disable-next-line guard-for-in -- ignore\n    for(var key in s){\n        dom.style[key] = (_a = s[key]) !== null && _a !== void 0 ? _a : \"\";\n    }\n    return dom;\n}\n/**\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n\n * http://www.apache.org/licenses/LICENSE-2.0\n\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ /**\n * Binary search for the nearest result\n * @param dataList\n * @param valueKey\n * @param targetValue\n * @return {number}\n */ function binarySearchNearest(dataList, valueKey, targetValue) {\n    var left = 0;\n    var right = 0;\n    for(right = dataList.length - 1; left !== right;){\n        var midIndex = Math.floor((right + left) / 2);\n        var mid = right - left;\n        var midValue = dataList[midIndex][valueKey];\n        if (targetValue === dataList[left][valueKey]) {\n            return left;\n        }\n        if (targetValue === dataList[right][valueKey]) {\n            return right;\n        }\n        if (targetValue === midValue) {\n            return midIndex;\n        }\n        if (targetValue > midValue) {\n            left = midIndex;\n        } else {\n            right = midIndex;\n        }\n        if (mid <= 2) {\n            break;\n        }\n    }\n    return left;\n}\n/**\n * 优化数字\n * @param value\n * @return {number|number}\n */ function nice(value) {\n    var exponent = Math.floor(log10(value));\n    var exp10 = index10(exponent);\n    var f = value / exp10; // 1 <= f < 10\n    var nf = 0;\n    if (f < 1.5) {\n        nf = 1;\n    } else if (f < 2.5) {\n        nf = 2;\n    } else if (f < 3.5) {\n        nf = 3;\n    } else if (f < 4.5) {\n        nf = 4;\n    } else if (f < 5.5) {\n        nf = 5;\n    } else if (f < 6.5) {\n        nf = 6;\n    } else {\n        nf = 8;\n    }\n    value = nf * exp10;\n    return +value.toFixed(Math.abs(exponent));\n}\n/**\n * Round\n * @param value\n * @param precision\n * @return {number}\n */ function round(value, precision) {\n    precision = Math.max(0, precision !== null && precision !== void 0 ? precision : 0);\n    var pow = Math.pow(10, precision);\n    return Math.round(value * pow) / pow;\n}\n/**\n * Get precision\n * @param value\n * @return {number|number}\n */ function getPrecision(value) {\n    var str = value.toString();\n    var eIndex = str.indexOf(\"e\");\n    if (eIndex > 0) {\n        var precision = +str.slice(eIndex + 1);\n        return precision < 0 ? -precision : 0;\n    }\n    var dotIndex = str.indexOf(\".\");\n    return dotIndex < 0 ? 0 : str.length - 1 - dotIndex;\n}\nfunction getMaxMin(dataList, maxKey, minKey) {\n    var _a, _b;\n    var maxMin = [\n        Number.MIN_SAFE_INTEGER,\n        Number.MAX_SAFE_INTEGER\n    ];\n    var dataLength = dataList.length;\n    var index = 0;\n    while(index < dataLength){\n        var data = dataList[index];\n        maxMin[0] = Math.max((_a = data[maxKey]) !== null && _a !== void 0 ? _a : Number.MIN_SAFE_INTEGER, maxMin[0]);\n        maxMin[1] = Math.min((_b = data[minKey]) !== null && _b !== void 0 ? _b : Number.MAX_SAFE_INTEGER, maxMin[1]);\n        ++index;\n    }\n    return maxMin;\n}\n/**\n * log10\n * @param value\n * @return {number}\n */ function log10(value) {\n    if (value === 0) {\n        return 0;\n    }\n    return Math.log10(value);\n}\n/**\n * index 10\n * @param value\n * @return {number}\n */ function index10(value) {\n    return Math.pow(10, value);\n}\n/**\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n\n * http://www.apache.org/licenses/LICENSE-2.0\n\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ var LoadDataType;\n(function(LoadDataType) {\n    LoadDataType[\"Init\"] = \"init\";\n    LoadDataType[\"Forward\"] = \"forward\";\n    LoadDataType[\"Backward\"] = \"backward\";\n    LoadDataType[\"Update\"] = \"update\";\n})(LoadDataType || (LoadDataType = {}));\n/**\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n\n * http://www.apache.org/licenses/LICENSE-2.0\n\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ function getDefaultVisibleRange() {\n    return {\n        from: 0,\n        to: 0,\n        realFrom: 0,\n        realTo: 0\n    };\n}\n/**\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n\n * http://www.apache.org/licenses/LICENSE-2.0\n\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ function generateTaskId() {\n    var params = [];\n    for(var _i = 0; _i < arguments.length; _i++){\n        params[_i] = arguments[_i];\n    }\n    return params.join(\"_\");\n}\nvar TaskScheduler = /** @class */ function() {\n    function TaskScheduler(tasks) {\n        this._requestIdleCallbackId = DEFAULT_REQUEST_ID;\n        this._tasks = tasks !== null && tasks !== void 0 ? tasks : [];\n        this._operateTasks();\n    }\n    TaskScheduler.prototype._operateTasks = function(fn) {\n        var _this = this;\n        if (this._requestIdleCallbackId !== DEFAULT_REQUEST_ID) {\n            cancelIdleCallback(this._requestIdleCallbackId);\n            this._requestIdleCallbackId = DEFAULT_REQUEST_ID;\n        }\n        fn === null || fn === void 0 ? void 0 : fn();\n        this._requestIdleCallbackId = requestIdleCallback(function(deadline) {\n            _this._runTasks(deadline);\n        });\n    };\n    TaskScheduler.prototype._runTasks = function(deadline) {\n        var _this = this;\n        while(deadline.timeRemaining() > 0 && this._tasks.length > 0){\n            var task = this._tasks.shift();\n            task === null || task === void 0 ? void 0 : task.handler();\n        }\n        if (this._tasks.length > 0) {\n            this._requestIdleCallbackId = requestIdleCallback(function(deadline) {\n                _this._runTasks(deadline);\n            });\n        }\n    };\n    TaskScheduler.prototype.addTask = function(task) {\n        var _this = this;\n        this._operateTasks(function() {\n            var index = _this._tasks.findIndex(function(t) {\n                return t.id === task.id;\n            });\n            if (index > -1) {\n                _this._tasks[index] = task;\n            } else {\n                _this._tasks.push(task);\n            }\n        });\n        return this;\n    };\n    TaskScheduler.prototype.removeTask = function(id) {\n        var _this = this;\n        this._operateTasks(function() {\n            var index = _this._tasks.findIndex(function(t) {\n                return t.id === id;\n            });\n            if (index > -1) {\n                _this._tasks.splice(index, 1);\n            }\n        });\n        return this;\n    };\n    return TaskScheduler;\n}();\n/**\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n\n * http://www.apache.org/licenses/LICENSE-2.0\n\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ var TimeWeightConstants = {\n    Year: 365 * 24 * 3600,\n    Month: 30 * 24 * 3600,\n    Day: 24 * 3600,\n    Hour: 3600,\n    Minute: 60,\n    Second: 1\n};\nfunction classifyTimeWeightTicks(map, dataList, dateTimeFormat, baseDataIndex, minTimeSpan, startTimestamp) {\n    var _a;\n    if (baseDataIndex === void 0) {\n        baseDataIndex = 0;\n    }\n    var prevDateTime = null;\n    var prevTimestamp = startTimestamp !== null && startTimestamp !== void 0 ? startTimestamp : null;\n    for(var i = 0; i < dataList.length; i++){\n        var timestamp = dataList[i].timestamp;\n        var weight = TimeWeightConstants.Minute;\n        var dateTime = formatTimestampToDateTime(dateTimeFormat, timestamp);\n        if (isValid(prevDateTime)) {\n            if (dateTime.YYYY !== prevDateTime.YYYY) {\n                weight = TimeWeightConstants.Year;\n            } else if (dateTime.MM !== prevDateTime.MM) {\n                weight = TimeWeightConstants.Month;\n            } else if (dateTime.DD !== prevDateTime.DD) {\n                weight = TimeWeightConstants.Day;\n            } else if (dateTime.HH !== prevDateTime.HH) {\n                weight = TimeWeightConstants.Hour;\n            } else if (dateTime.mm !== prevDateTime.mm) {\n                weight = TimeWeightConstants.Minute;\n            } else {\n                weight = TimeWeightConstants.Second;\n            }\n        }\n        if (isNumber(prevTimestamp) && isNumber(minTimeSpan === null || minTimeSpan === void 0 ? void 0 : minTimeSpan.compare)) {\n            minTimeSpan.compare = Math.min(minTimeSpan.compare, timestamp - prevTimestamp);\n        }\n        var currentTimeWeightList = (_a = map.get(weight)) !== null && _a !== void 0 ? _a : [];\n        currentTimeWeightList.push({\n            dataIndex: i + baseDataIndex,\n            weight: weight,\n            timestamp: timestamp\n        });\n        map.set(weight, currentTimeWeightList);\n        prevDateTime = dateTime;\n        prevTimestamp = timestamp;\n    }\n}\nfunction calcBetweenTimeWeightTickBarCount(barSpace, textStyles) {\n    var space = Math.max(calcTextWidth(\"0000-00-00 00:00:00\", textStyles.size, textStyles.weight, textStyles.family), 146);\n    return Math.ceil(space / barSpace);\n}\nfunction createTimeWeightTickList(map, barSpace, textStyles) {\n    var barCount = calcBetweenTimeWeightTickBarCount(barSpace, textStyles);\n    var optTimeWeightTickList = [];\n    Array.from(map.keys()).sort(function(w1, w2) {\n        return w2 - w1;\n    }).forEach(function(weight) {\n        var currentTimeWeightTickList = map.get(weight);\n        var prevOptTimeWeightTickList = optTimeWeightTickList;\n        optTimeWeightTickList = [];\n        var prevOptTimeWeightTickListLength = prevOptTimeWeightTickList.length;\n        var prevOptTimeWeightTickListPointer = 0;\n        var currentTimeWeightTickListLength = currentTimeWeightTickList.length;\n        var rightIndex = Infinity;\n        var leftIndex = -Infinity;\n        for(var i = 0; i < currentTimeWeightTickListLength; i++){\n            var timeWeightTick = currentTimeWeightTickList[i];\n            var currentIndex = timeWeightTick.dataIndex;\n            while(prevOptTimeWeightTickListPointer < prevOptTimeWeightTickListLength){\n                var lastTimeWeightTick = prevOptTimeWeightTickList[prevOptTimeWeightTickListPointer];\n                var lastIndex = lastTimeWeightTick.dataIndex;\n                if (lastIndex < currentIndex) {\n                    prevOptTimeWeightTickListPointer++;\n                    optTimeWeightTickList.push(lastTimeWeightTick);\n                    leftIndex = lastIndex;\n                    rightIndex = Infinity;\n                } else {\n                    rightIndex = lastIndex;\n                    break;\n                }\n            }\n            if (rightIndex - currentIndex >= barCount && currentIndex - leftIndex >= barCount) {\n                optTimeWeightTickList.push(timeWeightTick);\n                leftIndex = currentIndex;\n            }\n        }\n        for(; prevOptTimeWeightTickListPointer < prevOptTimeWeightTickListLength; prevOptTimeWeightTickListPointer++){\n            optTimeWeightTickList.push(prevOptTimeWeightTickList[prevOptTimeWeightTickListPointer]);\n        }\n    });\n    return optTimeWeightTickList;\n}\n/**\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n\n * http://www.apache.org/licenses/LICENSE-2.0\n\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ /**\n * average price\n */ var averagePrice = {\n    name: \"AVP\",\n    shortName: \"AVP\",\n    series: IndicatorSeries.Price,\n    precision: 2,\n    figures: [\n        {\n            key: \"avp\",\n            title: \"AVP: \",\n            type: \"line\"\n        }\n    ],\n    calc: function(dataList) {\n        var totalTurnover = 0;\n        var totalVolume = 0;\n        return dataList.map(function(kLineData) {\n            var _a, _b;\n            var avp = {};\n            var turnover = (_a = kLineData.turnover) !== null && _a !== void 0 ? _a : 0;\n            var volume = (_b = kLineData.volume) !== null && _b !== void 0 ? _b : 0;\n            totalTurnover += turnover;\n            totalVolume += volume;\n            if (totalVolume !== 0) {\n                avp.avp = totalTurnover / totalVolume;\n            }\n            return avp;\n        });\n    }\n};\n/**\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n\n * http://www.apache.org/licenses/LICENSE-2.0\n\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ var awesomeOscillator = {\n    name: \"AO\",\n    shortName: \"AO\",\n    calcParams: [\n        5,\n        34\n    ],\n    figures: [\n        {\n            key: \"ao\",\n            title: \"AO: \",\n            type: \"bar\",\n            baseValue: 0,\n            styles: function(_a) {\n                var _b, _c;\n                var data = _a.data, indicator = _a.indicator, defaultStyles = _a.defaultStyles;\n                var prev = data.prev, current = data.current;\n                var prevAo = (_b = prev === null || prev === void 0 ? void 0 : prev.ao) !== null && _b !== void 0 ? _b : Number.MIN_SAFE_INTEGER;\n                var currentAo = (_c = current === null || current === void 0 ? void 0 : current.ao) !== null && _c !== void 0 ? _c : Number.MIN_SAFE_INTEGER;\n                var color = \"\";\n                if (currentAo > prevAo) {\n                    color = formatValue(indicator.styles, \"bars[0].upColor\", defaultStyles.bars[0].upColor);\n                } else {\n                    color = formatValue(indicator.styles, \"bars[0].downColor\", defaultStyles.bars[0].downColor);\n                }\n                var style = currentAo > prevAo ? PolygonType.Stroke : PolygonType.Fill;\n                return {\n                    color: color,\n                    style: style,\n                    borderColor: color\n                };\n            }\n        }\n    ],\n    calc: function(dataList, indicator) {\n        var params = indicator.calcParams;\n        var maxPeriod = Math.max(params[0], params[1]);\n        var shortSum = 0;\n        var longSum = 0;\n        var short = 0;\n        var long = 0;\n        return dataList.map(function(kLineData, i) {\n            var ao = {};\n            var middle = (kLineData.low + kLineData.high) / 2;\n            shortSum += middle;\n            longSum += middle;\n            if (i >= params[0] - 1) {\n                short = shortSum / params[0];\n                var agoKLineData = dataList[i - (params[0] - 1)];\n                shortSum -= (agoKLineData.low + agoKLineData.high) / 2;\n            }\n            if (i >= params[1] - 1) {\n                long = longSum / params[1];\n                var agoKLineData = dataList[i - (params[1] - 1)];\n                longSum -= (agoKLineData.low + agoKLineData.high) / 2;\n            }\n            if (i >= maxPeriod - 1) {\n                ao.ao = short - long;\n            }\n            return ao;\n        });\n    }\n};\n/**\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n\n * http://www.apache.org/licenses/LICENSE-2.0\n\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ /**\n * BIAS\n * 乖离率=[(当日收盘价-N日平均价)/N日平均价]*100%\n */ var bias = {\n    name: \"BIAS\",\n    shortName: \"BIAS\",\n    calcParams: [\n        6,\n        12,\n        24\n    ],\n    figures: [\n        {\n            key: \"bias1\",\n            title: \"BIAS6: \",\n            type: \"line\"\n        },\n        {\n            key: \"bias2\",\n            title: \"BIAS12: \",\n            type: \"line\"\n        },\n        {\n            key: \"bias3\",\n            title: \"BIAS24: \",\n            type: \"line\"\n        }\n    ],\n    regenerateFigures: function(params) {\n        return params.map(function(p, i) {\n            return {\n                key: \"bias\".concat(i + 1),\n                title: \"BIAS\".concat(p, \": \"),\n                type: \"line\"\n            };\n        });\n    },\n    calc: function(dataList, indicator) {\n        var params = indicator.calcParams, figures = indicator.figures;\n        var closeSums = [];\n        return dataList.map(function(kLineData, i) {\n            var bias = {};\n            var close = kLineData.close;\n            params.forEach(function(p, index) {\n                var _a;\n                closeSums[index] = ((_a = closeSums[index]) !== null && _a !== void 0 ? _a : 0) + close;\n                if (i >= p - 1) {\n                    var mean = closeSums[index] / params[index];\n                    bias[figures[index].key] = (close - mean) / mean * 100;\n                    closeSums[index] -= dataList[i - (p - 1)].close;\n                }\n            });\n            return bias;\n        });\n    }\n};\n/**\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n\n * http://www.apache.org/licenses/LICENSE-2.0\n\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ /**\n * 计算布林指标中的标准差\n * @param dataList\n * @param ma\n * @return {number}\n */ function getBollMd(dataList, ma) {\n    var dataSize = dataList.length;\n    var sum = 0;\n    dataList.forEach(function(data) {\n        var closeMa = data.close - ma;\n        sum += closeMa * closeMa;\n    });\n    sum = Math.abs(sum);\n    return Math.sqrt(sum / dataSize);\n}\n/**\n * BOLL\n */ var bollingerBands = {\n    name: \"BOLL\",\n    shortName: \"BOLL\",\n    series: IndicatorSeries.Price,\n    calcParams: [\n        20,\n        2\n    ],\n    precision: 2,\n    shouldOhlc: true,\n    figures: [\n        {\n            key: \"up\",\n            title: \"UP: \",\n            type: \"line\"\n        },\n        {\n            key: \"mid\",\n            title: \"MID: \",\n            type: \"line\"\n        },\n        {\n            key: \"dn\",\n            title: \"DN: \",\n            type: \"line\"\n        }\n    ],\n    calc: function(dataList, indicator) {\n        var params = indicator.calcParams;\n        var p = params[0] - 1;\n        var closeSum = 0;\n        return dataList.map(function(kLineData, i) {\n            var close = kLineData.close;\n            var boll = {};\n            closeSum += close;\n            if (i >= p) {\n                boll.mid = closeSum / params[0];\n                var md = getBollMd(dataList.slice(i - p, i + 1), boll.mid);\n                boll.up = boll.mid + params[1] * md;\n                boll.dn = boll.mid - params[1] * md;\n                closeSum -= dataList[i - p].close;\n            }\n            return boll;\n        });\n    }\n};\n/**\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n\n * http://www.apache.org/licenses/LICENSE-2.0\n\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ /**\n * BRAR\n * 默认参数是26。\n * 公式N日BR=N日内（H－CY）之和除以N日内（CY－L）之和*100，\n * 其中，H为当日最高价，L为当日最低价，CY为前一交易日的收盘价，N为设定的时间参数。\n * N日AR=(N日内（H－O）之和除以N日内（O－L）之和)*100，\n * 其中，H为当日最高价，L为当日最低价，O为当日开盘价，N为设定的时间参数\n *\n */ var brar = {\n    name: \"BRAR\",\n    shortName: \"BRAR\",\n    calcParams: [\n        26\n    ],\n    figures: [\n        {\n            key: \"br\",\n            title: \"BR: \",\n            type: \"line\"\n        },\n        {\n            key: \"ar\",\n            title: \"AR: \",\n            type: \"line\"\n        }\n    ],\n    calc: function(dataList, indicator) {\n        var params = indicator.calcParams;\n        var hcy = 0;\n        var cyl = 0;\n        var ho = 0;\n        var ol = 0;\n        return dataList.map(function(kLineData, i) {\n            var _a, _b;\n            var brar = {};\n            var high = kLineData.high;\n            var low = kLineData.low;\n            var open = kLineData.open;\n            var prevClose = ((_a = dataList[i - 1]) !== null && _a !== void 0 ? _a : kLineData).close;\n            ho += high - open;\n            ol += open - low;\n            hcy += high - prevClose;\n            cyl += prevClose - low;\n            if (i >= params[0] - 1) {\n                if (ol !== 0) {\n                    brar.ar = ho / ol * 100;\n                } else {\n                    brar.ar = 0;\n                }\n                if (cyl !== 0) {\n                    brar.br = hcy / cyl * 100;\n                } else {\n                    brar.br = 0;\n                }\n                var agoKLineData = dataList[i - (params[0] - 1)];\n                var agoHigh = agoKLineData.high;\n                var agoLow = agoKLineData.low;\n                var agoOpen = agoKLineData.open;\n                var agoPreClose = ((_b = dataList[i - params[0]]) !== null && _b !== void 0 ? _b : dataList[i - (params[0] - 1)]).close;\n                hcy -= agoHigh - agoPreClose;\n                cyl -= agoPreClose - agoLow;\n                ho -= agoHigh - agoOpen;\n                ol -= agoOpen - agoLow;\n            }\n            return brar;\n        });\n    }\n};\n/**\n * 多空指标\n * 公式: BBI = (MA(CLOSE, M) + MA(CLOSE, N) + MA(CLOSE, O) + MA(CLOSE, P)) / 4\n *\n */ var bullAndBearIndex = {\n    name: \"BBI\",\n    shortName: \"BBI\",\n    series: IndicatorSeries.Price,\n    precision: 2,\n    calcParams: [\n        3,\n        6,\n        12,\n        24\n    ],\n    shouldOhlc: true,\n    figures: [\n        {\n            key: \"bbi\",\n            title: \"BBI: \",\n            type: \"line\"\n        }\n    ],\n    calc: function(dataList, indicator) {\n        var params = indicator.calcParams;\n        var maxPeriod = Math.max.apply(Math, __spreadArray([], __read(params), false));\n        var closeSums = [];\n        var mas = [];\n        return dataList.map(function(kLineData, i) {\n            var bbi = {};\n            var close = kLineData.close;\n            params.forEach(function(p, index) {\n                var _a;\n                closeSums[index] = ((_a = closeSums[index]) !== null && _a !== void 0 ? _a : 0) + close;\n                if (i >= p - 1) {\n                    mas[index] = closeSums[index] / p;\n                    closeSums[index] -= dataList[i - (p - 1)].close;\n                }\n            });\n            if (i >= maxPeriod - 1) {\n                var maSum_1 = 0;\n                mas.forEach(function(ma) {\n                    maSum_1 += ma;\n                });\n                bbi.bbi = maSum_1 / 4;\n            }\n            return bbi;\n        });\n    }\n};\n/**\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n\n * http://www.apache.org/licenses/LICENSE-2.0\n\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ /**\n * CCI\n * CCI（N日）=（TP－MA）÷MD÷0.015\n * 其中，TP=（最高价+最低价+收盘价）÷3\n * MA=近N日TP价的累计之和÷N\n * MD=近N日TP - 当前MA绝对值的累计之和÷N\n *\n */ var commodityChannelIndex = {\n    name: \"CCI\",\n    shortName: \"CCI\",\n    calcParams: [\n        20\n    ],\n    figures: [\n        {\n            key: \"cci\",\n            title: \"CCI: \",\n            type: \"line\"\n        }\n    ],\n    calc: function(dataList, indicator) {\n        var params = indicator.calcParams;\n        var p = params[0] - 1;\n        var tpSum = 0;\n        var tpList = [];\n        return dataList.map(function(kLineData, i) {\n            var cci = {};\n            var tp = (kLineData.high + kLineData.low + kLineData.close) / 3;\n            tpSum += tp;\n            tpList.push(tp);\n            if (i >= p) {\n                var maTp_1 = tpSum / params[0];\n                var sliceTpList = tpList.slice(i - p, i + 1);\n                var sum_1 = 0;\n                sliceTpList.forEach(function(tp) {\n                    sum_1 += Math.abs(tp - maTp_1);\n                });\n                var md = sum_1 / params[0];\n                cci.cci = md !== 0 ? (tp - maTp_1) / md / 0.015 : 0;\n                var agoTp = (dataList[i - p].high + dataList[i - p].low + dataList[i - p].close) / 3;\n                tpSum -= agoTp;\n            }\n            return cci;\n        });\n    }\n};\n/**\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n\n * http:*www.apache.org/licenses/LICENSE-2.0\n\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ /**\n * MID:=REF(HIGH+LOW,1)/2;\n * CR:SUM(MAX(0,HIGH-MID),N)/SUM(MAX(0,MID-LOW),N)*100;\n * MA1:REF(MA(CR,M1),M1/2.5+1);\n * MA2:REF(MA(CR,M2),M2/2.5+1);\n * MA3:REF(MA(CR,M3),M3/2.5+1);\n * MA4:REF(MA(CR,M4),M4/2.5+1);\n * MID赋值:(昨日最高价+昨日最低价)/2\n * 输出带状能量线:0和最高价-MID的较大值的N日累和/0和MID-最低价的较大值的N日累和*100\n * 输出MA1:M1(5)/2.5+1日前的CR的M1(5)日简单移动平均\n * 输出MA2:M2(10)/2.5+1日前的CR的M2(10)日简单移动平均\n * 输出MA3:M3(20)/2.5+1日前的CR的M3(20)日简单移动平均\n * 输出MA4:M4/2.5+1日前的CR的M4日简单移动平均\n *\n */ var currentRatio = {\n    name: \"CR\",\n    shortName: \"CR\",\n    calcParams: [\n        26,\n        10,\n        20,\n        40,\n        60\n    ],\n    figures: [\n        {\n            key: \"cr\",\n            title: \"CR: \",\n            type: \"line\"\n        },\n        {\n            key: \"ma1\",\n            title: \"MA1: \",\n            type: \"line\"\n        },\n        {\n            key: \"ma2\",\n            title: \"MA2: \",\n            type: \"line\"\n        },\n        {\n            key: \"ma3\",\n            title: \"MA3: \",\n            type: \"line\"\n        },\n        {\n            key: \"ma4\",\n            title: \"MA4: \",\n            type: \"line\"\n        }\n    ],\n    calc: function(dataList, indicator) {\n        var params = indicator.calcParams;\n        var ma1ForwardPeriod = Math.ceil(params[1] / 2.5 + 1);\n        var ma2ForwardPeriod = Math.ceil(params[2] / 2.5 + 1);\n        var ma3ForwardPeriod = Math.ceil(params[3] / 2.5 + 1);\n        var ma4ForwardPeriod = Math.ceil(params[4] / 2.5 + 1);\n        var ma1Sum = 0;\n        var ma1List = [];\n        var ma2Sum = 0;\n        var ma2List = [];\n        var ma3Sum = 0;\n        var ma3List = [];\n        var ma4Sum = 0;\n        var ma4List = [];\n        var result = [];\n        dataList.forEach(function(kLineData, i) {\n            var _a, _b, _c, _d, _e;\n            var cr = {};\n            var prevData = (_a = dataList[i - 1]) !== null && _a !== void 0 ? _a : kLineData;\n            var prevMid = (prevData.high + prevData.close + prevData.low + prevData.open) / 4;\n            var highSubPreMid = Math.max(0, kLineData.high - prevMid);\n            var preMidSubLow = Math.max(0, prevMid - kLineData.low);\n            if (i >= params[0] - 1) {\n                if (preMidSubLow !== 0) {\n                    cr.cr = highSubPreMid / preMidSubLow * 100;\n                } else {\n                    cr.cr = 0;\n                }\n                ma1Sum += cr.cr;\n                ma2Sum += cr.cr;\n                ma3Sum += cr.cr;\n                ma4Sum += cr.cr;\n                if (i >= params[0] + params[1] - 2) {\n                    ma1List.push(ma1Sum / params[1]);\n                    if (i >= params[0] + params[1] + ma1ForwardPeriod - 3) {\n                        cr.ma1 = ma1List[ma1List.length - 1 - ma1ForwardPeriod];\n                    }\n                    ma1Sum -= (_b = result[i - (params[1] - 1)].cr) !== null && _b !== void 0 ? _b : 0;\n                }\n                if (i >= params[0] + params[2] - 2) {\n                    ma2List.push(ma2Sum / params[2]);\n                    if (i >= params[0] + params[2] + ma2ForwardPeriod - 3) {\n                        cr.ma2 = ma2List[ma2List.length - 1 - ma2ForwardPeriod];\n                    }\n                    ma2Sum -= (_c = result[i - (params[2] - 1)].cr) !== null && _c !== void 0 ? _c : 0;\n                }\n                if (i >= params[0] + params[3] - 2) {\n                    ma3List.push(ma3Sum / params[3]);\n                    if (i >= params[0] + params[3] + ma3ForwardPeriod - 3) {\n                        cr.ma3 = ma3List[ma3List.length - 1 - ma3ForwardPeriod];\n                    }\n                    ma3Sum -= (_d = result[i - (params[3] - 1)].cr) !== null && _d !== void 0 ? _d : 0;\n                }\n                if (i >= params[0] + params[4] - 2) {\n                    ma4List.push(ma4Sum / params[4]);\n                    if (i >= params[0] + params[4] + ma4ForwardPeriod - 3) {\n                        cr.ma4 = ma4List[ma4List.length - 1 - ma4ForwardPeriod];\n                    }\n                    ma4Sum -= (_e = result[i - (params[4] - 1)].cr) !== null && _e !== void 0 ? _e : 0;\n                }\n            }\n            result.push(cr);\n        });\n        return result;\n    }\n};\n/**\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n\n * http://www.apache.org/licenses/LICENSE-2.0\n\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ /**\n * DMA\n * 公式：DIF:MA(CLOSE,N1)-MA(CLOSE,N2);DIFMA:MA(DIF,M)\n */ var differentOfMovingAverage = {\n    name: \"DMA\",\n    shortName: \"DMA\",\n    calcParams: [\n        10,\n        50,\n        10\n    ],\n    figures: [\n        {\n            key: \"dma\",\n            title: \"DMA: \",\n            type: \"line\"\n        },\n        {\n            key: \"ama\",\n            title: \"AMA: \",\n            type: \"line\"\n        }\n    ],\n    calc: function(dataList, indicator) {\n        var params = indicator.calcParams;\n        var maxPeriod = Math.max(params[0], params[1]);\n        var closeSum1 = 0;\n        var closeSum2 = 0;\n        var dmaSum = 0;\n        var result = [];\n        dataList.forEach(function(kLineData, i) {\n            var _a;\n            var dma = {};\n            var close = kLineData.close;\n            closeSum1 += close;\n            closeSum2 += close;\n            var ma1 = 0;\n            var ma2 = 0;\n            if (i >= params[0] - 1) {\n                ma1 = closeSum1 / params[0];\n                closeSum1 -= dataList[i - (params[0] - 1)].close;\n            }\n            if (i >= params[1] - 1) {\n                ma2 = closeSum2 / params[1];\n                closeSum2 -= dataList[i - (params[1] - 1)].close;\n            }\n            if (i >= maxPeriod - 1) {\n                var dif = ma1 - ma2;\n                dma.dma = dif;\n                dmaSum += dif;\n                if (i >= maxPeriod + params[2] - 2) {\n                    dma.ama = dmaSum / params[2];\n                    dmaSum -= (_a = result[i - (params[2] - 1)].dma) !== null && _a !== void 0 ? _a : 0;\n                }\n            }\n            result.push(dma);\n        });\n        return result;\n    }\n};\n/**\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n\n * http://www.apache.org/licenses/LICENSE-2.0\n\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ /**\n * DMI\n *\n * MTR:=EXPMEMA(MAX(MAX(HIGH-LOW,ABS(HIGH-REF(CLOSE,1))),ABS(REF(CLOSE,1)-LOW)),N)\n * HD :=HIGH-REF(HIGH,1);\n * LD :=REF(LOW,1)-LOW;\n * DMP:=EXPMEMA(IF(HD>0&&HD>LD,HD,0),N);\n * DMM:=EXPMEMA(IF(LD>0&&LD>HD,LD,0),N);\n *\n * PDI: DMP*100/MTR;\n * MDI: DMM*100/MTR;\n * ADX: EXPMEMA(ABS(MDI-PDI)/(MDI+PDI)*100,MM);\n * ADXR:EXPMEMA(ADX,MM);\n * 公式含义：\n * MTR赋值:最高价-最低价和最高价-昨收的绝对值的较大值和昨收-最低价的绝对值的较大值的N日指数平滑移动平均\n * HD赋值:最高价-昨日最高价\n * LD赋值:昨日最低价-最低价\n * DMP赋值:如果HD>0并且HD>LD,返回HD,否则返回0的N日指数平滑移动平均\n * DMM赋值:如果LD>0并且LD>HD,返回LD,否则返回0的N日指数平滑移动平均\n * 输出PDI:DMP*100/MTR\n * 输出MDI:DMM*100/MTR\n * 输出ADX:MDI-PDI的绝对值/(MDI+PDI)*100的MM日指数平滑移动平均\n * 输出ADXR:ADX的MM日指数平滑移动平均\n *\n */ var directionalMovementIndex = {\n    name: \"DMI\",\n    shortName: \"DMI\",\n    calcParams: [\n        14,\n        6\n    ],\n    figures: [\n        {\n            key: \"pdi\",\n            title: \"PDI: \",\n            type: \"line\"\n        },\n        {\n            key: \"mdi\",\n            title: \"MDI: \",\n            type: \"line\"\n        },\n        {\n            key: \"adx\",\n            title: \"ADX: \",\n            type: \"line\"\n        },\n        {\n            key: \"adxr\",\n            title: \"ADXR: \",\n            type: \"line\"\n        }\n    ],\n    calc: function(dataList, indicator) {\n        var params = indicator.calcParams;\n        var trSum = 0;\n        var hSum = 0;\n        var lSum = 0;\n        var mtr = 0;\n        var dmp = 0;\n        var dmm = 0;\n        var dxSum = 0;\n        var adx = 0;\n        var result = [];\n        dataList.forEach(function(kLineData, i) {\n            var _a, _b;\n            var dmi = {};\n            var prevKLineData = (_a = dataList[i - 1]) !== null && _a !== void 0 ? _a : kLineData;\n            var preClose = prevKLineData.close;\n            var high = kLineData.high;\n            var low = kLineData.low;\n            var hl = high - low;\n            var hcy = Math.abs(high - preClose);\n            var lcy = Math.abs(preClose - low);\n            var hhy = high - prevKLineData.high;\n            var lyl = prevKLineData.low - low;\n            var tr = Math.max(Math.max(hl, hcy), lcy);\n            var h = hhy > 0 && hhy > lyl ? hhy : 0;\n            var l = lyl > 0 && lyl > hhy ? lyl : 0;\n            trSum += tr;\n            hSum += h;\n            lSum += l;\n            if (i >= params[0] - 1) {\n                if (i > params[0] - 1) {\n                    mtr = mtr - mtr / params[0] + tr;\n                    dmp = dmp - dmp / params[0] + h;\n                    dmm = dmm - dmm / params[0] + l;\n                } else {\n                    mtr = trSum;\n                    dmp = hSum;\n                    dmm = lSum;\n                }\n                var pdi = 0;\n                var mdi = 0;\n                if (mtr !== 0) {\n                    pdi = dmp * 100 / mtr;\n                    mdi = dmm * 100 / mtr;\n                }\n                dmi.pdi = pdi;\n                dmi.mdi = mdi;\n                var dx = 0;\n                if (mdi + pdi !== 0) {\n                    dx = Math.abs(mdi - pdi) / (mdi + pdi) * 100;\n                }\n                dxSum += dx;\n                if (i >= params[0] * 2 - 2) {\n                    if (i > params[0] * 2 - 2) {\n                        adx = (adx * (params[0] - 1) + dx) / params[0];\n                    } else {\n                        adx = dxSum / params[0];\n                    }\n                    dmi.adx = adx;\n                    if (i >= params[0] * 2 + params[1] - 3) {\n                        dmi.adxr = (((_b = result[i - (params[1] - 1)].adx) !== null && _b !== void 0 ? _b : 0) + adx) / 2;\n                    }\n                }\n            }\n            result.push(dmi);\n        });\n        return result;\n    }\n};\n/**\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n\n * http://www.apache.org/licenses/LICENSE-2.0\n\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ /**\n *\n * EMV 简易波动指标\n * 公式：\n * A=（今日最高+今日最低）/2\n * B=（前日最高+前日最低）/2\n * C=今日最高-今日最低\n * EM=（A-B）*C/今日成交额\n * EMV=N日内EM的累和\n * MAEMV=EMV的M日的简单移动平均\n *\n */ var easeOfMovementValue = {\n    name: \"EMV\",\n    shortName: \"EMV\",\n    calcParams: [\n        14,\n        9\n    ],\n    figures: [\n        {\n            key: \"emv\",\n            title: \"EMV: \",\n            type: \"line\"\n        },\n        {\n            key: \"maEmv\",\n            title: \"MAEMV: \",\n            type: \"line\"\n        }\n    ],\n    calc: function(dataList, indicator) {\n        var params = indicator.calcParams;\n        var emvValueSum = 0;\n        var emvValueList = [];\n        return dataList.map(function(kLineData, i) {\n            var _a;\n            var emv = {};\n            if (i > 0) {\n                var prevKLineData = dataList[i - 1];\n                var high = kLineData.high;\n                var low = kLineData.low;\n                var volume = (_a = kLineData.volume) !== null && _a !== void 0 ? _a : 0;\n                var distanceMoved = (high + low) / 2 - (prevKLineData.high + prevKLineData.low) / 2;\n                if (volume === 0 || high - low === 0) {\n                    emv.emv = 0;\n                } else {\n                    var ratio = volume / 100000000 / (high - low);\n                    emv.emv = distanceMoved / ratio;\n                }\n                emvValueSum += emv.emv;\n                emvValueList.push(emv.emv);\n                if (i >= params[0]) {\n                    emv.maEmv = emvValueSum / params[0];\n                    emvValueSum -= emvValueList[i - params[0]];\n                }\n            }\n            return emv;\n        });\n    }\n};\n/**\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n\n * http://www.apache.org/licenses/LICENSE-2.0\n\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ /**\n * EMA 指数移动平均\n */ var exponentialMovingAverage = {\n    name: \"EMA\",\n    shortName: \"EMA\",\n    series: IndicatorSeries.Price,\n    calcParams: [\n        6,\n        12,\n        20\n    ],\n    precision: 2,\n    shouldOhlc: true,\n    figures: [\n        {\n            key: \"ema1\",\n            title: \"EMA6: \",\n            type: \"line\"\n        },\n        {\n            key: \"ema2\",\n            title: \"EMA12: \",\n            type: \"line\"\n        },\n        {\n            key: \"ema3\",\n            title: \"EMA20: \",\n            type: \"line\"\n        }\n    ],\n    regenerateFigures: function(params) {\n        return params.map(function(p, i) {\n            return {\n                key: \"ema\".concat(i + 1),\n                title: \"EMA\".concat(p, \": \"),\n                type: \"line\"\n            };\n        });\n    },\n    calc: function(dataList, indicator) {\n        var params = indicator.calcParams, figures = indicator.figures;\n        var closeSum = 0;\n        var emaValues = [];\n        return dataList.map(function(kLineData, i) {\n            var ema = {};\n            var close = kLineData.close;\n            closeSum += close;\n            params.forEach(function(p, index) {\n                if (i >= p - 1) {\n                    if (i > p - 1) {\n                        emaValues[index] = (2 * close + (p - 1) * emaValues[index]) / (p + 1);\n                    } else {\n                        emaValues[index] = closeSum / p;\n                    }\n                    ema[figures[index].key] = emaValues[index];\n                }\n            });\n            return ema;\n        });\n    }\n};\n/**\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n\n * http://www.apache.org/licenses/LICENSE-2.0\n\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ /**\n * mtm\n * 公式 MTM（N日）=C－CN\n */ var momentum = {\n    name: \"MTM\",\n    shortName: \"MTM\",\n    calcParams: [\n        12,\n        6\n    ],\n    figures: [\n        {\n            key: \"mtm\",\n            title: \"MTM: \",\n            type: \"line\"\n        },\n        {\n            key: \"maMtm\",\n            title: \"MAMTM: \",\n            type: \"line\"\n        }\n    ],\n    calc: function(dataList, indicator) {\n        var params = indicator.calcParams;\n        var mtmSum = 0;\n        var result = [];\n        dataList.forEach(function(kLineData, i) {\n            var _a;\n            var mtm = {};\n            if (i >= params[0]) {\n                var close_1 = kLineData.close;\n                var agoClose = dataList[i - params[0]].close;\n                mtm.mtm = close_1 - agoClose;\n                mtmSum += mtm.mtm;\n                if (i >= params[0] + params[1] - 1) {\n                    mtm.maMtm = mtmSum / params[1];\n                    mtmSum -= (_a = result[i - (params[1] - 1)].mtm) !== null && _a !== void 0 ? _a : 0;\n                }\n            }\n            result.push(mtm);\n        });\n        return result;\n    }\n};\n/**\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n\n * http://www.apache.org/licenses/LICENSE-2.0\n\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ /**\n * MA 移动平均\n */ var movingAverage = {\n    name: \"MA\",\n    shortName: \"MA\",\n    series: IndicatorSeries.Price,\n    calcParams: [\n        5,\n        10,\n        30,\n        60\n    ],\n    precision: 2,\n    shouldOhlc: true,\n    figures: [\n        {\n            key: \"ma1\",\n            title: \"MA5: \",\n            type: \"line\"\n        },\n        {\n            key: \"ma2\",\n            title: \"MA10: \",\n            type: \"line\"\n        },\n        {\n            key: \"ma3\",\n            title: \"MA30: \",\n            type: \"line\"\n        },\n        {\n            key: \"ma4\",\n            title: \"MA60: \",\n            type: \"line\"\n        }\n    ],\n    regenerateFigures: function(params) {\n        return params.map(function(p, i) {\n            return {\n                key: \"ma\".concat(i + 1),\n                title: \"MA\".concat(p, \": \"),\n                type: \"line\"\n            };\n        });\n    },\n    calc: function(dataList, indicator) {\n        var params = indicator.calcParams, figures = indicator.figures;\n        var closeSums = [];\n        return dataList.map(function(kLineData, i) {\n            var ma = {};\n            var close = kLineData.close;\n            params.forEach(function(p, index) {\n                var _a;\n                closeSums[index] = ((_a = closeSums[index]) !== null && _a !== void 0 ? _a : 0) + close;\n                if (i >= p - 1) {\n                    ma[figures[index].key] = closeSums[index] / p;\n                    closeSums[index] -= dataList[i - (p - 1)].close;\n                }\n            });\n            return ma;\n        });\n    }\n};\n/**\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n\n * http://www.apache.org/licenses/LICENSE-2.0\n\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ /**\n * MACD：参数快线移动平均、慢线移动平均、移动平均，\n * 默认参数值12、26、9。\n * 公式：⒈首先分别计算出收盘价12日指数平滑移动平均线与26日指数平滑移动平均线，分别记为EMA(12）与EMA(26）。\n * ⒉求这两条指数平滑移动平均线的差，即：DIFF = EMA(SHORT) － EMA(LONG)。\n * ⒊再计算DIFF的M日的平均的指数平滑移动平均线，记为DEA。\n * ⒋最后用DIFF减DEA，得MACD。MACD通常绘制成围绕零轴线波动的柱形图。MACD柱状大于0涨颜色，小于0跌颜色。\n */ var movingAverageConvergenceDivergence = {\n    name: \"MACD\",\n    shortName: \"MACD\",\n    calcParams: [\n        12,\n        26,\n        9\n    ],\n    figures: [\n        {\n            key: \"dif\",\n            title: \"DIF: \",\n            type: \"line\"\n        },\n        {\n            key: \"dea\",\n            title: \"DEA: \",\n            type: \"line\"\n        },\n        {\n            key: \"macd\",\n            title: \"MACD: \",\n            type: \"bar\",\n            baseValue: 0,\n            styles: function(_a) {\n                var _b, _c;\n                var data = _a.data, indicator = _a.indicator, defaultStyles = _a.defaultStyles;\n                var prev = data.prev, current = data.current;\n                var prevMacd = (_b = prev === null || prev === void 0 ? void 0 : prev.macd) !== null && _b !== void 0 ? _b : Number.MIN_SAFE_INTEGER;\n                var currentMacd = (_c = current === null || current === void 0 ? void 0 : current.macd) !== null && _c !== void 0 ? _c : Number.MIN_SAFE_INTEGER;\n                var color = \"\";\n                if (currentMacd > 0) {\n                    color = formatValue(indicator.styles, \"bars[0].upColor\", defaultStyles.bars[0].upColor);\n                } else if (currentMacd < 0) {\n                    color = formatValue(indicator.styles, \"bars[0].downColor\", defaultStyles.bars[0].downColor);\n                } else {\n                    color = formatValue(indicator.styles, \"bars[0].noChangeColor\", defaultStyles.bars[0].noChangeColor);\n                }\n                var style = prevMacd < currentMacd ? PolygonType.Stroke : PolygonType.Fill;\n                return {\n                    style: style,\n                    color: color,\n                    borderColor: color\n                };\n            }\n        }\n    ],\n    calc: function(dataList, indicator) {\n        var params = indicator.calcParams;\n        var closeSum = 0;\n        var emaShort = 0;\n        var emaLong = 0;\n        var dif = 0;\n        var difSum = 0;\n        var dea = 0;\n        var maxPeriod = Math.max(params[0], params[1]);\n        return dataList.map(function(kLineData, i) {\n            var macd = {};\n            var close = kLineData.close;\n            closeSum += close;\n            if (i >= params[0] - 1) {\n                if (i > params[0] - 1) {\n                    emaShort = (2 * close + (params[0] - 1) * emaShort) / (params[0] + 1);\n                } else {\n                    emaShort = closeSum / params[0];\n                }\n            }\n            if (i >= params[1] - 1) {\n                if (i > params[1] - 1) {\n                    emaLong = (2 * close + (params[1] - 1) * emaLong) / (params[1] + 1);\n                } else {\n                    emaLong = closeSum / params[1];\n                }\n            }\n            if (i >= maxPeriod - 1) {\n                dif = emaShort - emaLong;\n                macd.dif = dif;\n                difSum += dif;\n                if (i >= maxPeriod + params[2] - 2) {\n                    if (i > maxPeriod + params[2] - 2) {\n                        dea = (dif * 2 + dea * (params[2] - 1)) / (params[2] + 1);\n                    } else {\n                        dea = difSum / params[2];\n                    }\n                    macd.macd = (dif - dea) * 2;\n                    macd.dea = dea;\n                }\n            }\n            return macd;\n        });\n    }\n};\n/**\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n\n * http://www.apache.org/licenses/LICENSE-2.0\n\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ /**\n * OBV\n * OBV = REF(OBV) + sign * V\n */ var onBalanceVolume = {\n    name: \"OBV\",\n    shortName: \"OBV\",\n    calcParams: [\n        30\n    ],\n    figures: [\n        {\n            key: \"obv\",\n            title: \"OBV: \",\n            type: \"line\"\n        },\n        {\n            key: \"maObv\",\n            title: \"MAOBV: \",\n            type: \"line\"\n        }\n    ],\n    calc: function(dataList, indicator) {\n        var params = indicator.calcParams;\n        var obvSum = 0;\n        var oldObv = 0;\n        var result = [];\n        dataList.forEach(function(kLineData, i) {\n            var _a, _b, _c, _d;\n            var prevKLineData = (_a = dataList[i - 1]) !== null && _a !== void 0 ? _a : kLineData;\n            if (kLineData.close < prevKLineData.close) {\n                oldObv -= (_b = kLineData.volume) !== null && _b !== void 0 ? _b : 0;\n            } else if (kLineData.close > prevKLineData.close) {\n                oldObv += (_c = kLineData.volume) !== null && _c !== void 0 ? _c : 0;\n            }\n            var obv = {\n                obv: oldObv\n            };\n            obvSum += oldObv;\n            if (i >= params[0] - 1) {\n                obv.maObv = obvSum / params[0];\n                obvSum -= (_d = result[i - (params[0] - 1)].obv) !== null && _d !== void 0 ? _d : 0;\n            }\n            result.push(obv);\n        });\n        return result;\n    }\n};\n/**\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n\n * http://www.apache.org/licenses/LICENSE-2.0\n\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ /**\n * 价量趋势指标\n * 公式:\n * X = (CLOSE - REF(CLOSE, 1)) / REF(CLOSE, 1) * VOLUME\n * PVT = SUM(X)\n *\n */ var priceAndVolumeTrend = {\n    name: \"PVT\",\n    shortName: \"PVT\",\n    figures: [\n        {\n            key: \"pvt\",\n            title: \"PVT: \",\n            type: \"line\"\n        }\n    ],\n    calc: function(dataList) {\n        var sum = 0;\n        return dataList.map(function(kLineData, i) {\n            var _a, _b;\n            var pvt = {};\n            var close = kLineData.close;\n            var volume = (_a = kLineData.volume) !== null && _a !== void 0 ? _a : 1;\n            var prevClose = ((_b = dataList[i - 1]) !== null && _b !== void 0 ? _b : kLineData).close;\n            var x = 0;\n            var total = prevClose * volume;\n            if (total !== 0) {\n                x = (close - prevClose) / total;\n            }\n            sum += x;\n            pvt.pvt = sum;\n            return pvt;\n        });\n    }\n};\n/**\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n\n * http://www.apache.org/licenses/LICENSE-2.0\n\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ /**\n * PSY\n * 公式：PSY=N日内的上涨天数/N×100%。\n */ var psychologicalLine = {\n    name: \"PSY\",\n    shortName: \"PSY\",\n    calcParams: [\n        12,\n        6\n    ],\n    figures: [\n        {\n            key: \"psy\",\n            title: \"PSY: \",\n            type: \"line\"\n        },\n        {\n            key: \"maPsy\",\n            title: \"MAPSY: \",\n            type: \"line\"\n        }\n    ],\n    calc: function(dataList, indicator) {\n        var params = indicator.calcParams;\n        var upCount = 0;\n        var psySum = 0;\n        var upList = [];\n        var result = [];\n        dataList.forEach(function(kLineData, i) {\n            var _a, _b;\n            var psy = {};\n            var prevClose = ((_a = dataList[i - 1]) !== null && _a !== void 0 ? _a : kLineData).close;\n            var upFlag = kLineData.close - prevClose > 0 ? 1 : 0;\n            upList.push(upFlag);\n            upCount += upFlag;\n            if (i >= params[0] - 1) {\n                psy.psy = upCount / params[0] * 100;\n                psySum += psy.psy;\n                if (i >= params[0] + params[1] - 2) {\n                    psy.maPsy = psySum / params[1];\n                    psySum -= (_b = result[i - (params[1] - 1)].psy) !== null && _b !== void 0 ? _b : 0;\n                }\n                upCount -= upList[i - (params[0] - 1)];\n            }\n            result.push(psy);\n        });\n        return result;\n    }\n};\n/**\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n\n * http://www.apache.org/licenses/LICENSE-2.0\n\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ /**\n * 变动率指标\n * 公式：ROC = (CLOSE - REF(CLOSE, N)) / REF(CLOSE, N)\n */ var rateOfChange = {\n    name: \"ROC\",\n    shortName: \"ROC\",\n    calcParams: [\n        12,\n        6\n    ],\n    figures: [\n        {\n            key: \"roc\",\n            title: \"ROC: \",\n            type: \"line\"\n        },\n        {\n            key: \"maRoc\",\n            title: \"MAROC: \",\n            type: \"line\"\n        }\n    ],\n    calc: function(dataList, indicator) {\n        var params = indicator.calcParams;\n        var result = [];\n        var rocSum = 0;\n        dataList.forEach(function(kLineData, i) {\n            var _a, _b;\n            var roc = {};\n            if (i >= params[0] - 1) {\n                var close_1 = kLineData.close;\n                var agoClose = ((_a = dataList[i - params[0]]) !== null && _a !== void 0 ? _a : dataList[i - (params[0] - 1)]).close;\n                if (agoClose !== 0) {\n                    roc.roc = (close_1 - agoClose) / agoClose * 100;\n                } else {\n                    roc.roc = 0;\n                }\n                rocSum += roc.roc;\n                if (i >= params[0] - 1 + params[1] - 1) {\n                    roc.maRoc = rocSum / params[1];\n                    rocSum -= (_b = result[i - (params[1] - 1)].roc) !== null && _b !== void 0 ? _b : 0;\n                }\n            }\n            result.push(roc);\n        });\n        return result;\n    }\n};\n/**\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n\n * http://www.apache.org/licenses/LICENSE-2.0\n\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ /**\n * RSI\n * RSI = SUM(MAX(CLOSE - REF(CLOSE,1),0),N) / SUM(ABS(CLOSE - REF(CLOSE,1)),N) × 100\n */ var relativeStrengthIndex = {\n    name: \"RSI\",\n    shortName: \"RSI\",\n    calcParams: [\n        6,\n        12,\n        24\n    ],\n    figures: [\n        {\n            key: \"rsi1\",\n            title: \"RSI1: \",\n            type: \"line\"\n        },\n        {\n            key: \"rsi2\",\n            title: \"RSI2: \",\n            type: \"line\"\n        },\n        {\n            key: \"rsi3\",\n            title: \"RSI3: \",\n            type: \"line\"\n        }\n    ],\n    regenerateFigures: function(params) {\n        return params.map(function(_, index) {\n            var num = index + 1;\n            return {\n                key: \"rsi\".concat(num),\n                title: \"RSI\".concat(num, \": \"),\n                type: \"line\"\n            };\n        });\n    },\n    calc: function(dataList, indicator) {\n        var params = indicator.calcParams, figures = indicator.figures;\n        var sumCloseAs = [];\n        var sumCloseBs = [];\n        return dataList.map(function(kLineData, i) {\n            var _a;\n            var rsi = {};\n            var prevClose = ((_a = dataList[i - 1]) !== null && _a !== void 0 ? _a : kLineData).close;\n            var tmp = kLineData.close - prevClose;\n            params.forEach(function(p, index) {\n                var _a, _b, _c;\n                if (tmp > 0) {\n                    sumCloseAs[index] = ((_a = sumCloseAs[index]) !== null && _a !== void 0 ? _a : 0) + tmp;\n                } else {\n                    sumCloseBs[index] = ((_b = sumCloseBs[index]) !== null && _b !== void 0 ? _b : 0) + Math.abs(tmp);\n                }\n                if (i >= p - 1) {\n                    if (sumCloseBs[index] !== 0) {\n                        rsi[figures[index].key] = 100 - 100.0 / (1 + sumCloseAs[index] / sumCloseBs[index]);\n                    } else {\n                        rsi[figures[index].key] = 0;\n                    }\n                    var agoData = dataList[i - (p - 1)];\n                    var agoPreData = (_c = dataList[i - p]) !== null && _c !== void 0 ? _c : agoData;\n                    var agoTmp = agoData.close - agoPreData.close;\n                    if (agoTmp > 0) {\n                        sumCloseAs[index] -= agoTmp;\n                    } else {\n                        sumCloseBs[index] -= Math.abs(agoTmp);\n                    }\n                }\n            });\n            return rsi;\n        });\n    }\n};\n/**\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n\n * http://www.apache.org/licenses/LICENSE-2.0\n\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ /**\n * sma\n */ var simpleMovingAverage = {\n    name: \"SMA\",\n    shortName: \"SMA\",\n    series: IndicatorSeries.Price,\n    calcParams: [\n        12,\n        2\n    ],\n    precision: 2,\n    figures: [\n        {\n            key: \"sma\",\n            title: \"SMA: \",\n            type: \"line\"\n        }\n    ],\n    shouldOhlc: true,\n    calc: function(dataList, indicator) {\n        var params = indicator.calcParams;\n        var closeSum = 0;\n        var smaValue = 0;\n        return dataList.map(function(kLineData, i) {\n            var sma = {};\n            var close = kLineData.close;\n            closeSum += close;\n            if (i >= params[0] - 1) {\n                if (i > params[0] - 1) {\n                    smaValue = (close * params[1] + smaValue * (params[0] - params[1] + 1)) / (params[0] + 1);\n                } else {\n                    smaValue = closeSum / params[0];\n                }\n                sma.sma = smaValue;\n            }\n            return sma;\n        });\n    }\n};\n/**\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n\n * http://www.apache.org/licenses/LICENSE-2.0\n\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ /**\n * KDJ\n *\n * 当日K值=2/3×前一日K值+1/3×当日RSV\n * 当日D值=2/3×前一日D值+1/3×当日K值\n * 若无前一日K 值与D值，则可分别用50来代替。\n * J值=3*当日K值-2*当日D值\n */ var stoch = {\n    name: \"KDJ\",\n    shortName: \"KDJ\",\n    calcParams: [\n        9,\n        3,\n        3\n    ],\n    figures: [\n        {\n            key: \"k\",\n            title: \"K: \",\n            type: \"line\"\n        },\n        {\n            key: \"d\",\n            title: \"D: \",\n            type: \"line\"\n        },\n        {\n            key: \"j\",\n            title: \"J: \",\n            type: \"line\"\n        }\n    ],\n    calc: function(dataList, indicator) {\n        var params = indicator.calcParams;\n        var result = [];\n        dataList.forEach(function(kLineData, i) {\n            var _a, _b, _c, _d;\n            var kdj = {};\n            var close = kLineData.close;\n            if (i >= params[0] - 1) {\n                var lhn = getMaxMin(dataList.slice(i - (params[0] - 1), i + 1), \"high\", \"low\");\n                var hn = lhn[0];\n                var ln = lhn[1];\n                var hnSubLn = hn - ln;\n                var rsv = (close - ln) / (hnSubLn === 0 ? 1 : hnSubLn) * 100;\n                kdj.k = ((params[1] - 1) * ((_b = (_a = result[i - 1]) === null || _a === void 0 ? void 0 : _a.k) !== null && _b !== void 0 ? _b : 50) + rsv) / params[1];\n                kdj.d = ((params[2] - 1) * ((_d = (_c = result[i - 1]) === null || _c === void 0 ? void 0 : _c.d) !== null && _d !== void 0 ? _d : 50) + kdj.k) / params[2];\n                kdj.j = 3.0 * kdj.k - 2.0 * kdj.d;\n            }\n            result.push(kdj);\n        });\n        return result;\n    }\n};\n/**\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n\n * http://www.apache.org/licenses/LICENSE-2.0\n\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ var stopAndReverse = {\n    name: \"SAR\",\n    shortName: \"SAR\",\n    series: IndicatorSeries.Price,\n    calcParams: [\n        2,\n        2,\n        20\n    ],\n    precision: 2,\n    shouldOhlc: true,\n    figures: [\n        {\n            key: \"sar\",\n            title: \"SAR: \",\n            type: \"circle\",\n            styles: function(_a) {\n                var _b, _c, _d;\n                var data = _a.data, indicator = _a.indicator, defaultStyles = _a.defaultStyles;\n                var current = data.current;\n                var sar = (_b = current === null || current === void 0 ? void 0 : current.sar) !== null && _b !== void 0 ? _b : Number.MIN_SAFE_INTEGER;\n                var halfHL = (((_c = current === null || current === void 0 ? void 0 : current.high) !== null && _c !== void 0 ? _c : 0) + ((_d = current === null || current === void 0 ? void 0 : current.low) !== null && _d !== void 0 ? _d : 0)) / 2;\n                var color = sar < halfHL ? formatValue(indicator.styles, \"circles[0].upColor\", defaultStyles.circles[0].upColor) : formatValue(indicator.styles, \"circles[0].downColor\", defaultStyles.circles[0].downColor);\n                return {\n                    color: color\n                };\n            }\n        }\n    ],\n    calc: function(dataList, indicator) {\n        var params = indicator.calcParams;\n        var startAf = params[0] / 100;\n        var step = params[1] / 100;\n        var maxAf = params[2] / 100;\n        // 加速因子\n        var af = startAf;\n        // 极值\n        var ep = -100;\n        // 判断是上涨还是下跌  false：下跌\n        var isIncreasing = false;\n        var sar = 0;\n        return dataList.map(function(kLineData, i) {\n            // 上一个周期的sar\n            var preSar = sar;\n            var high = kLineData.high;\n            var low = kLineData.low;\n            if (isIncreasing) {\n                // 上涨\n                if (ep === -100 || ep < high) {\n                    // 重新初始化值\n                    ep = high;\n                    af = Math.min(af + step, maxAf);\n                }\n                sar = preSar + af * (ep - preSar);\n                var lowMin = Math.min(dataList[Math.max(1, i) - 1].low, low);\n                if (sar > kLineData.low) {\n                    sar = ep;\n                    // 重新初始化值\n                    af = startAf;\n                    ep = -100;\n                    isIncreasing = !isIncreasing;\n                } else if (sar > lowMin) {\n                    sar = lowMin;\n                }\n            } else {\n                if (ep === -100 || ep > low) {\n                    // 重新初始化值\n                    ep = low;\n                    af = Math.min(af + step, maxAf);\n                }\n                sar = preSar + af * (ep - preSar);\n                var highMax = Math.max(dataList[Math.max(1, i) - 1].high, high);\n                if (sar < kLineData.high) {\n                    sar = ep;\n                    // 重新初始化值\n                    af = 0;\n                    ep = -100;\n                    isIncreasing = !isIncreasing;\n                } else if (sar < highMax) {\n                    sar = highMax;\n                }\n            }\n            return {\n                high: high,\n                low: low,\n                sar: sar\n            };\n        });\n    }\n};\n/**\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n\n * http:*www.apache.org/licenses/LICENSE-2.0\n\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ /**\n * trix\n *\n * TR=收盘价的N日指数移动平均的N日指数移动平均的N日指数移动平均；\n * TRIX=(TR-昨日TR)/昨日TR*100；\n * MATRIX=TRIX的M日简单移动平均；\n * 默认参数N设为12，默认参数M设为9；\n * 默认参数12、9\n * 公式：MTR:=EMA(EMA(EMA(CLOSE,N),N),N)\n * TRIX:(MTR-REF(MTR,1))/REF(MTR,1)*100;\n * TRMA:MA(TRIX,M)\n *\n */ var tripleExponentiallySmoothedAverage = {\n    name: \"TRIX\",\n    shortName: \"TRIX\",\n    calcParams: [\n        12,\n        9\n    ],\n    figures: [\n        {\n            key: \"trix\",\n            title: \"TRIX: \",\n            type: \"line\"\n        },\n        {\n            key: \"maTrix\",\n            title: \"MATRIX: \",\n            type: \"line\"\n        }\n    ],\n    calc: function(dataList, indicator) {\n        var params = indicator.calcParams;\n        var closeSum = 0;\n        var ema1 = 0;\n        var ema2 = 0;\n        var oldTr = 0;\n        var ema1Sum = 0;\n        var ema2Sum = 0;\n        var trixSum = 0;\n        var result = [];\n        dataList.forEach(function(kLineData, i) {\n            var _a;\n            var trix = {};\n            var close = kLineData.close;\n            closeSum += close;\n            if (i >= params[0] - 1) {\n                if (i > params[0] - 1) {\n                    ema1 = (2 * close + (params[0] - 1) * ema1) / (params[0] + 1);\n                } else {\n                    ema1 = closeSum / params[0];\n                }\n                ema1Sum += ema1;\n                if (i >= params[0] * 2 - 2) {\n                    if (i > params[0] * 2 - 2) {\n                        ema2 = (2 * ema1 + (params[0] - 1) * ema2) / (params[0] + 1);\n                    } else {\n                        ema2 = ema1Sum / params[0];\n                    }\n                    ema2Sum += ema2;\n                    if (i >= params[0] * 3 - 3) {\n                        var tr = 0;\n                        var trixValue = 0;\n                        if (i > params[0] * 3 - 3) {\n                            tr = (2 * ema2 + (params[0] - 1) * oldTr) / (params[0] + 1);\n                            trixValue = (tr - oldTr) / oldTr * 100;\n                        } else {\n                            tr = ema2Sum / params[0];\n                        }\n                        oldTr = tr;\n                        trix.trix = trixValue;\n                        trixSum += trixValue;\n                        if (i >= params[0] * 3 + params[1] - 4) {\n                            trix.maTrix = trixSum / params[1];\n                            trixSum -= (_a = result[i - (params[1] - 1)].trix) !== null && _a !== void 0 ? _a : 0;\n                        }\n                    }\n                }\n            }\n            result.push(trix);\n        });\n        return result;\n    }\n};\n/**\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n\n * http://www.apache.org/licenses/LICENSE-2.0\n\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ function getVolumeFigure() {\n    return {\n        key: \"volume\",\n        title: \"VOLUME: \",\n        type: \"bar\",\n        baseValue: 0,\n        styles: function(_a) {\n            var data = _a.data, indicator = _a.indicator, defaultStyles = _a.defaultStyles;\n            var current = data.current;\n            var color = formatValue(indicator.styles, \"bars[0].noChangeColor\", defaultStyles.bars[0].noChangeColor);\n            if (isValid(current)) {\n                if (current.close > current.open) {\n                    color = formatValue(indicator.styles, \"bars[0].upColor\", defaultStyles.bars[0].upColor);\n                } else if (current.close < current.open) {\n                    color = formatValue(indicator.styles, \"bars[0].downColor\", defaultStyles.bars[0].downColor);\n                }\n            }\n            return {\n                color: color\n            };\n        }\n    };\n}\nvar volume = {\n    name: \"VOL\",\n    shortName: \"VOL\",\n    series: IndicatorSeries.Volume,\n    calcParams: [\n        5,\n        10,\n        20\n    ],\n    shouldFormatBigNumber: true,\n    precision: 0,\n    minValue: 0,\n    figures: [\n        {\n            key: \"ma1\",\n            title: \"MA5: \",\n            type: \"line\"\n        },\n        {\n            key: \"ma2\",\n            title: \"MA10: \",\n            type: \"line\"\n        },\n        {\n            key: \"ma3\",\n            title: \"MA20: \",\n            type: \"line\"\n        },\n        getVolumeFigure()\n    ],\n    regenerateFigures: function(params) {\n        var figures = params.map(function(p, i) {\n            return {\n                key: \"ma\".concat(i + 1),\n                title: \"MA\".concat(p, \": \"),\n                type: \"line\"\n            };\n        });\n        figures.push(getVolumeFigure());\n        return figures;\n    },\n    calc: function(dataList, indicator) {\n        var params = indicator.calcParams, figures = indicator.figures;\n        var volSums = [];\n        return dataList.map(function(kLineData, i) {\n            var _a;\n            var volume = (_a = kLineData.volume) !== null && _a !== void 0 ? _a : 0;\n            var vol = {\n                volume: volume,\n                open: kLineData.open,\n                close: kLineData.close\n            };\n            params.forEach(function(p, index) {\n                var _a, _b;\n                volSums[index] = ((_a = volSums[index]) !== null && _a !== void 0 ? _a : 0) + volume;\n                if (i >= p - 1) {\n                    vol[figures[index].key] = volSums[index] / p;\n                    volSums[index] -= (_b = dataList[i - (p - 1)].volume) !== null && _b !== void 0 ? _b : 0;\n                }\n            });\n            return vol;\n        });\n    }\n};\n/**\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n\n * http://www.apache.org/licenses/LICENSE-2.0\n\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ /**\n * VR\n * VR=（UVS+1/2PVS）/（DVS+1/2PVS）\n * 24天以来凡是股价上涨那一天的成交量都称为AV，将24天内的AV总和相加后称为UVS\n * 24天以来凡是股价下跌那一天的成交量都称为BV，将24天内的BV总和相加后称为DVS\n * 24天以来凡是股价不涨不跌，则那一天的成交量都称为CV，将24天内的CV总和相加后称为PVS\n *\n */ var volumeRatio = {\n    name: \"VR\",\n    shortName: \"VR\",\n    calcParams: [\n        26,\n        6\n    ],\n    figures: [\n        {\n            key: \"vr\",\n            title: \"VR: \",\n            type: \"line\"\n        },\n        {\n            key: \"maVr\",\n            title: \"MAVR: \",\n            type: \"line\"\n        }\n    ],\n    calc: function(dataList, indicator) {\n        var params = indicator.calcParams;\n        var uvs = 0;\n        var dvs = 0;\n        var pvs = 0;\n        var vrSum = 0;\n        var result = [];\n        dataList.forEach(function(kLineData, i) {\n            var _a, _b, _c, _d, _e;\n            var vr = {};\n            var close = kLineData.close;\n            var preClose = ((_a = dataList[i - 1]) !== null && _a !== void 0 ? _a : kLineData).close;\n            var volume = (_b = kLineData.volume) !== null && _b !== void 0 ? _b : 0;\n            if (close > preClose) {\n                uvs += volume;\n            } else if (close < preClose) {\n                dvs += volume;\n            } else {\n                pvs += volume;\n            }\n            if (i >= params[0] - 1) {\n                var halfPvs = pvs / 2;\n                if (dvs + halfPvs === 0) {\n                    vr.vr = 0;\n                } else {\n                    vr.vr = (uvs + halfPvs) / (dvs + halfPvs) * 100;\n                }\n                vrSum += vr.vr;\n                if (i >= params[0] + params[1] - 2) {\n                    vr.maVr = vrSum / params[1];\n                    vrSum -= (_c = result[i - (params[1] - 1)].vr) !== null && _c !== void 0 ? _c : 0;\n                }\n                var agoData = dataList[i - (params[0] - 1)];\n                var agoPreData = (_d = dataList[i - params[0]]) !== null && _d !== void 0 ? _d : agoData;\n                var agoClose = agoData.close;\n                var agoVolume = (_e = agoData.volume) !== null && _e !== void 0 ? _e : 0;\n                if (agoClose > agoPreData.close) {\n                    uvs -= agoVolume;\n                } else if (agoClose < agoPreData.close) {\n                    dvs -= agoVolume;\n                } else {\n                    pvs -= agoVolume;\n                }\n            }\n            result.push(vr);\n        });\n        return result;\n    }\n};\n/**\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n\n * http://www.apache.org/licenses/LICENSE-2.0\n\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ /**\n * WR\n * 公式 WR(N) = 100 * [ C - HIGH(N) ] / [ HIGH(N)-LOW(N) ]\n */ var williamsR = {\n    name: \"WR\",\n    shortName: \"WR\",\n    calcParams: [\n        6,\n        10,\n        14\n    ],\n    figures: [\n        {\n            key: \"wr1\",\n            title: \"WR1: \",\n            type: \"line\"\n        },\n        {\n            key: \"wr2\",\n            title: \"WR2: \",\n            type: \"line\"\n        },\n        {\n            key: \"wr3\",\n            title: \"WR3: \",\n            type: \"line\"\n        }\n    ],\n    regenerateFigures: function(params) {\n        return params.map(function(_, i) {\n            return {\n                key: \"wr\".concat(i + 1),\n                title: \"WR\".concat(i + 1, \": \"),\n                type: \"line\"\n            };\n        });\n    },\n    calc: function(dataList, indicator) {\n        var params = indicator.calcParams, figures = indicator.figures;\n        return dataList.map(function(kLineData, i) {\n            var wr = {};\n            var close = kLineData.close;\n            params.forEach(function(param, index) {\n                var p = param - 1;\n                if (i >= p) {\n                    var hln = getMaxMin(dataList.slice(i - p, i + 1), \"high\", \"low\");\n                    var hn = hln[0];\n                    var ln = hln[1];\n                    var hnSubLn = hn - ln;\n                    wr[figures[index].key] = hnSubLn === 0 ? 0 : (close - hn) / hnSubLn * 100;\n                }\n            });\n            return wr;\n        });\n    }\n};\n/**\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n\n * http://www.apache.org/licenses/LICENSE-2.0\n\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ var indicators = {};\nvar extensions$2 = [\n    averagePrice,\n    awesomeOscillator,\n    bias,\n    bollingerBands,\n    brar,\n    bullAndBearIndex,\n    commodityChannelIndex,\n    currentRatio,\n    differentOfMovingAverage,\n    directionalMovementIndex,\n    easeOfMovementValue,\n    exponentialMovingAverage,\n    momentum,\n    movingAverage,\n    movingAverageConvergenceDivergence,\n    onBalanceVolume,\n    priceAndVolumeTrend,\n    psychologicalLine,\n    rateOfChange,\n    relativeStrengthIndex,\n    simpleMovingAverage,\n    stoch,\n    stopAndReverse,\n    tripleExponentiallySmoothedAverage,\n    volume,\n    volumeRatio,\n    williamsR\n];\nextensions$2.forEach(function(indicator) {\n    indicators[indicator.name] = IndicatorImp.extend(indicator);\n});\nfunction registerIndicator(indicator) {\n    indicators[indicator.name] = IndicatorImp.extend(indicator);\n}\nfunction getIndicatorClass(name) {\n    var _a;\n    return (_a = indicators[name]) !== null && _a !== void 0 ? _a : null;\n}\nfunction getSupportedIndicators() {\n    return Object.keys(indicators);\n}\n/**\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n\n * http://www.apache.org/licenses/LICENSE-2.0\n\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ var fibonacciLine = {\n    name: \"fibonacciLine\",\n    totalStep: 3,\n    needDefaultPointFigure: true,\n    needDefaultXAxisFigure: true,\n    needDefaultYAxisFigure: true,\n    createPointFigures: function(_a) {\n        var _b;\n        var chart = _a.chart, coordinates = _a.coordinates, bounding = _a.bounding, overlay = _a.overlay, yAxis = _a.yAxis;\n        var points = overlay.points;\n        if (coordinates.length > 0) {\n            var precision_1 = 0;\n            if ((_b = yAxis === null || yAxis === void 0 ? void 0 : yAxis.isInCandle()) !== null && _b !== void 0 ? _b : true) {\n                precision_1 = chart.getPrecision().price;\n            } else {\n                var indicators = chart.getIndicators({\n                    paneId: overlay.paneId\n                });\n                indicators.forEach(function(indicator) {\n                    precision_1 = Math.max(precision_1, indicator.precision);\n                });\n            }\n            var lines_1 = [];\n            var texts_1 = [];\n            var startX_1 = 0;\n            var endX_1 = bounding.width;\n            if (coordinates.length > 1 && isNumber(points[0].value) && isNumber(points[1].value)) {\n                var percents = [\n                    1,\n                    0.786,\n                    0.618,\n                    0.5,\n                    0.382,\n                    0.236,\n                    0\n                ];\n                var yDif_1 = coordinates[0].y - coordinates[1].y;\n                var valueDif_1 = points[0].value - points[1].value;\n                percents.forEach(function(percent) {\n                    var _a;\n                    var y = coordinates[1].y + yDif_1 * percent;\n                    var value = chart.getDecimalFold().format(chart.getThousandsSeparator().format((((_a = points[1].value) !== null && _a !== void 0 ? _a : 0) + valueDif_1 * percent).toFixed(precision_1)));\n                    lines_1.push({\n                        coordinates: [\n                            {\n                                x: startX_1,\n                                y: y\n                            },\n                            {\n                                x: endX_1,\n                                y: y\n                            }\n                        ]\n                    });\n                    texts_1.push({\n                        x: startX_1,\n                        y: y,\n                        text: \"\".concat(value, \" (\").concat((percent * 100).toFixed(1), \"%)\"),\n                        baseline: \"bottom\"\n                    });\n                });\n            }\n            return [\n                {\n                    type: \"line\",\n                    attrs: lines_1\n                },\n                {\n                    type: \"text\",\n                    isCheckEvent: false,\n                    attrs: texts_1\n                }\n            ];\n        }\n        return [];\n    }\n};\n/**\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n\n * http://www.apache.org/licenses/LICENSE-2.0\n\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ var horizontalRayLine = {\n    name: \"horizontalRayLine\",\n    totalStep: 3,\n    needDefaultPointFigure: true,\n    needDefaultXAxisFigure: true,\n    needDefaultYAxisFigure: true,\n    createPointFigures: function(_a) {\n        var coordinates = _a.coordinates, bounding = _a.bounding;\n        var coordinate = {\n            x: 0,\n            y: coordinates[0].y\n        };\n        if (isValid(coordinates[1]) && coordinates[0].x < coordinates[1].x) {\n            coordinate.x = bounding.width;\n        }\n        return [\n            {\n                type: \"line\",\n                attrs: {\n                    coordinates: [\n                        coordinates[0],\n                        coordinate\n                    ]\n                }\n            }\n        ];\n    },\n    performEventPressedMove: function(_a) {\n        var points = _a.points, performPoint = _a.performPoint;\n        points[0].value = performPoint.value;\n        points[1].value = performPoint.value;\n    },\n    performEventMoveForDrawing: function(_a) {\n        var currentStep = _a.currentStep, points = _a.points, performPoint = _a.performPoint;\n        if (currentStep === 2) {\n            points[0].value = performPoint.value;\n        }\n    }\n};\n/**\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n\n * http://www.apache.org/licenses/LICENSE-2.0\n\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ var horizontalSegment = {\n    name: \"horizontalSegment\",\n    totalStep: 3,\n    needDefaultPointFigure: true,\n    needDefaultXAxisFigure: true,\n    needDefaultYAxisFigure: true,\n    createPointFigures: function(_a) {\n        var coordinates = _a.coordinates;\n        var lines = [];\n        if (coordinates.length === 2) {\n            lines.push({\n                coordinates: coordinates\n            });\n        }\n        return [\n            {\n                type: \"line\",\n                attrs: lines\n            }\n        ];\n    },\n    performEventPressedMove: function(_a) {\n        var points = _a.points, performPoint = _a.performPoint;\n        points[0].value = performPoint.value;\n        points[1].value = performPoint.value;\n    },\n    performEventMoveForDrawing: function(_a) {\n        var currentStep = _a.currentStep, points = _a.points, performPoint = _a.performPoint;\n        if (currentStep === 2) {\n            points[0].value = performPoint.value;\n        }\n    }\n};\n/**\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n\n * http://www.apache.org/licenses/LICENSE-2.0\n\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ var horizontalStraightLine = {\n    name: \"horizontalStraightLine\",\n    totalStep: 2,\n    needDefaultPointFigure: true,\n    needDefaultXAxisFigure: true,\n    needDefaultYAxisFigure: true,\n    createPointFigures: function(_a) {\n        var coordinates = _a.coordinates, bounding = _a.bounding;\n        return [\n            {\n                type: \"line\",\n                attrs: {\n                    coordinates: [\n                        {\n                            x: 0,\n                            y: coordinates[0].y\n                        },\n                        {\n                            x: bounding.width,\n                            y: coordinates[0].y\n                        }\n                    ]\n                }\n            }\n        ];\n    }\n};\n/**\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n\n * http://www.apache.org/licenses/LICENSE-2.0\n\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ var Eventful = /** @class */ function() {\n    function Eventful() {\n        this._children = [];\n        this._callbacks = new Map();\n    }\n    Eventful.prototype.registerEvent = function(name, callback) {\n        this._callbacks.set(name, callback);\n        return this;\n    };\n    Eventful.prototype.onEvent = function(name, event, other) {\n        var callback = this._callbacks.get(name);\n        if (isValid(callback) && this.checkEventOn(event)) {\n            return callback(event, other);\n        }\n        return false;\n    };\n    Eventful.prototype.checkEventOn = function(event) {\n        var e_1, _a;\n        try {\n            for(var _b = __values(this._children), _c = _b.next(); !_c.done; _c = _b.next()){\n                var ful = _c.value;\n                if (ful.checkEventOn(event)) {\n                    return true;\n                }\n            }\n        } catch (e_1_1) {\n            e_1 = {\n                error: e_1_1\n            };\n        } finally{\n            try {\n                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n            } finally{\n                if (e_1) throw e_1.error;\n            }\n        }\n        return false;\n    };\n    Eventful.prototype.dispatchEvent = function(name, event, other) {\n        var start = this._children.length - 1;\n        if (start > -1) {\n            for(var i = start; i > -1; i--){\n                if (this._children[i].dispatchEvent(name, event, other)) {\n                    return true;\n                }\n            }\n        }\n        return this.onEvent(name, event, other);\n    };\n    Eventful.prototype.addChild = function(eventful) {\n        this._children.push(eventful);\n        return this;\n    };\n    Eventful.prototype.clear = function() {\n        this._children = [];\n    };\n    return Eventful;\n}();\n/**\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n\n * http://www.apache.org/licenses/LICENSE-2.0\n\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ var DEVIATION = 2;\nvar FigureImp = /** @class */ function(_super) {\n    __extends(FigureImp, _super);\n    function FigureImp(figure) {\n        var _this = _super.call(this) || this;\n        _this.attrs = figure.attrs;\n        _this.styles = figure.styles;\n        return _this;\n    }\n    FigureImp.prototype.checkEventOn = function(event) {\n        return this.checkEventOnImp(event, this.attrs, this.styles);\n    };\n    FigureImp.prototype.setAttrs = function(attrs) {\n        this.attrs = attrs;\n        return this;\n    };\n    FigureImp.prototype.setStyles = function(styles) {\n        this.styles = styles;\n        return this;\n    };\n    FigureImp.prototype.draw = function(ctx) {\n        this.drawImp(ctx, this.attrs, this.styles);\n    };\n    FigureImp.extend = function(figure) {\n        var Custom = /** @class */ function(_super) {\n            __extends(Custom, _super);\n            function Custom() {\n                return _super !== null && _super.apply(this, arguments) || this;\n            }\n            Custom.prototype.checkEventOnImp = function(coordinate, attrs, styles) {\n                return figure.checkEventOn(coordinate, attrs, styles);\n            };\n            Custom.prototype.drawImp = function(ctx, attrs, styles) {\n                figure.draw(ctx, attrs, styles);\n            };\n            return Custom;\n        }(FigureImp);\n        return Custom;\n    };\n    return FigureImp;\n}(Eventful);\n/**\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n\n * http://www.apache.org/licenses/LICENSE-2.0\n\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ function checkCoordinateOnLine(coordinate, attrs) {\n    var e_1, _a;\n    var lines = [];\n    lines = lines.concat(attrs);\n    try {\n        for(var lines_1 = __values(lines), lines_1_1 = lines_1.next(); !lines_1_1.done; lines_1_1 = lines_1.next()){\n            var line_1 = lines_1_1.value;\n            var coordinates = line_1.coordinates;\n            if (coordinates.length > 1) {\n                for(var i = 1; i < coordinates.length; i++){\n                    var prevCoordinate = coordinates[i - 1];\n                    var currentCoordinate = coordinates[i];\n                    if (prevCoordinate.x === currentCoordinate.x) {\n                        if (Math.abs(prevCoordinate.y - coordinate.y) + Math.abs(currentCoordinate.y - coordinate.y) - Math.abs(prevCoordinate.y - currentCoordinate.y) < DEVIATION + DEVIATION && Math.abs(coordinate.x - prevCoordinate.x) < DEVIATION) {\n                            return true;\n                        }\n                    } else {\n                        var kb = getLinearSlopeIntercept(prevCoordinate, currentCoordinate);\n                        var y = getLinearYFromSlopeIntercept(kb, coordinate);\n                        var yDif = Math.abs(y - coordinate.y);\n                        if (Math.abs(prevCoordinate.x - coordinate.x) + Math.abs(currentCoordinate.x - coordinate.x) - Math.abs(prevCoordinate.x - currentCoordinate.x) < DEVIATION + DEVIATION && yDif * yDif / (kb[0] * kb[0] + 1) < DEVIATION * DEVIATION) {\n                            return true;\n                        }\n                    }\n                }\n            }\n        }\n    } catch (e_1_1) {\n        e_1 = {\n            error: e_1_1\n        };\n    } finally{\n        try {\n            if (lines_1_1 && !lines_1_1.done && (_a = lines_1.return)) _a.call(lines_1);\n        } finally{\n            if (e_1) throw e_1.error;\n        }\n    }\n    return false;\n}\nfunction getLinearYFromSlopeIntercept(kb, coordinate) {\n    if (kb !== null) {\n        return coordinate.x * kb[0] + kb[1];\n    }\n    return coordinate.y;\n}\n/**\n * 获取点在两点决定的一次函数上的y值\n * @param coordinate1\n * @param coordinate2\n * @param targetCoordinate\n */ function getLinearYFromCoordinates(coordinate1, coordinate2, targetCoordinate) {\n    var kb = getLinearSlopeIntercept(coordinate1, coordinate2);\n    return getLinearYFromSlopeIntercept(kb, targetCoordinate);\n}\nfunction getLinearSlopeIntercept(coordinate1, coordinate2) {\n    var difX = coordinate1.x - coordinate2.x;\n    if (difX !== 0) {\n        var k = (coordinate1.y - coordinate2.y) / difX;\n        var b = coordinate1.y - k * coordinate1.x;\n        return [\n            k,\n            b\n        ];\n    }\n    return null;\n}\nfunction lineTo(ctx, coordinates, smooth) {\n    var length = coordinates.length;\n    var smoothParam = isNumber(smooth) ? smooth > 0 && smooth < 1 ? smooth : 0 : smooth ? 0.5 : 0;\n    if (smoothParam > 0 && length > 2) {\n        var cpx0 = coordinates[0].x;\n        var cpy0 = coordinates[0].y;\n        for(var i = 1; i < length - 1; i++){\n            var prevCoordinate = coordinates[i - 1];\n            var coordinate = coordinates[i];\n            var nextCoordinate = coordinates[i + 1];\n            var dx01 = coordinate.x - prevCoordinate.x;\n            var dy01 = coordinate.y - prevCoordinate.y;\n            var dx12 = nextCoordinate.x - coordinate.x;\n            var dy12 = nextCoordinate.y - coordinate.y;\n            var dx02 = nextCoordinate.x - prevCoordinate.x;\n            var dy02 = nextCoordinate.y - prevCoordinate.y;\n            var prevSegmentLength = Math.sqrt(dx01 * dx01 + dy01 * dy01);\n            var nextSegmentLength = Math.sqrt(dx12 * dx12 + dy12 * dy12);\n            var segmentLengthRatio = nextSegmentLength / (nextSegmentLength + prevSegmentLength);\n            var nextCpx = coordinate.x + dx02 * smoothParam * segmentLengthRatio;\n            var nextCpy = coordinate.y + dy02 * smoothParam * segmentLengthRatio;\n            nextCpx = Math.min(nextCpx, Math.max(nextCoordinate.x, coordinate.x));\n            nextCpy = Math.min(nextCpy, Math.max(nextCoordinate.y, coordinate.y));\n            nextCpx = Math.max(nextCpx, Math.min(nextCoordinate.x, coordinate.x));\n            nextCpy = Math.max(nextCpy, Math.min(nextCoordinate.y, coordinate.y));\n            dx02 = nextCpx - coordinate.x;\n            dy02 = nextCpy - coordinate.y;\n            var cpx1 = coordinate.x - dx02 * prevSegmentLength / nextSegmentLength;\n            var cpy1 = coordinate.y - dy02 * prevSegmentLength / nextSegmentLength;\n            cpx1 = Math.min(cpx1, Math.max(prevCoordinate.x, coordinate.x));\n            cpy1 = Math.min(cpy1, Math.max(prevCoordinate.y, coordinate.y));\n            cpx1 = Math.max(cpx1, Math.min(prevCoordinate.x, coordinate.x));\n            cpy1 = Math.max(cpy1, Math.min(prevCoordinate.y, coordinate.y));\n            dx02 = coordinate.x - cpx1;\n            dy02 = coordinate.y - cpy1;\n            nextCpx = coordinate.x + dx02 * nextSegmentLength / prevSegmentLength;\n            nextCpy = coordinate.y + dy02 * nextSegmentLength / prevSegmentLength;\n            ctx.bezierCurveTo(cpx0, cpy0, cpx1, cpy1, coordinate.x, coordinate.y);\n            cpx0 = nextCpx;\n            cpy0 = nextCpy;\n        }\n        var lastCoordinate = coordinates[length - 1];\n        ctx.bezierCurveTo(cpx0, cpy0, lastCoordinate.x, lastCoordinate.y, lastCoordinate.x, lastCoordinate.y);\n    } else {\n        for(var i = 1; i < length; i++){\n            ctx.lineTo(coordinates[i].x, coordinates[i].y);\n        }\n    }\n}\nfunction drawLine(ctx, attrs, styles) {\n    var lines = [];\n    lines = lines.concat(attrs);\n    var _a = styles.style, style = _a === void 0 ? LineType.Solid : _a, _b = styles.smooth, smooth = _b === void 0 ? false : _b, _c = styles.size, size = _c === void 0 ? 1 : _c, _d = styles.color, color = _d === void 0 ? \"currentColor\" : _d, _e = styles.dashedValue, dashedValue = _e === void 0 ? [\n        2,\n        2\n    ] : _e;\n    ctx.lineWidth = size;\n    ctx.strokeStyle = color;\n    if (style === LineType.Dashed) {\n        ctx.setLineDash(dashedValue);\n    } else {\n        ctx.setLineDash([]);\n    }\n    var correction = size % 2 === 1 ? 0.5 : 0;\n    lines.forEach(function(_a) {\n        var coordinates = _a.coordinates;\n        if (coordinates.length > 1) {\n            if (coordinates.length === 2 && (coordinates[0].x === coordinates[1].x || coordinates[0].y === coordinates[1].y)) {\n                ctx.beginPath();\n                if (coordinates[0].x === coordinates[1].x) {\n                    ctx.moveTo(coordinates[0].x + correction, coordinates[0].y);\n                    ctx.lineTo(coordinates[1].x + correction, coordinates[1].y);\n                } else {\n                    ctx.moveTo(coordinates[0].x, coordinates[0].y + correction);\n                    ctx.lineTo(coordinates[1].x, coordinates[1].y + correction);\n                }\n                ctx.stroke();\n                ctx.closePath();\n            } else {\n                ctx.save();\n                if (size % 2 === 1) {\n                    ctx.translate(0.5, 0.5);\n                }\n                ctx.beginPath();\n                ctx.moveTo(coordinates[0].x, coordinates[0].y);\n                lineTo(ctx, coordinates, smooth);\n                ctx.stroke();\n                ctx.closePath();\n                ctx.restore();\n            }\n        }\n    });\n}\nvar line = {\n    name: \"line\",\n    checkEventOn: checkCoordinateOnLine,\n    draw: function(ctx, attrs, styles) {\n        drawLine(ctx, attrs, styles);\n    }\n};\n/**\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n\n * http://www.apache.org/licenses/LICENSE-2.0\n\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ /**\n * 获取平行线\n * @param coordinates\n * @param bounding\n * @param extendParallelLineCount\n * @returns {Array}\n */ function getParallelLines(coordinates, bounding, extendParallelLineCount) {\n    var count = extendParallelLineCount !== null && extendParallelLineCount !== void 0 ? extendParallelLineCount : 0;\n    var lines = [];\n    if (coordinates.length > 1) {\n        if (coordinates[0].x === coordinates[1].x) {\n            var startY = 0;\n            var endY = bounding.height;\n            lines.push({\n                coordinates: [\n                    {\n                        x: coordinates[0].x,\n                        y: startY\n                    },\n                    {\n                        x: coordinates[0].x,\n                        y: endY\n                    }\n                ]\n            });\n            if (coordinates.length > 2) {\n                lines.push({\n                    coordinates: [\n                        {\n                            x: coordinates[2].x,\n                            y: startY\n                        },\n                        {\n                            x: coordinates[2].x,\n                            y: endY\n                        }\n                    ]\n                });\n                var distance = coordinates[0].x - coordinates[2].x;\n                for(var i = 0; i < count; i++){\n                    var d = distance * (i + 1);\n                    lines.push({\n                        coordinates: [\n                            {\n                                x: coordinates[0].x + d,\n                                y: startY\n                            },\n                            {\n                                x: coordinates[0].x + d,\n                                y: endY\n                            }\n                        ]\n                    });\n                }\n            }\n        } else {\n            var startX = 0;\n            var endX = bounding.width;\n            var kb = getLinearSlopeIntercept(coordinates[0], coordinates[1]);\n            var k = kb[0];\n            var b = kb[1];\n            lines.push({\n                coordinates: [\n                    {\n                        x: startX,\n                        y: startX * k + b\n                    },\n                    {\n                        x: endX,\n                        y: endX * k + b\n                    }\n                ]\n            });\n            if (coordinates.length > 2) {\n                var b1 = coordinates[2].y - k * coordinates[2].x;\n                lines.push({\n                    coordinates: [\n                        {\n                            x: startX,\n                            y: startX * k + b1\n                        },\n                        {\n                            x: endX,\n                            y: endX * k + b1\n                        }\n                    ]\n                });\n                var distance = b - b1;\n                for(var i = 0; i < count; i++){\n                    var b2 = b + distance * (i + 1);\n                    lines.push({\n                        coordinates: [\n                            {\n                                x: startX,\n                                y: startX * k + b2\n                            },\n                            {\n                                x: endX,\n                                y: endX * k + b2\n                            }\n                        ]\n                    });\n                }\n            }\n        }\n    }\n    return lines;\n}\nvar parallelStraightLine = {\n    name: \"parallelStraightLine\",\n    totalStep: 4,\n    needDefaultPointFigure: true,\n    needDefaultXAxisFigure: true,\n    needDefaultYAxisFigure: true,\n    createPointFigures: function(_a) {\n        var coordinates = _a.coordinates, bounding = _a.bounding;\n        return [\n            {\n                type: \"line\",\n                attrs: getParallelLines(coordinates, bounding)\n            }\n        ];\n    }\n};\n/**\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n\n * http://www.apache.org/licenses/LICENSE-2.0\n\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ var priceChannelLine = {\n    name: \"priceChannelLine\",\n    totalStep: 4,\n    needDefaultPointFigure: true,\n    needDefaultXAxisFigure: true,\n    needDefaultYAxisFigure: true,\n    createPointFigures: function(_a) {\n        var coordinates = _a.coordinates, bounding = _a.bounding;\n        return [\n            {\n                type: \"line\",\n                attrs: getParallelLines(coordinates, bounding, 1)\n            }\n        ];\n    }\n};\n/**\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n\n * http://www.apache.org/licenses/LICENSE-2.0\n\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ var priceLine = {\n    name: \"priceLine\",\n    totalStep: 2,\n    needDefaultPointFigure: true,\n    needDefaultXAxisFigure: true,\n    needDefaultYAxisFigure: true,\n    createPointFigures: function(_a) {\n        var _b;\n        var chart = _a.chart, coordinates = _a.coordinates, bounding = _a.bounding, overlay = _a.overlay, yAxis = _a.yAxis;\n        var precision = 0;\n        if ((_b = yAxis === null || yAxis === void 0 ? void 0 : yAxis.isInCandle()) !== null && _b !== void 0 ? _b : true) {\n            precision = chart.getPrecision().price;\n        } else {\n            var indicators = chart.getIndicators({\n                paneId: overlay.paneId\n            });\n            indicators.forEach(function(indicator) {\n                precision = Math.max(precision, indicator.precision);\n            });\n        }\n        var _c = overlay.points[0].value, value = _c === void 0 ? 0 : _c;\n        return [\n            {\n                type: \"line\",\n                attrs: {\n                    coordinates: [\n                        coordinates[0],\n                        {\n                            x: bounding.width,\n                            y: coordinates[0].y\n                        }\n                    ]\n                }\n            },\n            {\n                type: \"text\",\n                ignoreEvent: true,\n                attrs: {\n                    x: coordinates[0].x,\n                    y: coordinates[0].y,\n                    text: chart.getDecimalFold().format(chart.getThousandsSeparator().format(value.toFixed(precision))),\n                    baseline: \"bottom\"\n                }\n            }\n        ];\n    }\n};\n/**\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n\n * http://www.apache.org/licenses/LICENSE-2.0\n\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ function getRayLine(coordinates, bounding) {\n    if (coordinates.length > 1) {\n        var coordinate = {\n            x: 0,\n            y: 0\n        };\n        if (coordinates[0].x === coordinates[1].x && coordinates[0].y !== coordinates[1].y) {\n            if (coordinates[0].y < coordinates[1].y) {\n                coordinate = {\n                    x: coordinates[0].x,\n                    y: bounding.height\n                };\n            } else {\n                coordinate = {\n                    x: coordinates[0].x,\n                    y: 0\n                };\n            }\n        } else if (coordinates[0].x > coordinates[1].x) {\n            coordinate = {\n                x: 0,\n                y: getLinearYFromCoordinates(coordinates[0], coordinates[1], {\n                    x: 0,\n                    y: coordinates[0].y\n                })\n            };\n        } else {\n            coordinate = {\n                x: bounding.width,\n                y: getLinearYFromCoordinates(coordinates[0], coordinates[1], {\n                    x: bounding.width,\n                    y: coordinates[0].y\n                })\n            };\n        }\n        return {\n            coordinates: [\n                coordinates[0],\n                coordinate\n            ]\n        };\n    }\n    return [];\n}\nvar rayLine = {\n    name: \"rayLine\",\n    totalStep: 3,\n    needDefaultPointFigure: true,\n    needDefaultXAxisFigure: true,\n    needDefaultYAxisFigure: true,\n    createPointFigures: function(_a) {\n        var coordinates = _a.coordinates, bounding = _a.bounding;\n        return [\n            {\n                type: \"line\",\n                attrs: getRayLine(coordinates, bounding)\n            }\n        ];\n    }\n};\n/**\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n\n * http://www.apache.org/licenses/LICENSE-2.0\n\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ var segment = {\n    name: \"segment\",\n    totalStep: 3,\n    needDefaultPointFigure: true,\n    needDefaultXAxisFigure: true,\n    needDefaultYAxisFigure: true,\n    createPointFigures: function(_a) {\n        var coordinates = _a.coordinates;\n        if (coordinates.length === 2) {\n            return [\n                {\n                    type: \"line\",\n                    attrs: {\n                        coordinates: coordinates\n                    }\n                }\n            ];\n        }\n        return [];\n    }\n};\n/**\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n\n * http://www.apache.org/licenses/LICENSE-2.0\n\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ var straightLine = {\n    name: \"straightLine\",\n    totalStep: 3,\n    needDefaultPointFigure: true,\n    needDefaultXAxisFigure: true,\n    needDefaultYAxisFigure: true,\n    createPointFigures: function(_a) {\n        var coordinates = _a.coordinates, bounding = _a.bounding;\n        if (coordinates.length === 2) {\n            if (coordinates[0].x === coordinates[1].x) {\n                return [\n                    {\n                        type: \"line\",\n                        attrs: {\n                            coordinates: [\n                                {\n                                    x: coordinates[0].x,\n                                    y: 0\n                                },\n                                {\n                                    x: coordinates[0].x,\n                                    y: bounding.height\n                                }\n                            ]\n                        }\n                    }\n                ];\n            }\n            return [\n                {\n                    type: \"line\",\n                    attrs: {\n                        coordinates: [\n                            {\n                                x: 0,\n                                y: getLinearYFromCoordinates(coordinates[0], coordinates[1], {\n                                    x: 0,\n                                    y: coordinates[0].y\n                                })\n                            },\n                            {\n                                x: bounding.width,\n                                y: getLinearYFromCoordinates(coordinates[0], coordinates[1], {\n                                    x: bounding.width,\n                                    y: coordinates[0].y\n                                })\n                            }\n                        ]\n                    }\n                }\n            ];\n        }\n        return [];\n    }\n};\n/**\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n\n * http://www.apache.org/licenses/LICENSE-2.0\n\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ var verticalRayLine = {\n    name: \"verticalRayLine\",\n    totalStep: 3,\n    needDefaultPointFigure: true,\n    needDefaultXAxisFigure: true,\n    needDefaultYAxisFigure: true,\n    createPointFigures: function(_a) {\n        var coordinates = _a.coordinates, bounding = _a.bounding;\n        if (coordinates.length === 2) {\n            var coordinate = {\n                x: coordinates[0].x,\n                y: 0\n            };\n            if (coordinates[0].y < coordinates[1].y) {\n                coordinate.y = bounding.height;\n            }\n            return [\n                {\n                    type: \"line\",\n                    attrs: {\n                        coordinates: [\n                            coordinates[0],\n                            coordinate\n                        ]\n                    }\n                }\n            ];\n        }\n        return [];\n    },\n    performEventPressedMove: function(_a) {\n        var points = _a.points, performPoint = _a.performPoint;\n        points[0].timestamp = performPoint.timestamp;\n        points[0].dataIndex = performPoint.dataIndex;\n        points[1].timestamp = performPoint.timestamp;\n        points[1].dataIndex = performPoint.dataIndex;\n    },\n    performEventMoveForDrawing: function(_a) {\n        var currentStep = _a.currentStep, points = _a.points, performPoint = _a.performPoint;\n        if (currentStep === 2) {\n            points[0].timestamp = performPoint.timestamp;\n            points[0].dataIndex = performPoint.dataIndex;\n        }\n    }\n};\n/**\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n\n * http://www.apache.org/licenses/LICENSE-2.0\n\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ var verticalSegment = {\n    name: \"verticalSegment\",\n    totalStep: 3,\n    needDefaultPointFigure: true,\n    needDefaultXAxisFigure: true,\n    needDefaultYAxisFigure: true,\n    createPointFigures: function(_a) {\n        var coordinates = _a.coordinates;\n        if (coordinates.length === 2) {\n            return [\n                {\n                    type: \"line\",\n                    attrs: {\n                        coordinates: coordinates\n                    }\n                }\n            ];\n        }\n        return [];\n    },\n    performEventPressedMove: function(_a) {\n        var points = _a.points, performPoint = _a.performPoint;\n        points[0].timestamp = performPoint.timestamp;\n        points[0].dataIndex = performPoint.dataIndex;\n        points[1].timestamp = performPoint.timestamp;\n        points[1].dataIndex = performPoint.dataIndex;\n    },\n    performEventMoveForDrawing: function(_a) {\n        var currentStep = _a.currentStep, points = _a.points, performPoint = _a.performPoint;\n        if (currentStep === 2) {\n            points[0].timestamp = performPoint.timestamp;\n            points[0].dataIndex = performPoint.dataIndex;\n        }\n    }\n};\n/**\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n\n * http://www.apache.org/licenses/LICENSE-2.0\n\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ var verticalStraightLine = {\n    name: \"verticalStraightLine\",\n    totalStep: 2,\n    needDefaultPointFigure: true,\n    needDefaultXAxisFigure: true,\n    needDefaultYAxisFigure: true,\n    createPointFigures: function(_a) {\n        var coordinates = _a.coordinates, bounding = _a.bounding;\n        return [\n            {\n                type: \"line\",\n                attrs: {\n                    coordinates: [\n                        {\n                            x: coordinates[0].x,\n                            y: 0\n                        },\n                        {\n                            x: coordinates[0].x,\n                            y: bounding.height\n                        }\n                    ]\n                }\n            }\n        ];\n    }\n};\n/**\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n\n * http://www.apache.org/licenses/LICENSE-2.0\n\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ var simpleAnnotation = {\n    name: \"simpleAnnotation\",\n    totalStep: 2,\n    styles: {\n        line: {\n            style: LineType.Dashed\n        }\n    },\n    createPointFigures: function(_a) {\n        var _b;\n        var overlay = _a.overlay, coordinates = _a.coordinates;\n        var text = \"\";\n        if (isValid(overlay.extendData)) {\n            if (!isFunction(overlay.extendData)) {\n                text = (_b = overlay.extendData) !== null && _b !== void 0 ? _b : \"\";\n            } else {\n                text = overlay.extendData(overlay);\n            }\n        }\n        var startX = coordinates[0].x;\n        var startY = coordinates[0].y - 6;\n        var lineEndY = startY - 50;\n        var arrowEndY = lineEndY - 5;\n        return [\n            {\n                type: \"line\",\n                attrs: {\n                    coordinates: [\n                        {\n                            x: startX,\n                            y: startY\n                        },\n                        {\n                            x: startX,\n                            y: lineEndY\n                        }\n                    ]\n                },\n                ignoreEvent: true\n            },\n            {\n                type: \"polygon\",\n                attrs: {\n                    coordinates: [\n                        {\n                            x: startX,\n                            y: lineEndY\n                        },\n                        {\n                            x: startX - 4,\n                            y: arrowEndY\n                        },\n                        {\n                            x: startX + 4,\n                            y: arrowEndY\n                        }\n                    ]\n                },\n                ignoreEvent: true\n            },\n            {\n                type: \"text\",\n                attrs: {\n                    x: startX,\n                    y: arrowEndY,\n                    text: text,\n                    align: \"center\",\n                    baseline: \"bottom\"\n                },\n                ignoreEvent: true\n            }\n        ];\n    }\n};\n/**\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n\n * http://www.apache.org/licenses/LICENSE-2.0\n\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ var simpleTag = {\n    name: \"simpleTag\",\n    totalStep: 2,\n    styles: {\n        line: {\n            style: LineType.Dashed\n        }\n    },\n    createPointFigures: function(_a) {\n        var bounding = _a.bounding, coordinates = _a.coordinates;\n        return {\n            type: \"line\",\n            attrs: {\n                coordinates: [\n                    {\n                        x: 0,\n                        y: coordinates[0].y\n                    },\n                    {\n                        x: bounding.width,\n                        y: coordinates[0].y\n                    }\n                ]\n            },\n            ignoreEvent: true\n        };\n    },\n    createYAxisFigures: function(_a) {\n        var _b, _c;\n        var chart = _a.chart, overlay = _a.overlay, coordinates = _a.coordinates, bounding = _a.bounding, yAxis = _a.yAxis;\n        var isFromZero = (_b = yAxis === null || yAxis === void 0 ? void 0 : yAxis.isFromZero()) !== null && _b !== void 0 ? _b : false;\n        var textAlign = \"left\";\n        var x = 0;\n        if (isFromZero) {\n            textAlign = \"left\";\n            x = 0;\n        } else {\n            textAlign = \"right\";\n            x = bounding.width;\n        }\n        var text = \"\";\n        if (isValid(overlay.extendData)) {\n            if (!isFunction(overlay.extendData)) {\n                text = (_c = overlay.extendData) !== null && _c !== void 0 ? _c : \"\";\n            } else {\n                text = overlay.extendData(overlay);\n            }\n        }\n        if (!isValid(text) && isNumber(overlay.points[0].value)) {\n            text = formatPrecision(overlay.points[0].value, chart.getPrecision().price);\n        }\n        return {\n            type: \"text\",\n            attrs: {\n                x: x,\n                y: coordinates[0].y,\n                text: text,\n                align: textAlign,\n                baseline: \"middle\"\n            }\n        };\n    }\n};\n/**\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n\n * http://www.apache.org/licenses/LICENSE-2.0\n\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ var overlays = {};\nvar extensions$1 = [\n    fibonacciLine,\n    horizontalRayLine,\n    horizontalSegment,\n    horizontalStraightLine,\n    parallelStraightLine,\n    priceChannelLine,\n    priceLine,\n    rayLine,\n    segment,\n    straightLine,\n    verticalRayLine,\n    verticalSegment,\n    verticalStraightLine,\n    simpleAnnotation,\n    simpleTag\n];\nextensions$1.forEach(function(template) {\n    overlays[template.name] = OverlayImp.extend(template);\n});\nfunction registerOverlay(template) {\n    overlays[template.name] = OverlayImp.extend(template);\n}\nfunction getOverlayInnerClass(name) {\n    var _a;\n    return (_a = overlays[name]) !== null && _a !== void 0 ? _a : null;\n}\nfunction getOverlayClass(name) {\n    var _a;\n    return (_a = overlays[name]) !== null && _a !== void 0 ? _a : null;\n}\nfunction getSupportedOverlays() {\n    return Object.keys(overlays);\n}\n/**\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n\n * http://www.apache.org/licenses/LICENSE-2.0\n\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ var light = {\n    grid: {\n        horizontal: {\n            color: \"#EDEDED\"\n        },\n        vertical: {\n            color: \"#EDEDED\"\n        }\n    },\n    candle: {\n        priceMark: {\n            high: {\n                color: \"#76808F\"\n            },\n            low: {\n                color: \"#76808F\"\n            }\n        },\n        tooltip: {\n            rect: {\n                color: \"#FEFEFE\",\n                borderColor: \"#F2F3F5\"\n            },\n            text: {\n                color: \"#76808F\"\n            }\n        }\n    },\n    indicator: {\n        tooltip: {\n            text: {\n                color: \"#76808F\"\n            }\n        }\n    },\n    xAxis: {\n        axisLine: {\n            color: \"#DDDDDD\"\n        },\n        tickText: {\n            color: \"#76808F\"\n        },\n        tickLine: {\n            color: \"#DDDDDD\"\n        }\n    },\n    yAxis: {\n        axisLine: {\n            color: \"#DDDDDD\"\n        },\n        tickText: {\n            color: \"#76808F\"\n        },\n        tickLine: {\n            color: \"#DDDDDD\"\n        }\n    },\n    separator: {\n        color: \"#DDDDDD\"\n    },\n    crosshair: {\n        horizontal: {\n            line: {\n                color: \"#76808F\"\n            },\n            text: {\n                borderColor: \"#686D76\",\n                backgroundColor: \"#686D76\"\n            }\n        },\n        vertical: {\n            line: {\n                color: \"#76808F\"\n            },\n            text: {\n                borderColor: \"#686D76\",\n                backgroundColor: \"#686D76\"\n            }\n        }\n    }\n};\n/**\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n\n * http://www.apache.org/licenses/LICENSE-2.0\n\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ var dark = {\n    grid: {\n        horizontal: {\n            color: \"#292929\"\n        },\n        vertical: {\n            color: \"#292929\"\n        }\n    },\n    candle: {\n        priceMark: {\n            high: {\n                color: \"#929AA5\"\n            },\n            low: {\n                color: \"#929AA5\"\n            }\n        },\n        tooltip: {\n            rect: {\n                color: \"rgba(10, 10, 10, .6)\",\n                borderColor: \"rgba(10, 10, 10, .6)\"\n            },\n            text: {\n                color: \"#929AA5\"\n            }\n        }\n    },\n    indicator: {\n        tooltip: {\n            text: {\n                color: \"#929AA5\"\n            }\n        }\n    },\n    xAxis: {\n        axisLine: {\n            color: \"#333333\"\n        },\n        tickText: {\n            color: \"#929AA5\"\n        },\n        tickLine: {\n            color: \"#333333\"\n        }\n    },\n    yAxis: {\n        axisLine: {\n            color: \"#333333\"\n        },\n        tickText: {\n            color: \"#929AA5\"\n        },\n        tickLine: {\n            color: \"#333333\"\n        }\n    },\n    separator: {\n        color: \"#333333\"\n    },\n    crosshair: {\n        horizontal: {\n            line: {\n                color: \"#929AA5\"\n            },\n            text: {\n                borderColor: \"#373a40\",\n                backgroundColor: \"#373a40\"\n            }\n        },\n        vertical: {\n            line: {\n                color: \"#929AA5\"\n            },\n            text: {\n                borderColor: \"#373a40\",\n                backgroundColor: \"#373a40\"\n            }\n        }\n    }\n};\n/**\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n\n * http://www.apache.org/licenses/LICENSE-2.0\n\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ var styles = {\n    light: light,\n    dark: dark\n};\nfunction registerStyles(name, ss) {\n    styles[name] = ss;\n}\nfunction getStyles(name) {\n    var _a;\n    return (_a = styles[name]) !== null && _a !== void 0 ? _a : null;\n}\n/**\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n\n * http://www.apache.org/licenses/LICENSE-2.0\n\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ var PANE_MIN_HEIGHT = 30;\nvar PANE_DEFAULT_HEIGHT = 100;\nvar PaneIdConstants = {\n    CANDLE: \"candle_pane\",\n    INDICATOR: \"indicator_pane_\",\n    X_AXIS: \"x_axis_pane\"\n};\n/**\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n\n * http://www.apache.org/licenses/LICENSE-2.0\n\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ var BarSpaceLimitConstants = {\n    MIN: 1,\n    MAX: 50\n};\nvar DEFAULT_BAR_SPACE = 10;\nvar DEFAULT_OFFSET_RIGHT_DISTANCE = 80;\nvar BAR_GAP_RATIO = 0.2;\nvar SCALE_MULTIPLIER = 10;\nvar DEFAULT_MIN_TIME_SPAN = 15 * 60 * 1000;\nvar StoreImp = /** @class */ function() {\n    function StoreImp(chart, options) {\n        var _this = this;\n        /**\n         * Styles\n         */ this._styles = getDefaultStyles();\n        /**\n         * Custom api\n         */ this._customApi = {\n            formatDate: function(timestamp, format) {\n                return formatTimestampToString(_this._dateTimeFormat, timestamp, format);\n            },\n            formatBigNumber: formatBigNumber\n        };\n        /**\n         * Locale\n         */ this._locale = \"en-US\";\n        /**\n         * Thousands separator\n         */ this._thousandsSeparator = {\n            sign: \",\",\n            format: function(value) {\n                return formatThousands(value, _this._thousandsSeparator.sign);\n            }\n        };\n        /**\n         * Decimal fold\n         */ this._decimalFold = {\n            threshold: 3,\n            format: function(value) {\n                return formatFoldDecimal(value, _this._decimalFold.threshold);\n            }\n        };\n        /**\n         * Price and volume precision\n         */ this._precision = {\n            price: 2,\n            volume: 0\n        };\n        /**\n         * Data source\n         */ this._dataList = [];\n        /**\n         * Load more data callback\n         */ this._loadMoreDataCallback = null;\n        /**\n         * Is loading data flag\n         */ this._loading = true;\n        /**\n        * Whether there are forward and backward more flag\n         */ this._loadDataMore = {\n            forward: false,\n            backward: false\n        };\n        /**\n         * Scale enabled flag\n         */ this._zoomEnabled = true;\n        /**\n         * Scroll enabled flag\n         */ this._scrollEnabled = true;\n        /**\n         * Total space of drawing area\n         */ this._totalBarSpace = 0;\n        /**\n         * Space occupied by a single piece of data\n         */ this._barSpace = DEFAULT_BAR_SPACE;\n        /**\n         * Distance from the last data to the right of the drawing area\n         */ this._offsetRightDistance = DEFAULT_OFFSET_RIGHT_DISTANCE;\n        /**\n         * The number of bar to the right of the drawing area from the last data when scrolling starts\n         */ this._startLastBarRightSideDiffBarCount = 0;\n        /**\n         * Scroll limit role\n         */ this._scrollLimitRole = 0 /* ScrollLimitRole.BarCount */ ;\n        /**\n         * Scroll to the leftmost and rightmost visible bar\n         */ this._minVisibleBarCount = {\n            left: 2,\n            right: 2\n        };\n        /**\n         * Scroll to the leftmost and rightmost distance\n         */ this._maxOffsetDistance = {\n            left: 50,\n            right: 50\n        };\n        /**\n         * Start and end points of visible area data index\n         */ this._visibleRange = getDefaultVisibleRange();\n        this._timeWeightTickMap = new Map();\n        this._timeWeightTickList = [];\n        this._minTimeSpan = {\n            compare: Number.MAX_SAFE_INTEGER,\n            calc: DEFAULT_MIN_TIME_SPAN\n        };\n        /**\n         * Visible data array\n         */ this._visibleRangeDataList = [];\n        /**\n         * Visible highest lowest price data\n         */ this._visibleRangeHighLowPrice = [\n            {\n                x: 0,\n                price: Number.MIN_SAFE_INTEGER\n            },\n            {\n                x: 0,\n                price: Number.MAX_SAFE_INTEGER\n            }\n        ];\n        /**\n         * Crosshair info\n         */ this._crosshair = {};\n        /**\n         * Active tooltip icon info\n         */ this._activeTooltipFeatureInfo = null;\n        /**\n         * Actions\n         */ this._actions = new Map();\n        /**\n         * Indicator\n         */ this._indicators = new Map();\n        /**\n         * Task scheduler\n         */ this._taskScheduler = new TaskScheduler();\n        /**\n         * Overlay\n         */ this._overlays = new Map();\n        /**\n         * Overlay information in painting\n         */ this._progressOverlayInfo = null;\n        /**\n         * Overlay information by the mouse pressed\n         */ this._pressedOverlayInfo = {\n            paneId: \"\",\n            overlay: null,\n            figureType: 0 /* EventOverlayInfoFigureType.None */ ,\n            figureIndex: -1,\n            figure: null\n        };\n        /**\n         * Overlay information by hover\n         */ this._hoverOverlayInfo = {\n            paneId: \"\",\n            overlay: null,\n            figureType: 0 /* EventOverlayInfoFigureType.None */ ,\n            figureIndex: -1,\n            figure: null\n        };\n        /**\n         * Overlay information by the mouse click\n         */ this._clickOverlayInfo = {\n            paneId: \"\",\n            overlay: null,\n            figureType: 0 /* EventOverlayInfoFigureType.None */ ,\n            figureIndex: -1,\n            figure: null\n        };\n        this._chart = chart;\n        this._calcOptimalBarSpace();\n        this._lastBarRightSideDiffBarCount = this._offsetRightDistance / this._barSpace;\n        var _a = options !== null && options !== void 0 ? options : {}, styles = _a.styles, locale = _a.locale, timezone = _a.timezone, customApi = _a.customApi, thousandsSeparator = _a.thousandsSeparator, decimalFold = _a.decimalFold;\n        if (isValid(styles)) {\n            this.setStyles(styles);\n        }\n        if (isString(locale)) {\n            this.setLocale(locale);\n        }\n        this.setTimezone(timezone !== null && timezone !== void 0 ? timezone : \"\");\n        if (isValid(customApi)) {\n            this.setCustomApi(customApi);\n        }\n        if (isValid(thousandsSeparator)) {\n            this.setThousandsSeparator(thousandsSeparator);\n        }\n        if (isValid(decimalFold)) {\n            this.setDecimalFold(decimalFold);\n        }\n    }\n    StoreImp.prototype.setStyles = function(value) {\n        var _a, _b;\n        var styles = null;\n        if (isString(value)) {\n            styles = getStyles(value);\n        } else {\n            styles = value;\n        }\n        merge(this._styles, styles);\n        // `candle.tooltip.custom` should override\n        if (isArray((_b = (_a = styles === null || styles === void 0 ? void 0 : styles.candle) === null || _a === void 0 ? void 0 : _a.tooltip) === null || _b === void 0 ? void 0 : _b.custom)) {\n            this._styles.candle.tooltip.custom = styles.candle.tooltip.custom;\n        }\n    };\n    StoreImp.prototype.getStyles = function() {\n        return this._styles;\n    };\n    StoreImp.prototype.setCustomApi = function(api) {\n        merge(this._customApi, api);\n    };\n    StoreImp.prototype.getCustomApi = function() {\n        return this._customApi;\n    };\n    StoreImp.prototype.setLocale = function(locale) {\n        this._locale = locale;\n    };\n    StoreImp.prototype.getLocale = function() {\n        return this._locale;\n    };\n    StoreImp.prototype.setTimezone = function(timezone) {\n        if (!isValid(this._dateTimeFormat) || this.getTimezone() !== timezone) {\n            var options = {\n                hour12: false,\n                year: \"numeric\",\n                month: \"2-digit\",\n                day: \"2-digit\",\n                hour: \"2-digit\",\n                minute: \"2-digit\",\n                second: \"2-digit\"\n            };\n            if (timezone.length > 0) {\n                options.timeZone = timezone;\n            }\n            var dateTimeFormat = null;\n            try {\n                dateTimeFormat = new Intl.DateTimeFormat(\"en\", options);\n            } catch (e) {\n                logWarn(\"\", \"\", \"Timezone is error!!!\");\n            }\n            if (dateTimeFormat !== null) {\n                this._classifyTimeWeightTicks(this._dataList);\n                this._dateTimeFormat = dateTimeFormat;\n            }\n        }\n    };\n    StoreImp.prototype.getTimezone = function() {\n        return this._dateTimeFormat.resolvedOptions().timeZone;\n    };\n    StoreImp.prototype.getDateTimeFormat = function() {\n        return this._dateTimeFormat;\n    };\n    StoreImp.prototype.setThousandsSeparator = function(thousandsSeparator) {\n        merge(this._thousandsSeparator, thousandsSeparator);\n    };\n    StoreImp.prototype.getThousandsSeparator = function() {\n        return this._thousandsSeparator;\n    };\n    StoreImp.prototype.setDecimalFold = function(decimalFold) {\n        merge(this._decimalFold, decimalFold);\n    };\n    StoreImp.prototype.getDecimalFold = function() {\n        return this._decimalFold;\n    };\n    StoreImp.prototype.getPrecision = function() {\n        return this._precision;\n    };\n    StoreImp.prototype.setPrecision = function(precision) {\n        merge(this._precision, precision);\n        this._synchronizeIndicatorSeriesPrecision();\n    };\n    StoreImp.prototype.getDataList = function() {\n        return this._dataList;\n    };\n    StoreImp.prototype.getVisibleRangeDataList = function() {\n        return this._visibleRangeDataList;\n    };\n    StoreImp.prototype.getVisibleRangeHighLowPrice = function() {\n        return this._visibleRangeHighLowPrice;\n    };\n    StoreImp.prototype.addData = function(data, type, more) {\n        var _this = this;\n        var _a, _b, _c, _d;\n        var success = false;\n        var adjustFlag = false;\n        var dataLengthChange = 0;\n        if (isArray(data)) {\n            dataLengthChange = data.length;\n            switch(type){\n                case LoadDataType.Init:\n                    {\n                        this.clearData();\n                        this._dataList = data;\n                        this._loadDataMore.backward = (_a = more === null || more === void 0 ? void 0 : more.backward) !== null && _a !== void 0 ? _a : false;\n                        this._loadDataMore.forward = (_b = more === null || more === void 0 ? void 0 : more.forward) !== null && _b !== void 0 ? _b : false;\n                        this._classifyTimeWeightTicks(this._dataList);\n                        this.setOffsetRightDistance(this._offsetRightDistance);\n                        adjustFlag = true;\n                        break;\n                    }\n                case LoadDataType.Backward:\n                    {\n                        this._classifyTimeWeightTicks(data, true);\n                        this._dataList = this._dataList.concat(data);\n                        this._loadDataMore.backward = (_c = more === null || more === void 0 ? void 0 : more.backward) !== null && _c !== void 0 ? _c : false;\n                        adjustFlag = dataLengthChange > 0;\n                        break;\n                    }\n                case LoadDataType.Forward:\n                    {\n                        this._dataList = data.concat(this._dataList);\n                        this._classifyTimeWeightTicks(this._dataList);\n                        this._loadDataMore.forward = (_d = more === null || more === void 0 ? void 0 : more.forward) !== null && _d !== void 0 ? _d : false;\n                        adjustFlag = dataLengthChange > 0;\n                        break;\n                    }\n            }\n            this._loading = false;\n            success = true;\n        } else {\n            var dataCount = this._dataList.length;\n            // Determine where individual data should be added\n            var timestamp = data.timestamp;\n            var lastDataTimestamp = formatValue(this._dataList[dataCount - 1], \"timestamp\", 0);\n            if (timestamp > lastDataTimestamp) {\n                this._classifyTimeWeightTicks([\n                    data\n                ], true);\n                this._dataList.push(data);\n                var lastBarRightSideDiffBarCount = this.getLastBarRightSideDiffBarCount();\n                if (lastBarRightSideDiffBarCount < 0) {\n                    this.setLastBarRightSideDiffBarCount(--lastBarRightSideDiffBarCount);\n                }\n                dataLengthChange = 1;\n                success = true;\n                adjustFlag = true;\n            } else if (timestamp === lastDataTimestamp) {\n                this._dataList[dataCount - 1] = data;\n                success = true;\n                adjustFlag = true;\n            }\n        }\n        if (success) {\n            if (adjustFlag) {\n                this._adjustVisibleRange();\n                this.setCrosshair(this._crosshair, {\n                    notInvalidate: true\n                });\n                var filterIndicators = this.getIndicatorsByFilter({});\n                filterIndicators.forEach(function(indicator) {\n                    _this._addIndicatorCalcTask(indicator, type);\n                });\n                this._chart.layout({\n                    measureWidth: true,\n                    update: true,\n                    buildYAxisTick: true\n                });\n            }\n        }\n    };\n    StoreImp.prototype.setLoadMoreDataCallback = function(callback) {\n        this._loadMoreDataCallback = callback;\n    };\n    StoreImp.prototype._calcOptimalBarSpace = function() {\n        var specialBarSpace = 4;\n        var ratio = 1 - BAR_GAP_RATIO * Math.atan(Math.max(specialBarSpace, this._barSpace) - specialBarSpace) / (Math.PI * 0.5);\n        var gapBarSpace = Math.min(Math.floor(this._barSpace * ratio), Math.floor(this._barSpace));\n        if (gapBarSpace % 2 === 0 && gapBarSpace + 2 >= this._barSpace) {\n            --gapBarSpace;\n        }\n        this._gapBarSpace = Math.max(1, gapBarSpace);\n    };\n    StoreImp.prototype._classifyTimeWeightTicks = function(newDataList, isUpdate) {\n        var baseDataIndex = 0;\n        var prevTimestamp = null;\n        if (isUpdate !== null && isUpdate !== void 0 ? isUpdate : false) {\n            baseDataIndex = this._dataList.length;\n            prevTimestamp = this._dataList[baseDataIndex - 1].timestamp;\n        } else {\n            this._timeWeightTickMap.clear();\n            this._minTimeSpan = {\n                compare: Number.MAX_SAFE_INTEGER,\n                calc: DEFAULT_MIN_TIME_SPAN\n            };\n        }\n        classifyTimeWeightTicks(this._timeWeightTickMap, newDataList, this._dateTimeFormat, baseDataIndex, this._minTimeSpan, prevTimestamp);\n        if (this._minTimeSpan.compare !== Number.MAX_SAFE_INTEGER) {\n            this._minTimeSpan.calc = this._minTimeSpan.compare;\n        }\n        this._timeWeightTickList = createTimeWeightTickList(this._timeWeightTickMap, this._barSpace, this._styles.xAxis.tickText);\n    };\n    StoreImp.prototype.getTimeWeightTickList = function() {\n        return this._timeWeightTickList;\n    };\n    StoreImp.prototype._adjustVisibleRange = function() {\n        var _this = this;\n        var _a, _b, _c, _d;\n        var totalBarCount = this._dataList.length;\n        var visibleBarCount = this._totalBarSpace / this._barSpace;\n        var leftMinVisibleBarCount = 0;\n        var rightMinVisibleBarCount = 0;\n        if (this._scrollLimitRole === 1 /* ScrollLimitRole.Distance */ ) {\n            leftMinVisibleBarCount = (this._totalBarSpace - this._maxOffsetDistance.right) / this._barSpace;\n            rightMinVisibleBarCount = (this._totalBarSpace - this._maxOffsetDistance.left) / this._barSpace;\n        } else {\n            leftMinVisibleBarCount = this._minVisibleBarCount.left;\n            rightMinVisibleBarCount = this._minVisibleBarCount.right;\n        }\n        leftMinVisibleBarCount = Math.max(0, leftMinVisibleBarCount);\n        rightMinVisibleBarCount = Math.max(0, rightMinVisibleBarCount);\n        var maxRightOffsetBarCount = visibleBarCount - Math.min(leftMinVisibleBarCount, totalBarCount);\n        if (this._lastBarRightSideDiffBarCount > maxRightOffsetBarCount) {\n            this._lastBarRightSideDiffBarCount = maxRightOffsetBarCount;\n        }\n        var minRightOffsetBarCount = -totalBarCount + Math.min(rightMinVisibleBarCount, totalBarCount);\n        if (this._lastBarRightSideDiffBarCount < minRightOffsetBarCount) {\n            this._lastBarRightSideDiffBarCount = minRightOffsetBarCount;\n        }\n        var to = Math.round(this._lastBarRightSideDiffBarCount + totalBarCount + 0.5);\n        var realTo = to;\n        if (to > totalBarCount) {\n            to = totalBarCount;\n        }\n        var from = Math.round(to - visibleBarCount) - 1;\n        if (from < 0) {\n            from = 0;\n        }\n        var realFrom = this._lastBarRightSideDiffBarCount > 0 ? Math.round(totalBarCount + this._lastBarRightSideDiffBarCount - visibleBarCount) - 1 : from;\n        this._visibleRange = {\n            from: from,\n            to: to,\n            realFrom: realFrom,\n            realTo: realTo\n        };\n        this.executeAction(ActionType.OnVisibleRangeChange, this._visibleRange);\n        this._visibleRangeDataList = [];\n        this._visibleRangeHighLowPrice = [\n            {\n                x: 0,\n                price: Number.MIN_SAFE_INTEGER\n            },\n            {\n                x: 0,\n                price: Number.MAX_SAFE_INTEGER\n            }\n        ];\n        for(var i = realFrom; i < realTo; i++){\n            var kLineData = this._dataList[i];\n            var x = this.dataIndexToCoordinate(i);\n            this._visibleRangeDataList.push({\n                dataIndex: i,\n                x: x,\n                data: {\n                    prev: (_a = this._dataList[i - 1]) !== null && _a !== void 0 ? _a : kLineData,\n                    current: kLineData,\n                    next: (_b = this._dataList[i - 1]) !== null && _b !== void 0 ? _b : kLineData\n                }\n            });\n            if (isValid(kLineData)) {\n                if (this._visibleRangeHighLowPrice[0].price < kLineData.high) {\n                    this._visibleRangeHighLowPrice[0].price = kLineData.high;\n                    this._visibleRangeHighLowPrice[0].x = x;\n                }\n                if (this._visibleRangeHighLowPrice[1].price > kLineData.low) {\n                    this._visibleRangeHighLowPrice[1].price = kLineData.low;\n                    this._visibleRangeHighLowPrice[1].x = x;\n                }\n            }\n        }\n        // More processing and loading, more loading if there are callback methods and no data is being loaded\n        if (!this._loading && isValid(this._loadMoreDataCallback)) {\n            var params = null;\n            if (from === 0) {\n                if (this._loadDataMore.forward) {\n                    this._loading = true;\n                    params = {\n                        type: LoadDataType.Forward,\n                        data: (_c = this._dataList[0]) !== null && _c !== void 0 ? _c : null,\n                        callback: function(data, more) {\n                            _this.addData(data, LoadDataType.Forward, {\n                                forward: more !== null && more !== void 0 ? more : false,\n                                backward: more !== null && more !== void 0 ? more : false\n                            });\n                        }\n                    };\n                }\n            } else if (to === totalBarCount) {\n                if (this._loadDataMore.backward) {\n                    this._loading = true;\n                    params = {\n                        type: LoadDataType.Backward,\n                        data: (_d = this._dataList[totalBarCount - 1]) !== null && _d !== void 0 ? _d : null,\n                        callback: function(data, more) {\n                            _this.addData(data, LoadDataType.Backward, {\n                                forward: more !== null && more !== void 0 ? more : false,\n                                backward: more !== null && more !== void 0 ? more : false\n                            });\n                        }\n                    };\n                }\n            }\n            if (isValid(params)) {\n                this._loadMoreDataCallback(params);\n            }\n        }\n    };\n    StoreImp.prototype.getBarSpace = function() {\n        return {\n            bar: this._barSpace,\n            halfBar: this._barSpace / 2,\n            gapBar: this._gapBarSpace,\n            halfGapBar: Math.floor(this._gapBarSpace / 2)\n        };\n    };\n    StoreImp.prototype.setBarSpace = function(barSpace, adjustBeforeFunc) {\n        if (barSpace < BarSpaceLimitConstants.MIN || barSpace > BarSpaceLimitConstants.MAX || this._barSpace === barSpace) {\n            return;\n        }\n        this._barSpace = barSpace;\n        this._timeWeightTickList = createTimeWeightTickList(this._timeWeightTickMap, this._barSpace, this._styles.xAxis.tickText);\n        this._calcOptimalBarSpace();\n        adjustBeforeFunc === null || adjustBeforeFunc === void 0 ? void 0 : adjustBeforeFunc();\n        this._adjustVisibleRange();\n        this.setCrosshair(this._crosshair, {\n            notInvalidate: true\n        });\n        this._chart.layout({\n            measureWidth: true,\n            update: true,\n            buildYAxisTick: true\n        });\n    };\n    StoreImp.prototype.setTotalBarSpace = function(totalSpace) {\n        if (this._totalBarSpace !== totalSpace) {\n            this._totalBarSpace = totalSpace;\n            this._adjustVisibleRange();\n            this.setCrosshair(this._crosshair, {\n                notInvalidate: true\n            });\n        }\n    };\n    StoreImp.prototype.setOffsetRightDistance = function(distance, isUpdate) {\n        this._offsetRightDistance = this._scrollLimitRole === 1 /* ScrollLimitRole.Distance */  ? Math.min(this._maxOffsetDistance.right, distance) : distance;\n        this._lastBarRightSideDiffBarCount = this._offsetRightDistance / this._barSpace;\n        if (isUpdate !== null && isUpdate !== void 0 ? isUpdate : false) {\n            this._adjustVisibleRange();\n            this.setCrosshair(this._crosshair, {\n                notInvalidate: true\n            });\n            this._chart.layout({\n                measureWidth: true,\n                update: true,\n                buildYAxisTick: true\n            });\n        }\n        return this;\n    };\n    StoreImp.prototype.getInitialOffsetRightDistance = function() {\n        return this._offsetRightDistance;\n    };\n    StoreImp.prototype.getOffsetRightDistance = function() {\n        return Math.max(0, this._lastBarRightSideDiffBarCount * this._barSpace);\n    };\n    StoreImp.prototype.getLastBarRightSideDiffBarCount = function() {\n        return this._lastBarRightSideDiffBarCount;\n    };\n    StoreImp.prototype.setLastBarRightSideDiffBarCount = function(barCount) {\n        this._lastBarRightSideDiffBarCount = barCount;\n    };\n    StoreImp.prototype.setMaxOffsetLeftDistance = function(distance) {\n        this._scrollLimitRole = 1 /* ScrollLimitRole.Distance */ ;\n        this._maxOffsetDistance.left = distance;\n    };\n    StoreImp.prototype.setMaxOffsetRightDistance = function(distance) {\n        this._scrollLimitRole = 1 /* ScrollLimitRole.Distance */ ;\n        this._maxOffsetDistance.right = distance;\n    };\n    StoreImp.prototype.setLeftMinVisibleBarCount = function(barCount) {\n        this._scrollLimitRole = 0 /* ScrollLimitRole.BarCount */ ;\n        this._minVisibleBarCount.left = barCount;\n    };\n    StoreImp.prototype.setRightMinVisibleBarCount = function(barCount) {\n        this._scrollLimitRole = 0 /* ScrollLimitRole.BarCount */ ;\n        this._minVisibleBarCount.right = barCount;\n    };\n    StoreImp.prototype.getVisibleRange = function() {\n        return this._visibleRange;\n    };\n    StoreImp.prototype.startScroll = function() {\n        this._startLastBarRightSideDiffBarCount = this._lastBarRightSideDiffBarCount;\n    };\n    StoreImp.prototype.scroll = function(distance) {\n        if (!this._scrollEnabled) {\n            return;\n        }\n        var distanceBarCount = distance / this._barSpace;\n        var prevLastBarRightSideDistance = this._lastBarRightSideDiffBarCount * this._barSpace;\n        this._lastBarRightSideDiffBarCount = this._startLastBarRightSideDiffBarCount - distanceBarCount;\n        this._adjustVisibleRange();\n        this.setCrosshair(this._crosshair, {\n            notInvalidate: true\n        });\n        this._chart.layout({\n            measureWidth: true,\n            update: true,\n            buildYAxisTick: true\n        });\n        var realDistance = Math.round(prevLastBarRightSideDistance - this._lastBarRightSideDiffBarCount * this._barSpace);\n        if (realDistance !== 0) {\n            this.executeAction(ActionType.OnScroll, {\n                distance: realDistance\n            });\n        }\n    };\n    StoreImp.prototype.getDataByDataIndex = function(dataIndex) {\n        var _a;\n        return (_a = this._dataList[dataIndex]) !== null && _a !== void 0 ? _a : null;\n    };\n    StoreImp.prototype.coordinateToFloatIndex = function(x) {\n        var dataCount = this._dataList.length;\n        var deltaFromRight = (this._totalBarSpace - x) / this._barSpace;\n        var index = dataCount + this._lastBarRightSideDiffBarCount - deltaFromRight;\n        return Math.round(index * 1000000) / 1000000;\n    };\n    StoreImp.prototype.dataIndexToTimestamp = function(dataIndex) {\n        var length = this._dataList.length;\n        if (length === 0) {\n            return null;\n        }\n        var data = this.getDataByDataIndex(dataIndex);\n        if (isValid(data)) {\n            return data.timestamp;\n        }\n        var lastIndex = length - 1;\n        if (dataIndex > lastIndex) {\n            return this._dataList[lastIndex].timestamp + this._minTimeSpan.calc * (dataIndex - lastIndex);\n        }\n        if (dataIndex < 0) {\n            return this._dataList[0].timestamp - this._minTimeSpan.calc * Math.abs(dataIndex);\n        }\n        return null;\n    };\n    StoreImp.prototype.timestampToDataIndex = function(timestamp) {\n        var length = this._dataList.length;\n        if (length === 0) {\n            return 0;\n        }\n        var lastIndex = length - 1;\n        var lastTimestamp = this._dataList[lastIndex].timestamp;\n        if (timestamp > lastTimestamp) {\n            return lastIndex + Math.floor((timestamp - lastTimestamp) / this._minTimeSpan.calc);\n        }\n        var firstTimestamp = this._dataList[0].timestamp;\n        if (timestamp < firstTimestamp) {\n            return Math.floor((timestamp - firstTimestamp) / this._minTimeSpan.calc);\n        }\n        return binarySearchNearest(this._dataList, \"timestamp\", timestamp);\n    };\n    StoreImp.prototype.dataIndexToCoordinate = function(dataIndex) {\n        var dataCount = this._dataList.length;\n        var deltaFromRight = dataCount + this._lastBarRightSideDiffBarCount - dataIndex;\n        return Math.floor(this._totalBarSpace - (deltaFromRight - 0.5) * this._barSpace + 0.5);\n    };\n    StoreImp.prototype.coordinateToDataIndex = function(x) {\n        return Math.ceil(this.coordinateToFloatIndex(x)) - 1;\n    };\n    StoreImp.prototype.zoom = function(scale, coordinate) {\n        var _this = this;\n        var _a;\n        if (!this._zoomEnabled) {\n            return;\n        }\n        var zoomCoordinate = coordinate !== null && coordinate !== void 0 ? coordinate : null;\n        if (!isNumber(zoomCoordinate === null || zoomCoordinate === void 0 ? void 0 : zoomCoordinate.x)) {\n            zoomCoordinate = {\n                x: (_a = this._crosshair.x) !== null && _a !== void 0 ? _a : this._totalBarSpace / 2\n            };\n        }\n        var x = zoomCoordinate.x;\n        var floatIndex = this.coordinateToFloatIndex(x);\n        var prevBarSpace = this._barSpace;\n        var barSpace = this._barSpace + scale * (this._barSpace / SCALE_MULTIPLIER);\n        this.setBarSpace(barSpace, function() {\n            _this._lastBarRightSideDiffBarCount += floatIndex - _this.coordinateToFloatIndex(x);\n        });\n        var realScale = this._barSpace / prevBarSpace;\n        if (realScale !== 1) {\n            this.executeAction(ActionType.OnZoom, {\n                scale: realScale\n            });\n        }\n    };\n    StoreImp.prototype.setZoomEnabled = function(enabled) {\n        this._zoomEnabled = enabled;\n    };\n    StoreImp.prototype.isZoomEnabled = function() {\n        return this._zoomEnabled;\n    };\n    StoreImp.prototype.setScrollEnabled = function(enabled) {\n        this._scrollEnabled = enabled;\n    };\n    StoreImp.prototype.isScrollEnabled = function() {\n        return this._scrollEnabled;\n    };\n    StoreImp.prototype.setCrosshair = function(crosshair, options) {\n        var _a;\n        var _b = options !== null && options !== void 0 ? options : {}, notInvalidate = _b.notInvalidate, notExecuteAction = _b.notExecuteAction, forceInvalidate = _b.forceInvalidate;\n        var cr = crosshair !== null && crosshair !== void 0 ? crosshair : {};\n        var realDataIndex = 0;\n        var dataIndex = 0;\n        if (isNumber(cr.x)) {\n            realDataIndex = this.coordinateToDataIndex(cr.x);\n            if (realDataIndex < 0) {\n                dataIndex = 0;\n            } else if (realDataIndex > this._dataList.length - 1) {\n                dataIndex = this._dataList.length - 1;\n            } else {\n                dataIndex = realDataIndex;\n            }\n        } else {\n            realDataIndex = this._dataList.length - 1;\n            dataIndex = realDataIndex;\n        }\n        var kLineData = this._dataList[dataIndex];\n        var realX = this.dataIndexToCoordinate(realDataIndex);\n        var prevCrosshair = {\n            x: this._crosshair.x,\n            y: this._crosshair.y,\n            paneId: this._crosshair.paneId\n        };\n        this._crosshair = __assign(__assign({}, cr), {\n            realX: realX,\n            kLineData: kLineData,\n            realDataIndex: realDataIndex,\n            dataIndex: dataIndex,\n            timestamp: (_a = this.dataIndexToTimestamp(realDataIndex)) !== null && _a !== void 0 ? _a : undefined\n        });\n        if (prevCrosshair.x !== cr.x || prevCrosshair.y !== cr.y || prevCrosshair.paneId !== cr.paneId || (forceInvalidate !== null && forceInvalidate !== void 0 ? forceInvalidate : false)) {\n            if (isValid(kLineData) && !(notExecuteAction !== null && notExecuteAction !== void 0 ? notExecuteAction : false)) {\n                this._chart.crosshairChange(this._crosshair);\n            }\n            if (!(notInvalidate !== null && notInvalidate !== void 0 ? notInvalidate : false)) {\n                this._chart.updatePane(1 /* UpdateLevel.Overlay */ );\n            }\n        }\n    };\n    /**\n     * 获取crosshair信息\n     * @returns\n     */ StoreImp.prototype.getCrosshair = function() {\n        return this._crosshair;\n    };\n    StoreImp.prototype.setActiveTooltipFeatureInfo = function(info) {\n        this._activeTooltipFeatureInfo = info !== null && info !== void 0 ? info : null;\n    };\n    StoreImp.prototype.getActiveTooltipFeatureInfo = function() {\n        return this._activeTooltipFeatureInfo;\n    };\n    StoreImp.prototype.executeAction = function(type, data) {\n        var _a;\n        (_a = this._actions.get(type)) === null || _a === void 0 ? void 0 : _a.execute(data);\n    };\n    StoreImp.prototype.subscribeAction = function(type, callback) {\n        var _a;\n        if (!this._actions.has(type)) {\n            this._actions.set(type, new Action());\n        }\n        (_a = this._actions.get(type)) === null || _a === void 0 ? void 0 : _a.subscribe(callback);\n    };\n    StoreImp.prototype.unsubscribeAction = function(type, callback) {\n        var action = this._actions.get(type);\n        if (isValid(action)) {\n            action.unsubscribe(callback);\n            if (action.isEmpty()) {\n                this._actions.delete(type);\n            }\n        }\n    };\n    StoreImp.prototype.hasAction = function(type) {\n        var action = this._actions.get(type);\n        return isValid(action) && !action.isEmpty();\n    };\n    StoreImp.prototype._sortIndicators = function(paneId) {\n        var _a;\n        if (isString(paneId)) {\n            (_a = this._indicators.get(paneId)) === null || _a === void 0 ? void 0 : _a.sort(function(i1, i2) {\n                return i1.zLevel - i2.zLevel;\n            });\n        } else {\n            this._indicators.forEach(function(paneIndicators) {\n                paneIndicators.sort(function(i1, i2) {\n                    return i1.zLevel - i2.zLevel;\n                });\n            });\n        }\n    };\n    StoreImp.prototype._addIndicatorCalcTask = function(indicator, loadDataType) {\n        var _this = this;\n        this._taskScheduler.addTask({\n            id: generateTaskId(indicator.id),\n            handler: function() {\n                var _a;\n                (_a = indicator.onDataStateChange) === null || _a === void 0 ? void 0 : _a.call(indicator, {\n                    state: IndicatorDataState.Loading,\n                    type: loadDataType,\n                    indicator: indicator\n                });\n                indicator.calcImp(_this._dataList).then(function(result) {\n                    var _a;\n                    if (result) {\n                        _this._chart.layout({\n                            measureWidth: true,\n                            update: true,\n                            buildYAxisTick: true\n                        });\n                        (_a = indicator.onDataStateChange) === null || _a === void 0 ? void 0 : _a.call(indicator, {\n                            state: IndicatorDataState.Ready,\n                            type: loadDataType,\n                            indicator: indicator\n                        });\n                    }\n                }).catch(function() {\n                    var _a;\n                    (_a = indicator.onDataStateChange) === null || _a === void 0 ? void 0 : _a.call(indicator, {\n                        state: IndicatorDataState.Error,\n                        type: loadDataType,\n                        indicator: indicator\n                    });\n                });\n            }\n        });\n    };\n    StoreImp.prototype.addIndicator = function(create, paneId, isStack) {\n        var name = create.name;\n        var filterIndicators = this.getIndicatorsByFilter(create);\n        if (filterIndicators.length > 0) {\n            return false;\n        }\n        var paneIndicators = this.getIndicatorsByPaneId(paneId);\n        var IndicatorClazz = getIndicatorClass(name);\n        var indicator = new IndicatorClazz();\n        this._synchronizeIndicatorSeriesPrecision(indicator);\n        indicator.paneId = paneId;\n        indicator.override(create);\n        if (!isStack) {\n            this.removeIndicator({\n                paneId: paneId\n            });\n            paneIndicators = [];\n        }\n        paneIndicators.push(indicator);\n        this._indicators.set(paneId, paneIndicators);\n        this._sortIndicators(paneId);\n        this._addIndicatorCalcTask(indicator, LoadDataType.Init);\n        return true;\n    };\n    StoreImp.prototype.getIndicatorsByPaneId = function(paneId) {\n        var _a;\n        return (_a = this._indicators.get(paneId)) !== null && _a !== void 0 ? _a : [];\n    };\n    StoreImp.prototype.getIndicatorsByFilter = function(filter) {\n        var paneId = filter.paneId, name = filter.name, id = filter.id;\n        var match = function(indicator) {\n            if (isValid(id)) {\n                return indicator.id === id;\n            }\n            return !isValid(name) || indicator.name === name;\n        };\n        var indicators = [];\n        if (isValid(paneId)) {\n            indicators = indicators.concat(this.getIndicatorsByPaneId(paneId).filter(match));\n        } else {\n            this._indicators.forEach(function(paneIndicators) {\n                indicators = indicators.concat(paneIndicators.filter(match));\n            });\n        }\n        return indicators;\n    };\n    StoreImp.prototype.removeIndicator = function(filter) {\n        var _this = this;\n        var removed = false;\n        var filterIndicators = this.getIndicatorsByFilter(filter);\n        filterIndicators.forEach(function(indicator) {\n            var paneIndicators = _this.getIndicatorsByPaneId(indicator.paneId);\n            var index = paneIndicators.findIndex(function(ins) {\n                return ins.id === indicator.id;\n            });\n            if (index > -1) {\n                _this._taskScheduler.removeTask(generateTaskId(indicator.id));\n                paneIndicators.splice(index, 1);\n                removed = true;\n            }\n            if (paneIndicators.length === 0) {\n                _this._indicators.delete(indicator.paneId);\n            }\n        });\n        return removed;\n    };\n    StoreImp.prototype.hasIndicators = function(paneId) {\n        return this._indicators.has(paneId);\n    };\n    StoreImp.prototype._synchronizeIndicatorSeriesPrecision = function(indicator) {\n        var _a = this._precision, pricePrecision = _a.price, volumePrecision = _a.volume;\n        var synchronize = function(indicator) {\n            switch(indicator.series){\n                case IndicatorSeries.Price:\n                    {\n                        indicator.setSeriesPrecision(pricePrecision);\n                        break;\n                    }\n                case IndicatorSeries.Volume:\n                    {\n                        indicator.setSeriesPrecision(volumePrecision);\n                        break;\n                    }\n            }\n        };\n        if (isValid(indicator)) {\n            synchronize(indicator);\n        } else {\n            this._indicators.forEach(function(paneIndicators) {\n                paneIndicators.forEach(function(indicator) {\n                    synchronize(indicator);\n                });\n            });\n        }\n    };\n    StoreImp.prototype.overrideIndicator = function(override) {\n        var _this = this;\n        var updateFlag = false;\n        var sortFlag = false;\n        var filterIndicators = this.getIndicatorsByFilter(override);\n        filterIndicators.forEach(function(indicator) {\n            indicator.override(override);\n            var _a = indicator.shouldUpdateImp(), calc = _a.calc, draw = _a.draw, sort = _a.sort;\n            if (sort) {\n                sortFlag = true;\n            }\n            if (calc) {\n                _this._addIndicatorCalcTask(indicator, LoadDataType.Update);\n            } else {\n                if (draw) {\n                    updateFlag = true;\n                }\n            }\n        });\n        // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition -- ignore\n        if (sortFlag) {\n            this._sortIndicators();\n        }\n        // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition -- ignore\n        if (updateFlag) {\n            this._chart.layout({\n                update: true\n            });\n            return true;\n        }\n        return false;\n    };\n    StoreImp.prototype.getOverlaysByFilter = function(filter) {\n        var _a;\n        var id = filter.id, groupId = filter.groupId, paneId = filter.paneId, name = filter.name;\n        var match = function(overlay) {\n            if (isValid(id)) {\n                return overlay.id === id;\n            } else {\n                if (isValid(groupId)) {\n                    return overlay.groupId === groupId && (!isValid(name) || overlay.name === name);\n                }\n            }\n            return !isValid(name) || overlay.name === name;\n        };\n        var overlays = [];\n        if (isValid(paneId)) {\n            overlays = overlays.concat(this.getOverlaysByPaneId(paneId).filter(match));\n        } else {\n            this._overlays.forEach(function(paneOverlays) {\n                overlays = overlays.concat(paneOverlays.filter(match));\n            });\n        }\n        var progressOverlay = (_a = this._progressOverlayInfo) === null || _a === void 0 ? void 0 : _a.overlay;\n        if (isValid(progressOverlay) && match(progressOverlay)) {\n            overlays.push(progressOverlay);\n        }\n        return overlays;\n    };\n    StoreImp.prototype.getOverlaysByPaneId = function(paneId) {\n        var _a;\n        if (!isString(paneId)) {\n            var overlays_1 = [];\n            this._overlays.forEach(function(paneOverlays) {\n                overlays_1 = overlays_1.concat(paneOverlays);\n            });\n            return overlays_1;\n        }\n        return (_a = this._overlays.get(paneId)) !== null && _a !== void 0 ? _a : [];\n    };\n    StoreImp.prototype._sortOverlays = function(paneId) {\n        var _a;\n        if (isString(paneId)) {\n            (_a = this._overlays.get(paneId)) === null || _a === void 0 ? void 0 : _a.sort(function(o1, o2) {\n                return o1.zLevel - o2.zLevel;\n            });\n        } else {\n            this._overlays.forEach(function(paneOverlays) {\n                paneOverlays.sort(function(o1, o2) {\n                    return o1.zLevel - o2.zLevel;\n                });\n            });\n        }\n    };\n    StoreImp.prototype.addOverlays = function(os, appointPaneFlags) {\n        var _this = this;\n        var updatePaneIds = [];\n        var ids = os.map(function(create, index) {\n            var e_1, _a;\n            var _b, _c, _d, _e, _f, _g;\n            if (isValid(create.id)) {\n                var findOverlay = null;\n                try {\n                    for(var _h = __values(_this._overlays), _j = _h.next(); !_j.done; _j = _h.next()){\n                        var _k = __read(_j.value, 2), overlays = _k[1];\n                        var overlay = overlays.find(function(o) {\n                            return o.id === create.id;\n                        });\n                        if (isValid(overlay)) {\n                            findOverlay = overlay;\n                            break;\n                        }\n                    }\n                } catch (e_1_1) {\n                    e_1 = {\n                        error: e_1_1\n                    };\n                } finally{\n                    try {\n                        if (_j && !_j.done && (_a = _h.return)) _a.call(_h);\n                    } finally{\n                        if (e_1) throw e_1.error;\n                    }\n                }\n                if (isValid(findOverlay)) {\n                    return create.id;\n                }\n            }\n            var OverlayClazz = getOverlayInnerClass(create.name);\n            if (isValid(OverlayClazz)) {\n                var id = (_b = create.id) !== null && _b !== void 0 ? _b : createId(OVERLAY_ID_PREFIX);\n                var overlay = new OverlayClazz();\n                var paneId = (_c = create.paneId) !== null && _c !== void 0 ? _c : PaneIdConstants.CANDLE;\n                create.id = id;\n                (_d = create.groupId) !== null && _d !== void 0 ? _d : create.groupId = id;\n                var zLevel = _this.getOverlaysByPaneId(paneId).length;\n                (_e = create.zLevel) !== null && _e !== void 0 ? _e : create.zLevel = zLevel;\n                overlay.override(create);\n                if (!updatePaneIds.includes(paneId)) {\n                    updatePaneIds.push(paneId);\n                }\n                if (overlay.isDrawing()) {\n                    _this._progressOverlayInfo = {\n                        paneId: paneId,\n                        overlay: overlay,\n                        appointPaneFlag: appointPaneFlags[index]\n                    };\n                } else {\n                    if (!_this._overlays.has(paneId)) {\n                        _this._overlays.set(paneId, []);\n                    }\n                    (_f = _this._overlays.get(paneId)) === null || _f === void 0 ? void 0 : _f.push(overlay);\n                }\n                if (overlay.isStart()) {\n                    (_g = overlay.onDrawStart) === null || _g === void 0 ? void 0 : _g.call(overlay, {\n                        overlay: overlay,\n                        chart: _this._chart\n                    });\n                }\n                return id;\n            }\n            return null;\n        });\n        if (updatePaneIds.length > 0) {\n            this._sortOverlays();\n            updatePaneIds.forEach(function(paneId) {\n                _this._chart.updatePane(1 /* UpdateLevel.Overlay */ , paneId);\n            });\n            this._chart.updatePane(1 /* UpdateLevel.Overlay */ , PaneIdConstants.X_AXIS);\n        }\n        return ids;\n    };\n    StoreImp.prototype.getProgressOverlayInfo = function() {\n        return this._progressOverlayInfo;\n    };\n    StoreImp.prototype.progressOverlayComplete = function() {\n        var _a;\n        if (this._progressOverlayInfo !== null) {\n            var _b = this._progressOverlayInfo, overlay = _b.overlay, paneId = _b.paneId;\n            if (!overlay.isDrawing()) {\n                if (!this._overlays.has(paneId)) {\n                    this._overlays.set(paneId, []);\n                }\n                (_a = this._overlays.get(paneId)) === null || _a === void 0 ? void 0 : _a.push(overlay);\n                this._sortOverlays(paneId);\n                this._progressOverlayInfo = null;\n            }\n        }\n    };\n    StoreImp.prototype.updateProgressOverlayInfo = function(paneId, appointPaneFlag) {\n        if (this._progressOverlayInfo !== null) {\n            if (isBoolean(appointPaneFlag) && appointPaneFlag) {\n                this._progressOverlayInfo.appointPaneFlag = appointPaneFlag;\n            }\n            this._progressOverlayInfo.paneId = paneId;\n            this._progressOverlayInfo.overlay.override({\n                paneId: paneId\n            });\n        }\n    };\n    StoreImp.prototype.overrideOverlay = function(override) {\n        var _this = this;\n        var sortFlag = false;\n        var updatePaneIds = [];\n        var filterOverlays = this.getOverlaysByFilter(override);\n        filterOverlays.forEach(function(overlay) {\n            overlay.override(override);\n            var _a = overlay.shouldUpdate(), sort = _a.sort, draw = _a.draw;\n            if (sort) {\n                sortFlag = true;\n            }\n            if (sort || draw) {\n                if (!updatePaneIds.includes(overlay.paneId)) {\n                    updatePaneIds.push(overlay.paneId);\n                }\n            }\n        });\n        // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition -- ignore\n        if (sortFlag) {\n            this._sortOverlays();\n        }\n        if (updatePaneIds.length > 0) {\n            updatePaneIds.forEach(function(paneId) {\n                _this._chart.updatePane(1 /* UpdateLevel.Overlay */ , paneId);\n            });\n            this._chart.updatePane(1 /* UpdateLevel.Overlay */ , PaneIdConstants.X_AXIS);\n            return true;\n        }\n        return false;\n    };\n    StoreImp.prototype.removeOverlay = function(filter) {\n        var _this = this;\n        var updatePaneIds = [];\n        var filterOverlays = this.getOverlaysByFilter(filter);\n        filterOverlays.forEach(function(overlay) {\n            var _a;\n            var paneId = overlay.paneId;\n            var paneOverlays = _this.getOverlaysByPaneId(overlay.paneId);\n            (_a = overlay.onRemoved) === null || _a === void 0 ? void 0 : _a.call(overlay, {\n                overlay: overlay,\n                chart: _this._chart\n            });\n            if (!updatePaneIds.includes(paneId)) {\n                updatePaneIds.push(paneId);\n            }\n            if (overlay.isDrawing()) {\n                _this._progressOverlayInfo = null;\n            } else {\n                var index = paneOverlays.findIndex(function(o) {\n                    return o.id === overlay.id;\n                });\n                if (index > -1) {\n                    paneOverlays.splice(index, 1);\n                }\n            }\n            if (paneOverlays.length === 0) {\n                _this._overlays.delete(paneId);\n            }\n        });\n        if (updatePaneIds.length > 0) {\n            updatePaneIds.forEach(function(paneId) {\n                _this._chart.updatePane(1 /* UpdateLevel.Overlay */ , paneId);\n            });\n            this._chart.updatePane(1 /* UpdateLevel.Overlay */ , PaneIdConstants.X_AXIS);\n            return true;\n        }\n        return false;\n    };\n    StoreImp.prototype.setPressedOverlayInfo = function(info) {\n        this._pressedOverlayInfo = info;\n    };\n    StoreImp.prototype.getPressedOverlayInfo = function() {\n        return this._pressedOverlayInfo;\n    };\n    StoreImp.prototype.setHoverOverlayInfo = function(info, event) {\n        var _a;\n        var _b = this._hoverOverlayInfo, overlay = _b.overlay, figureType = _b.figureType, figureIndex = _b.figureIndex, figure = _b.figure;\n        var infoOverlay = info.overlay;\n        if ((overlay === null || overlay === void 0 ? void 0 : overlay.id) !== (infoOverlay === null || infoOverlay === void 0 ? void 0 : infoOverlay.id) || figureType !== info.figureType || figureIndex !== info.figureIndex) {\n            this._hoverOverlayInfo = info;\n            if ((overlay === null || overlay === void 0 ? void 0 : overlay.id) !== (infoOverlay === null || infoOverlay === void 0 ? void 0 : infoOverlay.id)) {\n                var ignoreUpdateFlag = false;\n                var sortFlag = false;\n                if (overlay !== null) {\n                    overlay.override({\n                        zLevel: overlay.getPrevZLevel()\n                    });\n                    sortFlag = true;\n                    if (isFunction(overlay.onMouseLeave) && checkOverlayFigureEvent(\"onMouseLeave\", figure)) {\n                        overlay.onMouseLeave(__assign({\n                            chart: this._chart,\n                            overlay: overlay,\n                            figure: figure !== null && figure !== void 0 ? figure : undefined\n                        }, event));\n                        ignoreUpdateFlag = true;\n                    }\n                }\n                if (infoOverlay !== null) {\n                    infoOverlay.setPrevZLevel(infoOverlay.zLevel);\n                    infoOverlay.override({\n                        zLevel: Number.MAX_SAFE_INTEGER\n                    });\n                    sortFlag = true;\n                    if (isFunction(infoOverlay.onMouseEnter) && checkOverlayFigureEvent(\"onMouseEnter\", info.figure)) {\n                        infoOverlay.onMouseEnter(__assign({\n                            chart: this._chart,\n                            overlay: infoOverlay,\n                            figure: (_a = info.figure) !== null && _a !== void 0 ? _a : undefined\n                        }, event));\n                        ignoreUpdateFlag = true;\n                    }\n                }\n                if (sortFlag) {\n                    this._sortOverlays();\n                }\n                if (!ignoreUpdateFlag) {\n                    this._chart.updatePane(1 /* UpdateLevel.Overlay */ );\n                }\n            }\n        }\n    };\n    StoreImp.prototype.getHoverOverlayInfo = function() {\n        return this._hoverOverlayInfo;\n    };\n    StoreImp.prototype.setClickOverlayInfo = function(info, event) {\n        var _a, _b, _c, _d, _e, _f;\n        var _g = this._clickOverlayInfo, paneId = _g.paneId, overlay = _g.overlay, figureType = _g.figureType, figure = _g.figure, figureIndex = _g.figureIndex;\n        var infoOverlay = info.overlay;\n        if (!((_a = infoOverlay === null || infoOverlay === void 0 ? void 0 : infoOverlay.isDrawing()) !== null && _a !== void 0 ? _a : false) && checkOverlayFigureEvent(\"onClick\", info.figure)) {\n            (_b = infoOverlay === null || infoOverlay === void 0 ? void 0 : infoOverlay.onClick) === null || _b === void 0 ? void 0 : _b.call(infoOverlay, __assign({\n                chart: this._chart,\n                overlay: infoOverlay,\n                figure: (_c = info.figure) !== null && _c !== void 0 ? _c : undefined\n            }, event));\n        }\n        if ((overlay === null || overlay === void 0 ? void 0 : overlay.id) !== (infoOverlay === null || infoOverlay === void 0 ? void 0 : infoOverlay.id) || figureType !== info.figureType || figureIndex !== info.figureIndex) {\n            this._clickOverlayInfo = info;\n            if ((overlay === null || overlay === void 0 ? void 0 : overlay.id) !== (infoOverlay === null || infoOverlay === void 0 ? void 0 : infoOverlay.id)) {\n                if (checkOverlayFigureEvent(\"onDeselected\", figure)) {\n                    (_d = overlay === null || overlay === void 0 ? void 0 : overlay.onDeselected) === null || _d === void 0 ? void 0 : _d.call(overlay, __assign({\n                        chart: this._chart,\n                        overlay: overlay,\n                        figure: figure !== null && figure !== void 0 ? figure : undefined\n                    }, event));\n                }\n                if (checkOverlayFigureEvent(\"onSelected\", info.figure)) {\n                    (_e = infoOverlay === null || infoOverlay === void 0 ? void 0 : infoOverlay.onSelected) === null || _e === void 0 ? void 0 : _e.call(infoOverlay, __assign({\n                        chart: this._chart,\n                        overlay: infoOverlay,\n                        figure: (_f = info.figure) !== null && _f !== void 0 ? _f : undefined\n                    }, event));\n                }\n                this._chart.updatePane(1 /* UpdateLevel.Overlay */ , info.paneId);\n                if (paneId !== info.paneId) {\n                    this._chart.updatePane(1 /* UpdateLevel.Overlay */ , paneId);\n                }\n                this._chart.updatePane(1 /* UpdateLevel.Overlay */ , PaneIdConstants.X_AXIS);\n            }\n        }\n    };\n    StoreImp.prototype.getClickOverlayInfo = function() {\n        return this._clickOverlayInfo;\n    };\n    StoreImp.prototype.isOverlayEmpty = function() {\n        return this._overlays.size === 0 && this._progressOverlayInfo === null;\n    };\n    StoreImp.prototype.isOverlayDrawing = function() {\n        var _a, _b;\n        return (_b = (_a = this._progressOverlayInfo) === null || _a === void 0 ? void 0 : _a.overlay.isDrawing()) !== null && _b !== void 0 ? _b : false;\n    };\n    StoreImp.prototype.clearData = function() {\n        this._loadDataMore.backward = false;\n        this._loadDataMore.forward = false;\n        this._loading = true;\n        this._dataList = [];\n        this._visibleRangeDataList = [];\n        this._visibleRangeHighLowPrice = [\n            {\n                x: 0,\n                price: Number.MIN_SAFE_INTEGER\n            },\n            {\n                x: 0,\n                price: Number.MAX_SAFE_INTEGER\n            }\n        ];\n        this._visibleRange = getDefaultVisibleRange();\n        this._timeWeightTickMap.clear();\n        this._timeWeightTickList = [];\n        this._crosshair = {};\n        this._activeTooltipFeatureInfo = null;\n    };\n    StoreImp.prototype.getChart = function() {\n        return this._chart;\n    };\n    return StoreImp;\n}();\n/**\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n\n * http://www.apache.org/licenses/LICENSE-2.0\n\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ var WidgetNameConstants = {\n    MAIN: \"main\",\n    X_AXIS: \"xAxis\",\n    Y_AXIS: \"yAxis\",\n    SEPARATOR: \"separator\"\n};\nvar REAL_SEPARATOR_HEIGHT = 7;\n/**\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n\n * http://www.apache.org/licenses/LICENSE-2.0\n\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ function isSupportedDevicePixelContentBox() {\n    return __awaiter(this, void 0, void 0, function() {\n        return __generator(this, function(_a) {\n            switch(_a.label){\n                case 0:\n                    return [\n                        4 /*yield*/ ,\n                        new Promise(function(resolve) {\n                            var ro = new ResizeObserver(function(entries) {\n                                resolve(entries.every(function(entry) {\n                                    return \"devicePixelContentBoxSize\" in entry;\n                                }));\n                                ro.disconnect();\n                            });\n                            ro.observe(document.body, {\n                                box: \"device-pixel-content-box\"\n                            });\n                        }).catch(function() {\n                            return false;\n                        })\n                    ];\n                case 1:\n                    // eslint-disable-next-line promise/avoid-new -- ignore\n                    return [\n                        2 /*return*/ ,\n                        _a.sent()\n                    ];\n            }\n        });\n    });\n}\nvar Canvas = /** @class */ function() {\n    function Canvas(style, listener) {\n        var _this = this;\n        this._supportedDevicePixelContentBox = false;\n        this._width = 0;\n        this._height = 0;\n        this._pixelWidth = 0;\n        this._pixelHeight = 0;\n        this._nextPixelWidth = 0;\n        this._nextPixelHeight = 0;\n        this._requestAnimationId = DEFAULT_REQUEST_ID;\n        this._mediaQueryListener = function() {\n            var pixelRatio = getPixelRatio(_this._element);\n            _this._nextPixelWidth = Math.round(_this._element.clientWidth * pixelRatio);\n            _this._nextPixelHeight = Math.round(_this._element.clientHeight * pixelRatio);\n            _this._resetPixelRatio();\n        };\n        this._listener = listener;\n        this._element = createDom(\"canvas\", style);\n        this._ctx = this._element.getContext(\"2d\");\n        isSupportedDevicePixelContentBox().then(function(result) {\n            _this._supportedDevicePixelContentBox = result;\n            if (result) {\n                _this._resizeObserver = new ResizeObserver(function(entries) {\n                    var entry = entries.find(function(entry) {\n                        return entry.target === _this._element;\n                    });\n                    var size = entry === null || entry === void 0 ? void 0 : entry.devicePixelContentBoxSize[0];\n                    if (isValid(size)) {\n                        _this._nextPixelWidth = size.inlineSize;\n                        _this._nextPixelHeight = size.blockSize;\n                        if (_this._pixelWidth !== _this._nextPixelWidth || _this._pixelHeight !== _this._nextPixelHeight) {\n                            _this._resetPixelRatio();\n                        }\n                    }\n                });\n                _this._resizeObserver.observe(_this._element, {\n                    box: \"device-pixel-content-box\"\n                });\n            } else {\n                _this._mediaQueryList = window.matchMedia(\"(resolution: \".concat(getPixelRatio(_this._element), \"dppx)\"));\n                // eslint-disable-next-line @typescript-eslint/no-deprecated -- ignore\n                _this._mediaQueryList.addListener(_this._mediaQueryListener);\n            }\n        }).catch(function(_) {\n            return false;\n        });\n    }\n    Canvas.prototype._resetPixelRatio = function() {\n        var _this = this;\n        this._executeListener(function() {\n            var width = _this._element.clientWidth;\n            var height = _this._element.clientHeight;\n            _this._width = width;\n            _this._height = height;\n            _this._pixelWidth = _this._nextPixelWidth;\n            _this._pixelHeight = _this._nextPixelHeight;\n            _this._element.width = _this._nextPixelWidth;\n            _this._element.height = _this._nextPixelHeight;\n            var horizontalPixelRatio = _this._nextPixelWidth / width;\n            var verticalPixelRatio = _this._nextPixelHeight / height;\n            _this._ctx.scale(horizontalPixelRatio, verticalPixelRatio);\n        });\n    };\n    Canvas.prototype._executeListener = function(fn) {\n        var _this = this;\n        if (this._requestAnimationId === DEFAULT_REQUEST_ID) {\n            this._requestAnimationId = requestAnimationFrame(function() {\n                _this._ctx.clearRect(0, 0, _this._width, _this._height);\n                fn === null || fn === void 0 ? void 0 : fn();\n                _this._listener();\n                _this._requestAnimationId = DEFAULT_REQUEST_ID;\n            });\n        }\n    };\n    Canvas.prototype.update = function(w, h) {\n        if (this._width !== w || this._height !== h) {\n            this._element.style.width = \"\".concat(w, \"px\");\n            this._element.style.height = \"\".concat(h, \"px\");\n            if (!this._supportedDevicePixelContentBox) {\n                var pixelRatio = getPixelRatio(this._element);\n                this._nextPixelWidth = Math.round(w * pixelRatio);\n                this._nextPixelHeight = Math.round(h * pixelRatio);\n                this._resetPixelRatio();\n            }\n        } else {\n            this._executeListener();\n        }\n    };\n    Canvas.prototype.getElement = function() {\n        return this._element;\n    };\n    Canvas.prototype.getContext = function() {\n        return this._ctx;\n    };\n    Canvas.prototype.destroy = function() {\n        if (isValid(this._resizeObserver)) {\n            this._resizeObserver.unobserve(this._element);\n        }\n        if (isValid(this._mediaQueryList)) {\n            // eslint-disable-next-line @typescript-eslint/no-deprecated -- ignore\n            this._mediaQueryList.removeListener(this._mediaQueryListener);\n        }\n    };\n    return Canvas;\n}();\n/**\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n\n * http://www.apache.org/licenses/LICENSE-2.0\n\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ var Widget = /** @class */ function(_super) {\n    __extends(Widget, _super);\n    function Widget(rootContainer, pane) {\n        var _this = _super.call(this) || this;\n        _this._bounding = createDefaultBounding();\n        _this._pane = pane;\n        _this._rootContainer = rootContainer;\n        _this._container = _this.createContainer();\n        rootContainer.appendChild(_this._container);\n        return _this;\n    }\n    Widget.prototype.setBounding = function(bounding) {\n        merge(this._bounding, bounding);\n        return this;\n    };\n    Widget.prototype.getContainer = function() {\n        return this._container;\n    };\n    Widget.prototype.getBounding = function() {\n        return this._bounding;\n    };\n    Widget.prototype.getPane = function() {\n        return this._pane;\n    };\n    Widget.prototype.update = function(level) {\n        this.updateImp(this._container, this._bounding, level !== null && level !== void 0 ? level : 3 /* UpdateLevel.Drawer */ );\n    };\n    Widget.prototype.destroy = function() {\n        this._rootContainer.removeChild(this._container);\n    };\n    return Widget;\n}(Eventful);\n/**\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n\n * http://www.apache.org/licenses/LICENSE-2.0\n\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ var DrawWidget = /** @class */ function(_super) {\n    __extends(DrawWidget, _super);\n    function DrawWidget(rootContainer, pane) {\n        var _this = _super.call(this, rootContainer, pane) || this;\n        _this._mainCanvas = new Canvas({\n            position: \"absolute\",\n            top: \"0\",\n            left: \"0\",\n            zIndex: \"2\",\n            boxSizing: \"border-box\"\n        }, function() {\n            _this.updateMain(_this._mainCanvas.getContext());\n        });\n        _this._overlayCanvas = new Canvas({\n            position: \"absolute\",\n            top: \"0\",\n            left: \"0\",\n            zIndex: \"2\",\n            boxSizing: \"border-box\"\n        }, function() {\n            _this.updateOverlay(_this._overlayCanvas.getContext());\n        });\n        var container = _this.getContainer();\n        container.appendChild(_this._mainCanvas.getElement());\n        container.appendChild(_this._overlayCanvas.getElement());\n        return _this;\n    }\n    DrawWidget.prototype.createContainer = function() {\n        return createDom(\"div\", {\n            margin: \"0\",\n            padding: \"0\",\n            position: \"absolute\",\n            top: \"0\",\n            overflow: \"hidden\",\n            boxSizing: \"border-box\",\n            zIndex: \"1\"\n        });\n    };\n    DrawWidget.prototype.updateImp = function(container, bounding, level) {\n        var width = bounding.width, height = bounding.height, left = bounding.left;\n        container.style.left = \"\".concat(left, \"px\");\n        var l = level;\n        var w = container.clientWidth;\n        var h = container.clientHeight;\n        if (width !== w || height !== h) {\n            container.style.width = \"\".concat(width, \"px\");\n            container.style.height = \"\".concat(height, \"px\");\n            l = 3 /* UpdateLevel.Drawer */ ;\n        }\n        switch(l){\n            case 0 /* UpdateLevel.Main */ :\n                {\n                    this._mainCanvas.update(width, height);\n                    break;\n                }\n            case 1 /* UpdateLevel.Overlay */ :\n                {\n                    this._overlayCanvas.update(width, height);\n                    break;\n                }\n            case 3 /* UpdateLevel.Drawer */ :\n            case 4 /* UpdateLevel.All */ :\n                {\n                    this._mainCanvas.update(width, height);\n                    this._overlayCanvas.update(width, height);\n                    break;\n                }\n        }\n    };\n    DrawWidget.prototype.destroy = function() {\n        this._mainCanvas.destroy();\n        this._overlayCanvas.destroy();\n    };\n    DrawWidget.prototype.getImage = function(includeOverlay) {\n        var _a = this.getBounding(), width = _a.width, height = _a.height;\n        var canvas = createDom(\"canvas\", {\n            width: \"\".concat(width, \"px\"),\n            height: \"\".concat(height, \"px\"),\n            boxSizing: \"border-box\"\n        });\n        var ctx = canvas.getContext(\"2d\");\n        var pixelRatio = getPixelRatio(canvas);\n        canvas.width = width * pixelRatio;\n        canvas.height = height * pixelRatio;\n        ctx.scale(pixelRatio, pixelRatio);\n        ctx.drawImage(this._mainCanvas.getElement(), 0, 0, width, height);\n        if (includeOverlay) {\n            ctx.drawImage(this._overlayCanvas.getElement(), 0, 0, width, height);\n        }\n        return canvas;\n    };\n    return DrawWidget;\n}(Widget);\n/**\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n\n * http://www.apache.org/licenses/LICENSE-2.0\n\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ function checkCoordinateOnCircle(coordinate, attrs) {\n    var e_1, _a;\n    var circles = [];\n    circles = circles.concat(attrs);\n    try {\n        for(var circles_1 = __values(circles), circles_1_1 = circles_1.next(); !circles_1_1.done; circles_1_1 = circles_1.next()){\n            var circle_1 = circles_1_1.value;\n            var x = circle_1.x, y = circle_1.y, r = circle_1.r;\n            var difX = coordinate.x - x;\n            var difY = coordinate.y - y;\n            if (!(difX * difX + difY * difY > r * r)) {\n                return true;\n            }\n        }\n    } catch (e_1_1) {\n        e_1 = {\n            error: e_1_1\n        };\n    } finally{\n        try {\n            if (circles_1_1 && !circles_1_1.done && (_a = circles_1.return)) _a.call(circles_1);\n        } finally{\n            if (e_1) throw e_1.error;\n        }\n    }\n    return false;\n}\nfunction drawCircle(ctx, attrs, styles) {\n    var circles = [];\n    circles = circles.concat(attrs);\n    var _a = styles.style, style = _a === void 0 ? PolygonType.Fill : _a, _b = styles.color, color = _b === void 0 ? \"currentColor\" : _b, _c = styles.borderSize, borderSize = _c === void 0 ? 1 : _c, _d = styles.borderColor, borderColor = _d === void 0 ? \"currentColor\" : _d, _e = styles.borderStyle, borderStyle = _e === void 0 ? LineType.Solid : _e, _f = styles.borderDashedValue, borderDashedValue = _f === void 0 ? [\n        2,\n        2\n    ] : _f;\n    var solid = (style === PolygonType.Fill || styles.style === PolygonType.StrokeFill) && (!isString(color) || !isTransparent(color));\n    if (solid) {\n        ctx.fillStyle = color;\n        circles.forEach(function(_a) {\n            var x = _a.x, y = _a.y, r = _a.r;\n            ctx.beginPath();\n            ctx.arc(x, y, r, 0, Math.PI * 2);\n            ctx.closePath();\n            ctx.fill();\n        });\n    }\n    if ((style === PolygonType.Stroke || styles.style === PolygonType.StrokeFill) && borderSize > 0 && !isTransparent(borderColor)) {\n        ctx.strokeStyle = borderColor;\n        ctx.lineWidth = borderSize;\n        if (borderStyle === LineType.Dashed) {\n            ctx.setLineDash(borderDashedValue);\n        } else {\n            ctx.setLineDash([]);\n        }\n        circles.forEach(function(_a) {\n            var x = _a.x, y = _a.y, r = _a.r;\n            if (!solid || r > borderSize) {\n                ctx.beginPath();\n                ctx.arc(x, y, r, 0, Math.PI * 2);\n                ctx.closePath();\n                ctx.stroke();\n            }\n        });\n    }\n}\nvar circle = {\n    name: \"circle\",\n    checkEventOn: checkCoordinateOnCircle,\n    draw: function(ctx, attrs, styles) {\n        drawCircle(ctx, attrs, styles);\n    }\n};\n/**\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n\n * http://www.apache.org/licenses/LICENSE-2.0\n\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ function checkCoordinateOnPolygon(coordinate, attrs) {\n    var e_1, _a;\n    var polygons = [];\n    polygons = polygons.concat(attrs);\n    try {\n        for(var polygons_1 = __values(polygons), polygons_1_1 = polygons_1.next(); !polygons_1_1.done; polygons_1_1 = polygons_1.next()){\n            var polygon_1 = polygons_1_1.value;\n            var on = false;\n            var coordinates = polygon_1.coordinates;\n            for(var i = 0, j = coordinates.length - 1; i < coordinates.length; j = i++){\n                if (coordinates[i].y > coordinate.y !== coordinates[j].y > coordinate.y && coordinate.x < (coordinates[j].x - coordinates[i].x) * (coordinate.y - coordinates[i].y) / (coordinates[j].y - coordinates[i].y) + coordinates[i].x) {\n                    on = !on;\n                }\n            }\n            if (on) {\n                return true;\n            }\n        }\n    } catch (e_1_1) {\n        e_1 = {\n            error: e_1_1\n        };\n    } finally{\n        try {\n            if (polygons_1_1 && !polygons_1_1.done && (_a = polygons_1.return)) _a.call(polygons_1);\n        } finally{\n            if (e_1) throw e_1.error;\n        }\n    }\n    return false;\n}\nfunction drawPolygon(ctx, attrs, styles) {\n    var polygons = [];\n    polygons = polygons.concat(attrs);\n    var _a = styles.style, style = _a === void 0 ? PolygonType.Fill : _a, _b = styles.color, color = _b === void 0 ? \"currentColor\" : _b, _c = styles.borderSize, borderSize = _c === void 0 ? 1 : _c, _d = styles.borderColor, borderColor = _d === void 0 ? \"currentColor\" : _d, _e = styles.borderStyle, borderStyle = _e === void 0 ? LineType.Solid : _e, _f = styles.borderDashedValue, borderDashedValue = _f === void 0 ? [\n        2,\n        2\n    ] : _f;\n    if ((style === PolygonType.Fill || styles.style === PolygonType.StrokeFill) && (!isString(color) || !isTransparent(color))) {\n        ctx.fillStyle = color;\n        polygons.forEach(function(_a) {\n            var coordinates = _a.coordinates;\n            ctx.beginPath();\n            ctx.moveTo(coordinates[0].x, coordinates[0].y);\n            for(var i = 1; i < coordinates.length; i++){\n                ctx.lineTo(coordinates[i].x, coordinates[i].y);\n            }\n            ctx.closePath();\n            ctx.fill();\n        });\n    }\n    if ((style === PolygonType.Stroke || styles.style === PolygonType.StrokeFill) && borderSize > 0 && !isTransparent(borderColor)) {\n        ctx.strokeStyle = borderColor;\n        ctx.lineWidth = borderSize;\n        if (borderStyle === LineType.Dashed) {\n            ctx.setLineDash(borderDashedValue);\n        } else {\n            ctx.setLineDash([]);\n        }\n        polygons.forEach(function(_a) {\n            var coordinates = _a.coordinates;\n            ctx.beginPath();\n            ctx.moveTo(coordinates[0].x, coordinates[0].y);\n            for(var i = 1; i < coordinates.length; i++){\n                ctx.lineTo(coordinates[i].x, coordinates[i].y);\n            }\n            ctx.closePath();\n            ctx.stroke();\n        });\n    }\n}\nvar polygon = {\n    name: \"polygon\",\n    checkEventOn: checkCoordinateOnPolygon,\n    draw: function(ctx, attrs, styles) {\n        drawPolygon(ctx, attrs, styles);\n    }\n};\n/**\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n\n * http://www.apache.org/licenses/LICENSE-2.0\n\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ function checkCoordinateOnRect(coordinate, attrs) {\n    var e_1, _a;\n    var rects = [];\n    rects = rects.concat(attrs);\n    try {\n        for(var rects_1 = __values(rects), rects_1_1 = rects_1.next(); !rects_1_1.done; rects_1_1 = rects_1.next()){\n            var rect_1 = rects_1_1.value;\n            var x = rect_1.x;\n            var width = rect_1.width;\n            if (width < DEVIATION * 2) {\n                x -= DEVIATION;\n                width = DEVIATION * 2;\n            }\n            var y = rect_1.y;\n            var height = rect_1.height;\n            if (height < DEVIATION * 2) {\n                y -= DEVIATION;\n                height = DEVIATION * 2;\n            }\n            if (coordinate.x >= x && coordinate.x <= x + width && coordinate.y >= y && coordinate.y <= y + height) {\n                return true;\n            }\n        }\n    } catch (e_1_1) {\n        e_1 = {\n            error: e_1_1\n        };\n    } finally{\n        try {\n            if (rects_1_1 && !rects_1_1.done && (_a = rects_1.return)) _a.call(rects_1);\n        } finally{\n            if (e_1) throw e_1.error;\n        }\n    }\n    return false;\n}\nfunction drawRect(ctx, attrs, styles) {\n    var _a;\n    var rects = [];\n    rects = rects.concat(attrs);\n    var _b = styles.style, style = _b === void 0 ? PolygonType.Fill : _b, _c = styles.color, color = _c === void 0 ? \"transparent\" : _c, _d = styles.borderSize, borderSize = _d === void 0 ? 1 : _d, _e = styles.borderColor, borderColor = _e === void 0 ? \"transparent\" : _e, _f = styles.borderStyle, borderStyle = _f === void 0 ? LineType.Solid : _f, _g = styles.borderRadius, r = _g === void 0 ? 0 : _g, _h = styles.borderDashedValue, borderDashedValue = _h === void 0 ? [\n        2,\n        2\n    ] : _h;\n    // eslint-disable-next-line @typescript-eslint/unbound-method, @typescript-eslint/no-unnecessary-condition -- ignore\n    var draw = (_a = ctx.roundRect) !== null && _a !== void 0 ? _a : ctx.rect;\n    var solid = (style === PolygonType.Fill || styles.style === PolygonType.StrokeFill) && (!isString(color) || !isTransparent(color));\n    if (solid) {\n        ctx.fillStyle = color;\n        rects.forEach(function(_a) {\n            var x = _a.x, y = _a.y, w = _a.width, h = _a.height;\n            ctx.beginPath();\n            draw.call(ctx, x, y, w, h, r);\n            ctx.closePath();\n            ctx.fill();\n        });\n    }\n    if ((style === PolygonType.Stroke || styles.style === PolygonType.StrokeFill) && borderSize > 0 && !isTransparent(borderColor)) {\n        ctx.strokeStyle = borderColor;\n        ctx.fillStyle = borderColor;\n        ctx.lineWidth = borderSize;\n        if (borderStyle === LineType.Dashed) {\n            ctx.setLineDash(borderDashedValue);\n        } else {\n            ctx.setLineDash([]);\n        }\n        var correction_1 = borderSize % 2 === 1 ? 0.5 : 0;\n        var doubleCorrection_1 = Math.round(correction_1 * 2);\n        rects.forEach(function(_a) {\n            var x = _a.x, y = _a.y, w = _a.width, h = _a.height;\n            if (w > borderSize * 2 && h > borderSize * 2) {\n                ctx.beginPath();\n                draw.call(ctx, x + correction_1, y + correction_1, w - doubleCorrection_1, h - doubleCorrection_1, r);\n                ctx.closePath();\n                ctx.stroke();\n            } else {\n                if (!solid) {\n                    ctx.fillRect(x, y, w, h);\n                }\n            }\n        });\n    }\n}\nvar rect = {\n    name: \"rect\",\n    checkEventOn: checkCoordinateOnRect,\n    draw: function(ctx, attrs, styles) {\n        drawRect(ctx, attrs, styles);\n    }\n};\n/**\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n\n * http://www.apache.org/licenses/LICENSE-2.0\n\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ function getTextRect(attrs, styles) {\n    var _a = styles.size, size = _a === void 0 ? 12 : _a, _b = styles.paddingLeft, paddingLeft = _b === void 0 ? 0 : _b, _c = styles.paddingTop, paddingTop = _c === void 0 ? 0 : _c, _d = styles.paddingRight, paddingRight = _d === void 0 ? 0 : _d, _e = styles.paddingBottom, paddingBottom = _e === void 0 ? 0 : _e, _f = styles.weight, weight = _f === void 0 ? \"normal\" : _f, family = styles.family;\n    var x = attrs.x, y = attrs.y, text = attrs.text, _g = attrs.align, align = _g === void 0 ? \"left\" : _g, _h = attrs.baseline, baseline = _h === void 0 ? \"top\" : _h, w = attrs.width, h = attrs.height;\n    var width = w !== null && w !== void 0 ? w : paddingLeft + calcTextWidth(text, size, weight, family) + paddingRight;\n    var height = h !== null && h !== void 0 ? h : paddingTop + size + paddingBottom;\n    var startX = 0;\n    switch(align){\n        case \"left\":\n        case \"start\":\n            {\n                startX = x;\n                break;\n            }\n        case \"right\":\n        case \"end\":\n            {\n                startX = x - width;\n                break;\n            }\n        default:\n            {\n                startX = x - width / 2;\n                break;\n            }\n    }\n    var startY = 0;\n    switch(baseline){\n        case \"top\":\n        case \"hanging\":\n            {\n                startY = y;\n                break;\n            }\n        case \"bottom\":\n        case \"ideographic\":\n        case \"alphabetic\":\n            {\n                startY = y - height;\n                break;\n            }\n        default:\n            {\n                startY = y - height / 2;\n                break;\n            }\n    }\n    return {\n        x: startX,\n        y: startY,\n        width: width,\n        height: height\n    };\n}\nfunction checkCoordinateOnText(coordinate, attrs, styles) {\n    var e_1, _a;\n    var texts = [];\n    texts = texts.concat(attrs);\n    try {\n        for(var texts_1 = __values(texts), texts_1_1 = texts_1.next(); !texts_1_1.done; texts_1_1 = texts_1.next()){\n            var text_1 = texts_1_1.value;\n            var _b = getTextRect(text_1, styles), x = _b.x, y = _b.y, width = _b.width, height = _b.height;\n            if (coordinate.x >= x && coordinate.x <= x + width && coordinate.y >= y && coordinate.y <= y + height) {\n                return true;\n            }\n        }\n    } catch (e_1_1) {\n        e_1 = {\n            error: e_1_1\n        };\n    } finally{\n        try {\n            if (texts_1_1 && !texts_1_1.done && (_a = texts_1.return)) _a.call(texts_1);\n        } finally{\n            if (e_1) throw e_1.error;\n        }\n    }\n    return false;\n}\nfunction drawText(ctx, attrs, styles) {\n    var texts = [];\n    texts = texts.concat(attrs);\n    var _a = styles.color, color = _a === void 0 ? \"currentColor\" : _a, _b = styles.size, size = _b === void 0 ? 12 : _b, family = styles.family, weight = styles.weight, _c = styles.paddingLeft, paddingLeft = _c === void 0 ? 0 : _c, _d = styles.paddingTop, paddingTop = _d === void 0 ? 0 : _d, _e = styles.paddingRight, paddingRight = _e === void 0 ? 0 : _e;\n    var rects = texts.map(function(text) {\n        return getTextRect(text, styles);\n    });\n    drawRect(ctx, rects, __assign(__assign({}, styles), {\n        color: styles.backgroundColor\n    }));\n    ctx.textAlign = \"left\";\n    ctx.textBaseline = \"top\";\n    ctx.font = createFont(size, weight, family);\n    ctx.fillStyle = color;\n    texts.forEach(function(text, index) {\n        var rect = rects[index];\n        ctx.fillText(text.text, rect.x + paddingLeft, rect.y + paddingTop, rect.width - paddingLeft - paddingRight);\n    });\n}\nvar text = {\n    name: \"text\",\n    checkEventOn: checkCoordinateOnText,\n    draw: function(ctx, attrs, styles) {\n        drawText(ctx, attrs, styles);\n    }\n};\n/**\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n\n * http://www.apache.org/licenses/LICENSE-2.0\n\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ function getDistance(coordinate1, coordinate2) {\n    var xDif = coordinate1.x - coordinate2.x;\n    var yDif = coordinate1.y - coordinate2.y;\n    return Math.sqrt(xDif * xDif + yDif * yDif);\n}\n/**\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n\n * http://www.apache.org/licenses/LICENSE-2.0\n\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ function checkCoordinateOnArc(coordinate, attrs) {\n    var e_1, _a;\n    var arcs = [];\n    arcs = arcs.concat(attrs);\n    try {\n        for(var arcs_1 = __values(arcs), arcs_1_1 = arcs_1.next(); !arcs_1_1.done; arcs_1_1 = arcs_1.next()){\n            var arc_1 = arcs_1_1.value;\n            if (Math.abs(getDistance(coordinate, arc_1) - arc_1.r) < DEVIATION) {\n                var r = arc_1.r, startAngle = arc_1.startAngle, endAngle = arc_1.endAngle;\n                var startCoordinateX = r * Math.cos(startAngle) + arc_1.x;\n                var startCoordinateY = r * Math.sin(startAngle) + arc_1.y;\n                var endCoordinateX = r * Math.cos(endAngle) + arc_1.x;\n                var endCoordinateY = r * Math.sin(endAngle) + arc_1.y;\n                if (coordinate.x <= Math.max(startCoordinateX, endCoordinateX) + DEVIATION && coordinate.x >= Math.min(startCoordinateX, endCoordinateX) - DEVIATION && coordinate.y <= Math.max(startCoordinateY, endCoordinateY) + DEVIATION && coordinate.y >= Math.min(startCoordinateY, endCoordinateY) - DEVIATION) {\n                    return true;\n                }\n            }\n        }\n    } catch (e_1_1) {\n        e_1 = {\n            error: e_1_1\n        };\n    } finally{\n        try {\n            if (arcs_1_1 && !arcs_1_1.done && (_a = arcs_1.return)) _a.call(arcs_1);\n        } finally{\n            if (e_1) throw e_1.error;\n        }\n    }\n    return false;\n}\nfunction drawArc(ctx, attrs, styles) {\n    var arcs = [];\n    arcs = arcs.concat(attrs);\n    var _a = styles.style, style = _a === void 0 ? LineType.Solid : _a, _b = styles.size, size = _b === void 0 ? 1 : _b, _c = styles.color, color = _c === void 0 ? \"currentColor\" : _c, _d = styles.dashedValue, dashedValue = _d === void 0 ? [\n        2,\n        2\n    ] : _d;\n    ctx.lineWidth = size;\n    ctx.strokeStyle = color;\n    if (style === LineType.Dashed) {\n        ctx.setLineDash(dashedValue);\n    } else {\n        ctx.setLineDash([]);\n    }\n    arcs.forEach(function(_a) {\n        var x = _a.x, y = _a.y, r = _a.r, startAngle = _a.startAngle, endAngle = _a.endAngle;\n        ctx.beginPath();\n        ctx.arc(x, y, r, startAngle, endAngle);\n        ctx.stroke();\n        ctx.closePath();\n    });\n}\nvar arc = {\n    name: \"arc\",\n    checkEventOn: checkCoordinateOnArc,\n    draw: function(ctx, attrs, styles) {\n        drawArc(ctx, attrs, styles);\n    }\n};\n/**\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n\n * http://www.apache.org/licenses/LICENSE-2.0\n\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ function drawEllipticalArc(ctx, x1, y1, args, offsetX, offsetY, isRelative) {\n    var _a = __read(args, 7), rx = _a[0], ry = _a[1], rotation = _a[2], largeArcFlag = _a[3], sweepFlag = _a[4], x2 = _a[5], y2 = _a[6];\n    var targetX = isRelative ? x1 + x2 : x2 + offsetX;\n    var targetY = isRelative ? y1 + y2 : y2 + offsetY;\n    var segments = ellipticalArcToBeziers(x1, y1, rx, ry, rotation, largeArcFlag, sweepFlag, targetX, targetY);\n    segments.forEach(function(segment) {\n        ctx.bezierCurveTo(segment[0], segment[1], segment[2], segment[3], segment[4], segment[5]);\n    });\n}\nfunction ellipticalArcToBeziers(x1, y1, rx, ry, rotation, largeArcFlag, sweepFlag, x2, y2) {\n    var _a = computeEllipticalArcParameters(x1, y1, rx, ry, rotation, largeArcFlag, sweepFlag, x2, y2), cx = _a.cx, cy = _a.cy, startAngle = _a.startAngle, deltaAngle = _a.deltaAngle;\n    var segments = [];\n    var numSegments = Math.ceil(Math.abs(deltaAngle) / (Math.PI / 2));\n    for(var i = 0; i < numSegments; i++){\n        var start = startAngle + i * deltaAngle / numSegments;\n        var end = startAngle + (i + 1) * deltaAngle / numSegments;\n        var bezier = ellipticalArcToBezier(cx, cy, rx, ry, rotation, start, end);\n        segments.push(bezier);\n    }\n    return segments;\n}\nfunction computeEllipticalArcParameters(x1, y1, rx, ry, rotation, largeArcFlag, sweepFlag, x2, y2) {\n    var phi = rotation * Math.PI / 180;\n    var dx = (x1 - x2) / 2;\n    var dy = (y1 - y2) / 2;\n    var x1p = Math.cos(phi) * dx + Math.sin(phi) * dy;\n    var y1p = -Math.sin(phi) * dx + Math.cos(phi) * dy;\n    var lambda = Math.pow(x1p, 2) / Math.pow(rx, 2) + Math.pow(y1p, 2) / Math.pow(ry, 2);\n    if (lambda > 1) {\n        rx *= Math.sqrt(lambda);\n        ry *= Math.sqrt(lambda);\n    }\n    var sign = largeArcFlag === sweepFlag ? -1 : 1;\n    var numerator = Math.pow(rx, 2) * Math.pow(ry, 2) - Math.pow(rx, 2) * Math.pow(y1p, 2) - Math.pow(ry, 2) * Math.pow(x1p, 2);\n    var denominator = Math.pow(rx, 2) * Math.pow(y1p, 2) + Math.pow(ry, 2) * Math.pow(x1p, 2);\n    var cxp = sign * Math.sqrt(Math.abs(numerator / denominator)) * (rx * y1p / ry);\n    var cyp = sign * Math.sqrt(Math.abs(numerator / denominator)) * (-ry * x1p / rx);\n    var cx = Math.cos(phi) * cxp - Math.sin(phi) * cyp + (x1 + x2) / 2;\n    var cy = Math.sin(phi) * cxp + Math.cos(phi) * cyp + (y1 + y2) / 2;\n    var startAngle = Math.atan2((y1p - cyp) / ry, (x1p - cxp) / rx);\n    var deltaAngle = Math.atan2((-y1p - cyp) / ry, (-x1p - cxp) / rx) - startAngle;\n    if (deltaAngle < 0 && sweepFlag === 1) {\n        deltaAngle += 2 * Math.PI;\n    } else if (deltaAngle > 0 && sweepFlag === 0) {\n        deltaAngle -= 2 * Math.PI;\n    }\n    return {\n        cx: cx,\n        cy: cy,\n        startAngle: startAngle,\n        deltaAngle: deltaAngle\n    };\n}\n/**\n * Ellipse arc segment to Bezier curve\n * @param cx\n * @param cy\n * @param rx\n * @param ry\n * @param rotation\n * @param startAngle\n * @param endAngle\n * @returns\n */ function ellipticalArcToBezier(cx, cy, rx, ry, rotation, startAngle, endAngle) {\n    // 计算控制点\n    var alpha = Math.sin(endAngle - startAngle) * (Math.sqrt(4 + 3 * Math.pow(Math.tan((endAngle - startAngle) / 2), 2)) - 1) / 3;\n    var cosPhi = Math.cos(rotation);\n    var sinPhi = Math.sin(rotation);\n    var x1 = cx + rx * Math.cos(startAngle) * cosPhi - ry * Math.sin(startAngle) * sinPhi;\n    var y1 = cy + rx * Math.cos(startAngle) * sinPhi + ry * Math.sin(startAngle) * cosPhi;\n    var x2 = cx + rx * Math.cos(endAngle) * cosPhi - ry * Math.sin(endAngle) * sinPhi;\n    var y2 = cy + rx * Math.cos(endAngle) * sinPhi + ry * Math.sin(endAngle) * cosPhi;\n    var cp1x = x1 + alpha * (-rx * Math.sin(startAngle) * cosPhi - ry * Math.cos(startAngle) * sinPhi);\n    var cp1y = y1 + alpha * (-rx * Math.sin(startAngle) * sinPhi + ry * Math.cos(startAngle) * cosPhi);\n    var cp2x = x2 - alpha * (-rx * Math.sin(endAngle) * cosPhi - ry * Math.cos(endAngle) * sinPhi);\n    var cp2y = y2 - alpha * (-rx * Math.sin(endAngle) * sinPhi + ry * Math.cos(endAngle) * cosPhi);\n    return [\n        cp1x,\n        cp1y,\n        cp2x,\n        cp2y,\n        x2,\n        y2\n    ];\n}\nfunction drawPath(ctx, attrs, styles) {\n    var paths = [];\n    paths = paths.concat(attrs);\n    var _a = styles.lineWidth, lineWidth = _a === void 0 ? 1 : _a, _b = styles.color, color = _b === void 0 ? \"currentColor\" : _b;\n    ctx.lineWidth = lineWidth;\n    ctx.strokeStyle = color;\n    ctx.setLineDash([]);\n    paths.forEach(function(_a) {\n        var x = _a.x, y = _a.y, path = _a.path;\n        var commands = path.match(/[MLHVCSQTAZ][^MLHVCSQTAZ]*/gi);\n        if (isValid(commands)) {\n            var offsetX_1 = x;\n            var offsetY_1 = y;\n            ctx.beginPath();\n            commands.forEach(function(command) {\n                var currentX = 0;\n                var currentY = 0;\n                var startX = 0;\n                var startY = 0;\n                var type = command[0];\n                var args = command.slice(1).trim().split(/[\\s,]+/).map(Number);\n                switch(type){\n                    case \"M\":\n                        currentX = args[0] + offsetX_1;\n                        currentY = args[1] + offsetY_1;\n                        ctx.moveTo(currentX, currentY);\n                        startX = currentX;\n                        startY = currentY;\n                        break;\n                    case \"m\":\n                        currentX += args[0];\n                        currentY += args[1];\n                        ctx.moveTo(currentX, currentY);\n                        startX = currentX;\n                        startY = currentY;\n                        break;\n                    case \"L\":\n                        currentX = args[0] + offsetX_1;\n                        currentY = args[1] + offsetY_1;\n                        ctx.lineTo(currentX, currentY);\n                        break;\n                    case \"l\":\n                        currentX += args[0];\n                        currentY += args[1];\n                        ctx.lineTo(currentX, currentY);\n                        break;\n                    case \"H\":\n                        currentX = args[0] + offsetX_1;\n                        ctx.lineTo(currentX, currentY);\n                        break;\n                    case \"h\":\n                        currentX += args[0];\n                        ctx.lineTo(currentX, currentY);\n                        break;\n                    case \"V\":\n                        currentY = args[0] + offsetY_1;\n                        ctx.lineTo(currentX, currentY);\n                        break;\n                    case \"v\":\n                        currentY += args[0];\n                        ctx.lineTo(currentX, currentY);\n                        break;\n                    case \"C\":\n                        ctx.bezierCurveTo(args[0] + offsetX_1, args[1] + offsetY_1, args[2] + offsetX_1, args[3] + offsetY_1, args[4] + offsetX_1, args[5] + offsetY_1);\n                        currentX = args[4] + offsetX_1;\n                        currentY = args[5] + offsetY_1;\n                        break;\n                    case \"c\":\n                        ctx.bezierCurveTo(currentX + args[0], currentY + args[1], currentX + args[2], currentY + args[3], currentX + args[4], currentY + args[5]);\n                        currentX += args[4];\n                        currentY += args[5];\n                        break;\n                    case \"S\":\n                        ctx.bezierCurveTo(currentX, currentY, args[0] + offsetX_1, args[1] + offsetY_1, args[2] + offsetX_1, args[3] + offsetY_1);\n                        currentX = args[2] + offsetX_1;\n                        currentY = args[3] + offsetY_1;\n                        break;\n                    case \"s\":\n                        ctx.bezierCurveTo(currentX, currentY, currentX + args[0], currentY + args[1], currentX + args[2], currentY + args[3]);\n                        currentX += args[2];\n                        currentY += args[3];\n                        break;\n                    case \"Q\":\n                        ctx.quadraticCurveTo(args[0] + offsetX_1, args[1] + offsetY_1, args[2] + offsetX_1, args[3] + offsetY_1);\n                        currentX = args[2] + offsetX_1;\n                        currentY = args[3] + offsetY_1;\n                        break;\n                    case \"q\":\n                        ctx.quadraticCurveTo(currentX + args[0], currentY + args[1], currentX + args[2], currentY + args[3]);\n                        currentX += args[2];\n                        currentY += args[3];\n                        break;\n                    case \"T\":\n                        ctx.quadraticCurveTo(currentX, currentY, args[0] + offsetX_1, args[1] + offsetY_1);\n                        currentX = args[0] + offsetX_1;\n                        currentY = args[1] + offsetY_1;\n                        break;\n                    case \"t\":\n                        ctx.quadraticCurveTo(currentX, currentY, currentX + args[0], currentY + args[1]);\n                        currentX += args[0];\n                        currentY += args[1];\n                        break;\n                    case \"A\":\n                        // arc\n                        // reference https://www.w3.org/TR/SVG/implnote.html#ArcImplementationNotes\n                        drawEllipticalArc(ctx, currentX, currentY, args, offsetX_1, offsetY_1, false);\n                        currentX = args[5] + offsetX_1;\n                        currentY = args[6] + offsetY_1;\n                        break;\n                    case \"a\":\n                        // arc\n                        // reference https://www.w3.org/TR/SVG/implnote.html#ArcImplementationNotes\n                        drawEllipticalArc(ctx, currentX, currentY, args, offsetX_1, offsetY_1, true);\n                        currentX += args[5];\n                        currentY += args[6];\n                        break;\n                    case \"Z\":\n                    case \"z\":\n                        ctx.closePath();\n                        currentX = startX;\n                        currentY = startY;\n                        break;\n                }\n            });\n            if (styles.style === PathType.Fill) {\n                ctx.fill();\n            } else {\n                ctx.stroke();\n            }\n        }\n    });\n}\nvar path = {\n    name: \"path\",\n    checkEventOn: checkCoordinateOnRect,\n    draw: function(ctx, attrs, styles) {\n        drawPath(ctx, attrs, styles);\n    }\n};\n/**\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n\n * http://www.apache.org/licenses/LICENSE-2.0\n\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ var figures = {};\nvar extensions = [\n    circle,\n    line,\n    polygon,\n    rect,\n    text,\n    arc,\n    path\n];\nextensions.forEach(function(figure) {\n    figures[figure.name] = FigureImp.extend(figure);\n});\nfunction getSupportedFigures() {\n    return Object.keys(figures);\n}\nfunction registerFigure(figure) {\n    figures[figure.name] = FigureImp.extend(figure);\n}\nfunction getInnerFigureClass(name) {\n    var _a;\n    return (_a = figures[name]) !== null && _a !== void 0 ? _a : null;\n}\nfunction getFigureClass(name) {\n    var _a;\n    return (_a = figures[name]) !== null && _a !== void 0 ? _a : null;\n}\n/**\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n\n * http://www.apache.org/licenses/LICENSE-2.0\n\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ var View = /** @class */ function(_super) {\n    __extends(View, _super);\n    function View(widget) {\n        var _this = _super.call(this) || this;\n        _this._widget = widget;\n        return _this;\n    }\n    View.prototype.getWidget = function() {\n        return this._widget;\n    };\n    View.prototype.createFigure = function(create, eventHandler) {\n        var FigureClazz = getInnerFigureClass(create.name);\n        if (FigureClazz !== null) {\n            var figure = new FigureClazz(create);\n            if (isValid(eventHandler)) {\n                for(var key in eventHandler){\n                    // eslint-disable-next-line no-prototype-builtins -- ignore\n                    if (eventHandler.hasOwnProperty(key)) {\n                        // eslint-disable-next-line @typescript-eslint/no-unsafe-argument -- ignore\n                        figure.registerEvent(key, eventHandler[key]);\n                    }\n                }\n                this.addChild(figure);\n            }\n            return figure;\n        }\n        return null;\n    };\n    View.prototype.draw = function(ctx) {\n        var extend = [];\n        for(var _i = 1; _i < arguments.length; _i++){\n            extend[_i - 1] = arguments[_i];\n        }\n        this.clear();\n        this.drawImp(ctx, extend);\n    };\n    return View;\n}(Eventful);\n/**\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n\n * http://www.apache.org/licenses/LICENSE-2.0\n\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ var GridView = /** @class */ function(_super) {\n    __extends(GridView, _super);\n    function GridView() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    GridView.prototype.drawImp = function(ctx) {\n        var _a, _b;\n        var widget = this.getWidget();\n        var pane = this.getWidget().getPane();\n        var chart = pane.getChart();\n        var bounding = widget.getBounding();\n        var styles = chart.getStyles().grid;\n        var show = styles.show;\n        if (show) {\n            ctx.save();\n            ctx.globalCompositeOperation = \"destination-over\";\n            var horizontalStyles = styles.horizontal;\n            var horizontalShow = horizontalStyles.show;\n            if (horizontalShow) {\n                var yAxis = pane.getAxisComponent();\n                var attrs = yAxis.getTicks().map(function(tick) {\n                    return {\n                        coordinates: [\n                            {\n                                x: 0,\n                                y: tick.coord\n                            },\n                            {\n                                x: bounding.width,\n                                y: tick.coord\n                            }\n                        ]\n                    };\n                });\n                (_a = this.createFigure({\n                    name: \"line\",\n                    attrs: attrs,\n                    styles: horizontalStyles\n                })) === null || _a === void 0 ? void 0 : _a.draw(ctx);\n            }\n            var verticalStyles = styles.vertical;\n            var verticalShow = verticalStyles.show;\n            if (verticalShow) {\n                var xAxis = chart.getXAxisPane().getAxisComponent();\n                var attrs = xAxis.getTicks().map(function(tick) {\n                    return {\n                        coordinates: [\n                            {\n                                x: tick.coord,\n                                y: 0\n                            },\n                            {\n                                x: tick.coord,\n                                y: bounding.height\n                            }\n                        ]\n                    };\n                });\n                (_b = this.createFigure({\n                    name: \"line\",\n                    attrs: attrs,\n                    styles: verticalStyles\n                })) === null || _b === void 0 ? void 0 : _b.draw(ctx);\n            }\n            ctx.restore();\n        }\n    };\n    return GridView;\n}(View);\n/**\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n\n * http://www.apache.org/licenses/LICENSE-2.0\n\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ var ChildrenView = /** @class */ function(_super) {\n    __extends(ChildrenView, _super);\n    function ChildrenView() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    ChildrenView.prototype.eachChildren = function(childCallback) {\n        var pane = this.getWidget().getPane();\n        var chartStore = pane.getChart().getChartStore();\n        var visibleRangeDataList = chartStore.getVisibleRangeDataList();\n        var barSpace = chartStore.getBarSpace();\n        var dataLength = visibleRangeDataList.length;\n        var index = 0;\n        while(index < dataLength){\n            childCallback(visibleRangeDataList[index], barSpace, index);\n            ++index;\n        }\n    };\n    return ChildrenView;\n}(View);\n/**\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n\n * http://www.apache.org/licenses/LICENSE-2.0\n\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ var CandleBarView = /** @class */ function(_super) {\n    __extends(CandleBarView, _super);\n    function CandleBarView() {\n        var _this = _super.apply(this, __spreadArray([], __read(arguments), false)) || this;\n        _this._boundCandleBarClickEvent = function(data) {\n            return function() {\n                _this.getWidget().getPane().getChart().getChartStore().executeAction(ActionType.OnCandleBarClick, data);\n                return false;\n            };\n        };\n        return _this;\n    }\n    CandleBarView.prototype.drawImp = function(ctx) {\n        var _this = this;\n        var pane = this.getWidget().getPane();\n        var isMain = pane.getId() === PaneIdConstants.CANDLE;\n        var chartStore = pane.getChart().getChartStore();\n        var candleBarOptions = this.getCandleBarOptions();\n        if (candleBarOptions !== null) {\n            var type_1 = candleBarOptions.type, styles_1 = candleBarOptions.styles;\n            var ohlcSize_1 = 0;\n            var halfOhlcSize_1 = 0;\n            if (candleBarOptions.type === CandleType.Ohlc) {\n                var gapBar = chartStore.getBarSpace().gapBar;\n                ohlcSize_1 = Math.min(Math.max(Math.round(gapBar * 0.2), 1), 8);\n                if (ohlcSize_1 > 2 && ohlcSize_1 % 2 === 1) {\n                    ohlcSize_1--;\n                }\n                halfOhlcSize_1 = Math.floor(halfOhlcSize_1 / 2);\n            }\n            var yAxis_1 = pane.getAxisComponent();\n            this.eachChildren(function(visibleData, barSpace) {\n                var _a;\n                var x = visibleData.x, _b = visibleData.data, current = _b.current, prev = _b.prev;\n                if (isValid(current)) {\n                    var open_1 = current.open, high = current.high, low = current.low, close_1 = current.close;\n                    var comparePrice = styles_1.compareRule === CandleColorCompareRule.CurrentOpen ? open_1 : (_a = prev === null || prev === void 0 ? void 0 : prev.close) !== null && _a !== void 0 ? _a : close_1;\n                    var colors = [];\n                    if (close_1 > comparePrice) {\n                        colors[0] = styles_1.upColor;\n                        colors[1] = styles_1.upBorderColor;\n                        colors[2] = styles_1.upWickColor;\n                    } else if (close_1 < comparePrice) {\n                        colors[0] = styles_1.downColor;\n                        colors[1] = styles_1.downBorderColor;\n                        colors[2] = styles_1.downWickColor;\n                    } else {\n                        colors[0] = styles_1.noChangeColor;\n                        colors[1] = styles_1.noChangeBorderColor;\n                        colors[2] = styles_1.noChangeWickColor;\n                    }\n                    var openY = yAxis_1.convertToPixel(open_1);\n                    var closeY = yAxis_1.convertToPixel(close_1);\n                    var priceY = [\n                        openY,\n                        closeY,\n                        yAxis_1.convertToPixel(high),\n                        yAxis_1.convertToPixel(low)\n                    ];\n                    priceY.sort(function(a, b) {\n                        return a - b;\n                    });\n                    var correction = barSpace.gapBar % 2 === 0 ? 1 : 0;\n                    var rects = [];\n                    switch(type_1){\n                        case CandleType.CandleSolid:\n                            {\n                                rects = _this._createSolidBar(x, priceY, barSpace, colors, correction);\n                                break;\n                            }\n                        case CandleType.CandleStroke:\n                            {\n                                rects = _this._createStrokeBar(x, priceY, barSpace, colors, correction);\n                                break;\n                            }\n                        case CandleType.CandleUpStroke:\n                            {\n                                if (close_1 > open_1) {\n                                    rects = _this._createStrokeBar(x, priceY, barSpace, colors, correction);\n                                } else {\n                                    rects = _this._createSolidBar(x, priceY, barSpace, colors, correction);\n                                }\n                                break;\n                            }\n                        case CandleType.CandleDownStroke:\n                            {\n                                if (open_1 > close_1) {\n                                    rects = _this._createStrokeBar(x, priceY, barSpace, colors, correction);\n                                } else {\n                                    rects = _this._createSolidBar(x, priceY, barSpace, colors, correction);\n                                }\n                                break;\n                            }\n                        case CandleType.Ohlc:\n                            {\n                                rects = [\n                                    {\n                                        name: \"rect\",\n                                        attrs: [\n                                            {\n                                                x: x - halfOhlcSize_1,\n                                                y: priceY[0],\n                                                width: ohlcSize_1,\n                                                height: priceY[3] - priceY[0]\n                                            },\n                                            {\n                                                x: x - barSpace.halfGapBar,\n                                                y: openY + ohlcSize_1 > priceY[3] ? priceY[3] - ohlcSize_1 : openY,\n                                                width: barSpace.halfGapBar,\n                                                height: ohlcSize_1\n                                            },\n                                            {\n                                                x: x + halfOhlcSize_1,\n                                                y: closeY + ohlcSize_1 > priceY[3] ? priceY[3] - ohlcSize_1 : closeY,\n                                                width: barSpace.halfGapBar - halfOhlcSize_1,\n                                                height: ohlcSize_1\n                                            }\n                                        ],\n                                        styles: {\n                                            color: colors[0]\n                                        }\n                                    }\n                                ];\n                                break;\n                            }\n                    }\n                    rects.forEach(function(rect) {\n                        var _a;\n                        var handler = null;\n                        if (isMain) {\n                            handler = {\n                                mouseClickEvent: _this._boundCandleBarClickEvent(visibleData)\n                            };\n                        }\n                        (_a = _this.createFigure(rect, handler !== null && handler !== void 0 ? handler : undefined)) === null || _a === void 0 ? void 0 : _a.draw(ctx);\n                    });\n                }\n            });\n        }\n    };\n    CandleBarView.prototype.getCandleBarOptions = function() {\n        var candleStyles = this.getWidget().getPane().getChart().getStyles().candle;\n        return {\n            type: candleStyles.type,\n            styles: candleStyles.bar\n        };\n    };\n    CandleBarView.prototype._createSolidBar = function(x, priceY, barSpace, colors, correction) {\n        return [\n            {\n                name: \"rect\",\n                attrs: {\n                    x: x,\n                    y: priceY[0],\n                    width: 1,\n                    height: priceY[3] - priceY[0]\n                },\n                styles: {\n                    color: colors[2]\n                }\n            },\n            {\n                name: \"rect\",\n                attrs: {\n                    x: x - barSpace.halfGapBar,\n                    y: priceY[1],\n                    width: barSpace.gapBar + correction,\n                    height: Math.max(1, priceY[2] - priceY[1])\n                },\n                styles: {\n                    style: PolygonType.StrokeFill,\n                    color: colors[0],\n                    borderColor: colors[1]\n                }\n            }\n        ];\n    };\n    CandleBarView.prototype._createStrokeBar = function(x, priceY, barSpace, colors, correction) {\n        return [\n            {\n                name: \"rect\",\n                attrs: [\n                    {\n                        x: x,\n                        y: priceY[0],\n                        width: 1,\n                        height: priceY[1] - priceY[0]\n                    },\n                    {\n                        x: x,\n                        y: priceY[2],\n                        width: 1,\n                        height: priceY[3] - priceY[2]\n                    }\n                ],\n                styles: {\n                    color: colors[2]\n                }\n            },\n            {\n                name: \"rect\",\n                attrs: {\n                    x: x - barSpace.halfGapBar,\n                    y: priceY[1],\n                    width: barSpace.gapBar + correction,\n                    height: Math.max(1, priceY[2] - priceY[1])\n                },\n                styles: {\n                    style: PolygonType.Stroke,\n                    borderColor: colors[1]\n                }\n            }\n        ];\n    };\n    return CandleBarView;\n}(ChildrenView);\n/**\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n\n * http://www.apache.org/licenses/LICENSE-2.0\n\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ var IndicatorView = /** @class */ function(_super) {\n    __extends(IndicatorView, _super);\n    function IndicatorView() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    IndicatorView.prototype.getCandleBarOptions = function() {\n        var e_1, _a;\n        var pane = this.getWidget().getPane();\n        var yAxis = pane.getAxisComponent();\n        if (!yAxis.isInCandle()) {\n            var chartStore = pane.getChart().getChartStore();\n            var indicators = chartStore.getIndicatorsByPaneId(pane.getId());\n            try {\n                for(var indicators_1 = __values(indicators), indicators_1_1 = indicators_1.next(); !indicators_1_1.done; indicators_1_1 = indicators_1.next()){\n                    var indicator = indicators_1_1.value;\n                    if (indicator.shouldOhlc && indicator.visible) {\n                        var indicatorStyles = indicator.styles;\n                        var defaultStyles = chartStore.getStyles().indicator;\n                        var compareRule = formatValue(indicatorStyles, \"ohlc.compareRule\", defaultStyles.ohlc.compareRule);\n                        var upColor = formatValue(indicatorStyles, \"ohlc.upColor\", defaultStyles.ohlc.upColor);\n                        var downColor = formatValue(indicatorStyles, \"ohlc.downColor\", defaultStyles.ohlc.downColor);\n                        var noChangeColor = formatValue(indicatorStyles, \"ohlc.noChangeColor\", defaultStyles.ohlc.noChangeColor);\n                        return {\n                            type: CandleType.Ohlc,\n                            styles: {\n                                compareRule: compareRule,\n                                upColor: upColor,\n                                downColor: downColor,\n                                noChangeColor: noChangeColor,\n                                upBorderColor: upColor,\n                                downBorderColor: downColor,\n                                noChangeBorderColor: noChangeColor,\n                                upWickColor: upColor,\n                                downWickColor: downColor,\n                                noChangeWickColor: noChangeColor\n                            }\n                        };\n                    }\n                }\n            } catch (e_1_1) {\n                e_1 = {\n                    error: e_1_1\n                };\n            } finally{\n                try {\n                    if (indicators_1_1 && !indicators_1_1.done && (_a = indicators_1.return)) _a.call(indicators_1);\n                } finally{\n                    if (e_1) throw e_1.error;\n                }\n            }\n        }\n        return null;\n    };\n    IndicatorView.prototype.drawImp = function(ctx) {\n        var _this = this;\n        _super.prototype.drawImp.call(this, ctx);\n        var widget = this.getWidget();\n        var pane = widget.getPane();\n        var chart = pane.getChart();\n        var bounding = widget.getBounding();\n        var xAxis = chart.getXAxisPane().getAxisComponent();\n        var yAxis = pane.getAxisComponent();\n        var chartStore = chart.getChartStore();\n        var indicators = chartStore.getIndicatorsByPaneId(pane.getId());\n        var defaultStyles = chartStore.getStyles().indicator;\n        ctx.save();\n        indicators.forEach(function(indicator) {\n            if (indicator.visible) {\n                if (indicator.zLevel < 0) {\n                    ctx.globalCompositeOperation = \"destination-over\";\n                } else {\n                    ctx.globalCompositeOperation = \"source-over\";\n                }\n                var isCover = false;\n                if (indicator.draw !== null) {\n                    ctx.save();\n                    isCover = indicator.draw({\n                        ctx: ctx,\n                        chart: chart,\n                        indicator: indicator,\n                        bounding: bounding,\n                        xAxis: xAxis,\n                        yAxis: yAxis\n                    });\n                    ctx.restore();\n                }\n                if (!isCover) {\n                    var result_1 = indicator.result;\n                    var lines_1 = [];\n                    _this.eachChildren(function(data, barSpace) {\n                        var _a, _b, _c;\n                        var halfGapBar = barSpace.halfGapBar;\n                        var dataIndex = data.dataIndex, x = data.x;\n                        var prevX = xAxis.convertToPixel(dataIndex - 1);\n                        var nextX = xAxis.convertToPixel(dataIndex + 1);\n                        var prevData = (_a = result_1[dataIndex - 1]) !== null && _a !== void 0 ? _a : null;\n                        var currentData = (_b = result_1[dataIndex]) !== null && _b !== void 0 ? _b : null;\n                        var nextData = (_c = result_1[dataIndex + 1]) !== null && _c !== void 0 ? _c : null;\n                        var prevCoordinate = {\n                            x: prevX\n                        };\n                        var currentCoordinate = {\n                            x: x\n                        };\n                        var nextCoordinate = {\n                            x: nextX\n                        };\n                        indicator.figures.forEach(function(_a) {\n                            var key = _a.key;\n                            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment -- ignore\n                            var prevValue = prevData === null || prevData === void 0 ? void 0 : prevData[key];\n                            if (isNumber(prevValue)) {\n                                prevCoordinate[key] = yAxis.convertToPixel(prevValue);\n                            }\n                            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment -- ignore\n                            var currentValue = currentData === null || currentData === void 0 ? void 0 : currentData[key];\n                            if (isNumber(currentValue)) {\n                                currentCoordinate[key] = yAxis.convertToPixel(currentValue);\n                            }\n                            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment -- ignore\n                            var nextValue = nextData === null || nextData === void 0 ? void 0 : nextData[key];\n                            if (isNumber(nextValue)) {\n                                nextCoordinate[key] = yAxis.convertToPixel(nextValue);\n                            }\n                        });\n                        eachFigures(indicator, dataIndex, defaultStyles, function(figure, figureStyles, figureIndex) {\n                            var _a, _b, _c;\n                            if (isValid(currentData === null || currentData === void 0 ? void 0 : currentData[figure.key])) {\n                                // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment -- ignore\n                                var valueY = currentCoordinate[figure.key];\n                                var attrs = (_a = figure.attrs) === null || _a === void 0 ? void 0 : _a.call(figure, {\n                                    data: {\n                                        prev: prevData,\n                                        current: currentData,\n                                        next: nextData\n                                    },\n                                    coordinate: {\n                                        prev: prevCoordinate,\n                                        current: currentCoordinate,\n                                        next: nextCoordinate\n                                    },\n                                    bounding: bounding,\n                                    barSpace: barSpace,\n                                    xAxis: xAxis,\n                                    yAxis: yAxis\n                                });\n                                if (!isValid(attrs)) {\n                                    switch(figure.type){\n                                        case \"circle\":\n                                            {\n                                                // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment -- ignore\n                                                attrs = {\n                                                    x: x,\n                                                    y: valueY,\n                                                    r: Math.max(1, halfGapBar)\n                                                };\n                                                break;\n                                            }\n                                        case \"rect\":\n                                        case \"bar\":\n                                            {\n                                                var baseValue = (_b = figure.baseValue) !== null && _b !== void 0 ? _b : yAxis.getRange().from;\n                                                var baseValueY = yAxis.convertToPixel(baseValue);\n                                                var height = Math.abs(baseValueY - valueY);\n                                                if (baseValue !== (currentData === null || currentData === void 0 ? void 0 : currentData[figure.key])) {\n                                                    height = Math.max(1, height);\n                                                }\n                                                var y = 0;\n                                                if (valueY > baseValueY) {\n                                                    y = baseValueY;\n                                                } else {\n                                                    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment -- ignore\n                                                    y = valueY;\n                                                }\n                                                attrs = {\n                                                    x: x - halfGapBar,\n                                                    y: y,\n                                                    width: Math.max(1, halfGapBar * 2),\n                                                    height: height\n                                                };\n                                                break;\n                                            }\n                                        case \"line\":\n                                            {\n                                                if (!isValid(lines_1[figureIndex])) {\n                                                    lines_1[figureIndex] = [];\n                                                }\n                                                if (isNumber(currentCoordinate[figure.key]) && isNumber(nextCoordinate[figure.key])) {\n                                                    lines_1[figureIndex].push({\n                                                        coordinates: [\n                                                            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment -- ignore\n                                                            {\n                                                                x: currentCoordinate.x,\n                                                                y: currentCoordinate[figure.key]\n                                                            },\n                                                            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment -- ignore\n                                                            {\n                                                                x: nextCoordinate.x,\n                                                                y: nextCoordinate[figure.key]\n                                                            }\n                                                        ],\n                                                        styles: figureStyles\n                                                    });\n                                                }\n                                                break;\n                                            }\n                                    }\n                                }\n                                var type = figure.type;\n                                if (isValid(attrs) && type !== \"line\") {\n                                    (_c = _this.createFigure({\n                                        name: type === \"bar\" ? \"rect\" : type,\n                                        attrs: attrs,\n                                        styles: figureStyles\n                                    })) === null || _c === void 0 ? void 0 : _c.draw(ctx);\n                                }\n                            }\n                        });\n                    });\n                    // merge line and render\n                    lines_1.forEach(function(items) {\n                        var _a, _b, _c, _d;\n                        if (items.length > 1) {\n                            var mergeLines = [\n                                {\n                                    coordinates: [\n                                        items[0].coordinates[0],\n                                        items[0].coordinates[1]\n                                    ],\n                                    styles: items[0].styles\n                                }\n                            ];\n                            for(var i = 1; i < items.length; i++){\n                                var lastMergeLine = mergeLines[mergeLines.length - 1];\n                                var current = items[i];\n                                var lastMergeLineLastCoordinate = lastMergeLine.coordinates[lastMergeLine.coordinates.length - 1];\n                                if (lastMergeLineLastCoordinate.x === current.coordinates[0].x && lastMergeLineLastCoordinate.y === current.coordinates[0].y && lastMergeLine.styles.style === current.styles.style && lastMergeLine.styles.color === current.styles.color && lastMergeLine.styles.size === current.styles.size && lastMergeLine.styles.smooth === current.styles.smooth && ((_a = lastMergeLine.styles.dashedValue) === null || _a === void 0 ? void 0 : _a[0]) === ((_b = current.styles.dashedValue) === null || _b === void 0 ? void 0 : _b[0]) && ((_c = lastMergeLine.styles.dashedValue) === null || _c === void 0 ? void 0 : _c[1]) === ((_d = current.styles.dashedValue) === null || _d === void 0 ? void 0 : _d[1])) {\n                                    lastMergeLine.coordinates.push(current.coordinates[1]);\n                                } else {\n                                    mergeLines.push({\n                                        coordinates: [\n                                            current.coordinates[0],\n                                            current.coordinates[1]\n                                        ],\n                                        styles: current.styles\n                                    });\n                                }\n                            }\n                            mergeLines.forEach(function(_a) {\n                                var _b;\n                                var coordinates = _a.coordinates, styles = _a.styles;\n                                (_b = _this.createFigure({\n                                    name: \"line\",\n                                    attrs: {\n                                        coordinates: coordinates\n                                    },\n                                    styles: styles\n                                })) === null || _b === void 0 ? void 0 : _b.draw(ctx);\n                            });\n                        }\n                    });\n                }\n            }\n        });\n        ctx.restore();\n    };\n    return IndicatorView;\n}(CandleBarView);\n/**\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n\n * http://www.apache.org/licenses/LICENSE-2.0\n\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ var CrosshairLineView = /** @class */ function(_super) {\n    __extends(CrosshairLineView, _super);\n    function CrosshairLineView() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    CrosshairLineView.prototype.drawImp = function(ctx) {\n        var widget = this.getWidget();\n        var pane = widget.getPane();\n        var bounding = widget.getBounding();\n        var chartStore = widget.getPane().getChart().getChartStore();\n        var crosshair = chartStore.getCrosshair();\n        var styles = chartStore.getStyles().crosshair;\n        if (isString(crosshair.paneId) && styles.show) {\n            if (crosshair.paneId === pane.getId()) {\n                var y = crosshair.y;\n                this._drawLine(ctx, [\n                    {\n                        x: 0,\n                        y: y\n                    },\n                    {\n                        x: bounding.width,\n                        y: y\n                    }\n                ], styles.horizontal);\n            }\n            var x = crosshair.realX;\n            this._drawLine(ctx, [\n                {\n                    x: x,\n                    y: 0\n                },\n                {\n                    x: x,\n                    y: bounding.height\n                }\n            ], styles.vertical);\n        }\n    };\n    CrosshairLineView.prototype._drawLine = function(ctx, coordinates, styles) {\n        var _a;\n        if (styles.show) {\n            var lineStyles = styles.line;\n            if (lineStyles.show) {\n                (_a = this.createFigure({\n                    name: \"line\",\n                    attrs: {\n                        coordinates: coordinates\n                    },\n                    styles: lineStyles\n                })) === null || _a === void 0 ? void 0 : _a.draw(ctx);\n            }\n        }\n    };\n    return CrosshairLineView;\n}(View);\n/**\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n\n * http://www.apache.org/licenses/LICENSE-2.0\n\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ var IndicatorTooltipView = /** @class */ function(_super) {\n    __extends(IndicatorTooltipView, _super);\n    function IndicatorTooltipView() {\n        var _this = _super.apply(this, __spreadArray([], __read(arguments), false)) || this;\n        _this._boundFeatureClickEvent = function(currentFeatureInfo) {\n            return function() {\n                var _a;\n                var pane = _this.getWidget().getPane();\n                var indicator = currentFeatureInfo.indicator, others = __rest(currentFeatureInfo, [\n                    \"indicator\"\n                ]);\n                if (isValid(indicator)) {\n                    (_a = indicator.onClick) === null || _a === void 0 ? void 0 : _a.call(indicator, __assign({\n                        target: IndicatorEventTarget.Feature,\n                        chart: pane.getChart(),\n                        indicator: indicator\n                    }, others));\n                } else {\n                    pane.getChart().getChartStore().executeAction(ActionType.OnCandleTooltipFeatureClick, currentFeatureInfo);\n                }\n                return true;\n            };\n        };\n        _this._boundFeatureMouseMoveEvent = function(currentFeatureInfo) {\n            return function() {\n                _this.getWidget().getPane().getChart().getChartStore().setActiveTooltipFeatureInfo(currentFeatureInfo);\n                return true;\n            };\n        };\n        return _this;\n    }\n    IndicatorTooltipView.prototype.drawImp = function(ctx) {\n        var widget = this.getWidget();\n        var pane = widget.getPane();\n        var chartStore = pane.getChart().getChartStore();\n        var crosshair = chartStore.getCrosshair();\n        if (isValid(crosshair.kLineData)) {\n            var bounding = widget.getBounding();\n            var _a = chartStore.getStyles().indicator.tooltip, offsetLeft = _a.offsetLeft, offsetTop = _a.offsetTop, offsetRight = _a.offsetRight;\n            this.drawIndicatorTooltip(ctx, offsetLeft, offsetTop, bounding.width - offsetRight);\n        }\n    };\n    IndicatorTooltipView.prototype.drawIndicatorTooltip = function(ctx, left, top, maxWidth) {\n        var _this = this;\n        var pane = this.getWidget().getPane();\n        var chartStore = pane.getChart().getChartStore();\n        var styles = chartStore.getStyles().indicator;\n        var tooltipStyles = styles.tooltip;\n        if (this.isDrawTooltip(chartStore.getCrosshair(), tooltipStyles)) {\n            var indicators = chartStore.getIndicatorsByPaneId(pane.getId());\n            var tooltipTextStyles_1 = tooltipStyles.text;\n            indicators.forEach(function(indicator) {\n                var prevRowHeight = 0;\n                var coordinate = {\n                    x: left,\n                    y: top\n                };\n                var _a = _this.getIndicatorTooltipData(indicator), name = _a.name, calcParamsText = _a.calcParamsText, legends = _a.legends, features = _a.features;\n                var nameValid = name.length > 0;\n                var legendValid = legends.length > 0;\n                if (nameValid || legendValid) {\n                    var _b = __read(_this.classifyTooltipFeatures(features), 3), leftFeatures = _b[0], middleFeatures = _b[1], rightFeatures = _b[2];\n                    prevRowHeight = _this.drawStandardTooltipFeatures(ctx, leftFeatures, coordinate, indicator, left, prevRowHeight, maxWidth);\n                    if (nameValid) {\n                        var text = name;\n                        if (calcParamsText.length > 0) {\n                            text = \"\".concat(text).concat(calcParamsText);\n                        }\n                        prevRowHeight = _this.drawStandardTooltipLegends(ctx, [\n                            {\n                                title: {\n                                    text: \"\",\n                                    color: tooltipTextStyles_1.color\n                                },\n                                value: {\n                                    text: text,\n                                    color: tooltipTextStyles_1.color\n                                }\n                            }\n                        ], coordinate, left, prevRowHeight, maxWidth, tooltipTextStyles_1);\n                    }\n                    prevRowHeight = _this.drawStandardTooltipFeatures(ctx, middleFeatures, coordinate, indicator, left, prevRowHeight, maxWidth);\n                    if (legendValid) {\n                        prevRowHeight = _this.drawStandardTooltipLegends(ctx, legends, coordinate, left, prevRowHeight, maxWidth, tooltipStyles.text);\n                    }\n                    // draw right icons\n                    prevRowHeight = _this.drawStandardTooltipFeatures(ctx, rightFeatures, coordinate, indicator, left, prevRowHeight, maxWidth);\n                    top = coordinate.y + prevRowHeight;\n                }\n            });\n        }\n        return top;\n    };\n    IndicatorTooltipView.prototype.drawStandardTooltipFeatures = function(ctx, features, coordinate, indicator, left, prevRowHeight, maxWidth) {\n        var _this = this;\n        if (features.length > 0) {\n            var width_1 = 0;\n            var height_1 = 0;\n            features.forEach(function(feature) {\n                var _a = feature.marginLeft, marginLeft = _a === void 0 ? 0 : _a, _b = feature.marginTop, marginTop = _b === void 0 ? 0 : _b, _c = feature.marginRight, marginRight = _c === void 0 ? 0 : _c, _d = feature.marginBottom, marginBottom = _d === void 0 ? 0 : _d, _e = feature.paddingLeft, paddingLeft = _e === void 0 ? 0 : _e, _f = feature.paddingTop, paddingTop = _f === void 0 ? 0 : _f, _g = feature.paddingRight, paddingRight = _g === void 0 ? 0 : _g, _h = feature.paddingBottom, paddingBottom = _h === void 0 ? 0 : _h, _j = feature.size, size = _j === void 0 ? 0 : _j, type = feature.type, iconFont = feature.iconFont;\n                var contentWidth = 0;\n                if (type === TooltipFeatureType.IconFont) {\n                    ctx.font = createFont(size, \"normal\", iconFont.family);\n                    contentWidth = ctx.measureText(iconFont.content).width;\n                } else {\n                    contentWidth = size;\n                }\n                width_1 += marginLeft + paddingLeft + contentWidth + paddingRight + marginRight;\n                height_1 = Math.max(height_1, marginTop + paddingTop + size + paddingBottom + marginBottom);\n            });\n            if (coordinate.x + width_1 > maxWidth) {\n                coordinate.x = left;\n                coordinate.y += prevRowHeight;\n                prevRowHeight = height_1;\n            } else {\n                prevRowHeight = Math.max(prevRowHeight, height_1);\n            }\n            var pane = this.getWidget().getPane();\n            var paneId_1 = pane.getId();\n            var activeFeatureInfo_1 = pane.getChart().getChartStore().getActiveTooltipFeatureInfo();\n            features.forEach(function(feature) {\n                var _a, _b, _c, _d;\n                var _e = feature.marginLeft, marginLeft = _e === void 0 ? 0 : _e, _f = feature.marginTop, marginTop = _f === void 0 ? 0 : _f, _g = feature.marginRight, marginRight = _g === void 0 ? 0 : _g, _h = feature.paddingLeft, paddingLeft = _h === void 0 ? 0 : _h, _j = feature.paddingTop, paddingTop = _j === void 0 ? 0 : _j, _k = feature.paddingRight, paddingRight = _k === void 0 ? 0 : _k, _l = feature.paddingBottom, paddingBottom = _l === void 0 ? 0 : _l, backgroundColor = feature.backgroundColor, activeBackgroundColor = feature.activeBackgroundColor, borderRadius = feature.borderRadius, _m = feature.size, size = _m === void 0 ? 0 : _m, color = feature.color, activeColor = feature.activeColor, type = feature.type, iconFont = feature.iconFont, path = feature.path;\n                var active = (activeFeatureInfo_1 === null || activeFeatureInfo_1 === void 0 ? void 0 : activeFeatureInfo_1.paneId) === paneId_1 && ((_a = activeFeatureInfo_1.indicator) === null || _a === void 0 ? void 0 : _a.id) === (indicator === null || indicator === void 0 ? void 0 : indicator.id) && activeFeatureInfo_1.feature.id === feature.id;\n                var contentWidth = 0;\n                var eventHandler = {\n                    mouseClickEvent: _this._boundFeatureClickEvent({\n                        paneId: paneId_1,\n                        indicator: indicator,\n                        feature: feature\n                    }),\n                    mouseMoveEvent: _this._boundFeatureMouseMoveEvent({\n                        paneId: paneId_1,\n                        indicator: indicator,\n                        feature: feature\n                    })\n                };\n                // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition -- ignore\n                var finalColor = active ? activeColor !== null && activeColor !== void 0 ? activeColor : color : color;\n                // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition -- ignore\n                var finalBackgroundColor = active ? activeBackgroundColor !== null && activeBackgroundColor !== void 0 ? activeBackgroundColor : backgroundColor : backgroundColor;\n                if (type === TooltipFeatureType.IconFont) {\n                    (_b = _this.createFigure({\n                        name: \"text\",\n                        attrs: {\n                            text: iconFont.content,\n                            x: coordinate.x + marginLeft,\n                            y: coordinate.y + marginTop\n                        },\n                        styles: {\n                            paddingLeft: paddingLeft,\n                            paddingTop: paddingTop,\n                            paddingRight: paddingRight,\n                            paddingBottom: paddingBottom,\n                            borderRadius: borderRadius,\n                            size: size,\n                            family: iconFont.family,\n                            color: finalColor,\n                            backgroundColor: finalBackgroundColor\n                        }\n                    }, eventHandler)) === null || _b === void 0 ? void 0 : _b.draw(ctx);\n                    contentWidth = ctx.measureText(iconFont.content).width;\n                } else {\n                    (_c = _this.createFigure({\n                        name: \"rect\",\n                        attrs: {\n                            x: coordinate.x + marginLeft,\n                            y: coordinate.y + marginTop,\n                            width: size,\n                            height: size\n                        },\n                        styles: {\n                            paddingLeft: paddingLeft,\n                            paddingTop: paddingTop,\n                            paddingRight: paddingRight,\n                            paddingBottom: paddingBottom,\n                            color: finalBackgroundColor\n                        }\n                    }, eventHandler)) === null || _c === void 0 ? void 0 : _c.draw(ctx);\n                    (_d = _this.createFigure({\n                        name: \"path\",\n                        attrs: {\n                            path: path.path,\n                            x: coordinate.x + marginLeft + paddingLeft,\n                            y: coordinate.y + marginTop + paddingTop,\n                            width: size,\n                            height: size\n                        },\n                        styles: {\n                            style: path.style,\n                            lineWidth: path.lineWidth,\n                            color: finalColor\n                        }\n                    })) === null || _d === void 0 ? void 0 : _d.draw(ctx);\n                    contentWidth = size;\n                }\n                coordinate.x += marginLeft + paddingLeft + contentWidth + paddingRight + marginRight;\n            });\n        }\n        return prevRowHeight;\n    };\n    IndicatorTooltipView.prototype.drawStandardTooltipLegends = function(ctx, legends, coordinate, left, prevRowHeight, maxWidth, styles) {\n        var _this = this;\n        if (legends.length > 0) {\n            var marginLeft_1 = styles.marginLeft, marginTop_1 = styles.marginTop, marginRight_1 = styles.marginRight, marginBottom_1 = styles.marginBottom, size_1 = styles.size, family_1 = styles.family, weight_1 = styles.weight;\n            ctx.font = createFont(size_1, weight_1, family_1);\n            legends.forEach(function(data) {\n                var _a, _b;\n                var title = data.title;\n                var value = data.value;\n                var titleTextWidth = ctx.measureText(title.text).width;\n                var valueTextWidth = ctx.measureText(value.text).width;\n                var totalTextWidth = titleTextWidth + valueTextWidth;\n                var h = marginTop_1 + size_1 + marginBottom_1;\n                if (coordinate.x + marginLeft_1 + totalTextWidth + marginRight_1 > maxWidth) {\n                    coordinate.x = left;\n                    coordinate.y += prevRowHeight;\n                    prevRowHeight = h;\n                } else {\n                    prevRowHeight = Math.max(prevRowHeight, h);\n                }\n                if (title.text.length > 0) {\n                    (_a = _this.createFigure({\n                        name: \"text\",\n                        attrs: {\n                            x: coordinate.x + marginLeft_1,\n                            y: coordinate.y + marginTop_1,\n                            text: title.text\n                        },\n                        styles: {\n                            color: title.color,\n                            size: size_1,\n                            family: family_1,\n                            weight: weight_1\n                        }\n                    })) === null || _a === void 0 ? void 0 : _a.draw(ctx);\n                }\n                (_b = _this.createFigure({\n                    name: \"text\",\n                    attrs: {\n                        x: coordinate.x + marginLeft_1 + titleTextWidth,\n                        y: coordinate.y + marginTop_1,\n                        text: value.text\n                    },\n                    styles: {\n                        color: value.color,\n                        size: size_1,\n                        family: family_1,\n                        weight: weight_1\n                    }\n                })) === null || _b === void 0 ? void 0 : _b.draw(ctx);\n                coordinate.x += marginLeft_1 + totalTextWidth + marginRight_1;\n            });\n        }\n        return prevRowHeight;\n    };\n    IndicatorTooltipView.prototype.isDrawTooltip = function(crosshair, styles) {\n        var showRule = styles.showRule;\n        return showRule === TooltipShowRule.Always || showRule === TooltipShowRule.FollowCross && isString(crosshair.paneId);\n    };\n    IndicatorTooltipView.prototype.getIndicatorTooltipData = function(indicator) {\n        var _a, _b;\n        var chartStore = this.getWidget().getPane().getChart().getChartStore();\n        var styles = chartStore.getStyles().indicator;\n        var tooltipStyles = styles.tooltip;\n        var name = tooltipStyles.showName ? indicator.shortName : \"\";\n        var calcParamsText = \"\";\n        if (tooltipStyles.showParams) {\n            var calcParams = indicator.calcParams;\n            if (calcParams.length > 0) {\n                calcParamsText = \"(\".concat(calcParams.join(\",\"), \")\");\n            }\n        }\n        var tooltipData = {\n            name: name,\n            calcParamsText: calcParamsText,\n            legends: [],\n            features: tooltipStyles.features\n        };\n        var dataIndex = chartStore.getCrosshair().dataIndex;\n        var result = indicator.result;\n        var customApi = chartStore.getCustomApi();\n        var decimalFold = chartStore.getDecimalFold();\n        var thousandsSeparator = chartStore.getThousandsSeparator();\n        var legends = [];\n        if (indicator.visible) {\n            var data_1 = (_b = (_a = result[dataIndex]) !== null && _a !== void 0 ? _a : result[dataIndex - 1]) !== null && _b !== void 0 ? _b : {};\n            eachFigures(indicator, dataIndex, styles, function(figure, figureStyles) {\n                if (isString(figure.title)) {\n                    var color = figureStyles.color;\n                    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment  -- ignore\n                    var value = data_1[figure.key];\n                    if (isNumber(value)) {\n                        value = formatPrecision(value, indicator.precision);\n                        if (indicator.shouldFormatBigNumber) {\n                            value = customApi.formatBigNumber(value);\n                        }\n                        value = decimalFold.format(thousandsSeparator.format(value));\n                    }\n                    legends.push({\n                        title: {\n                            text: figure.title,\n                            color: color\n                        },\n                        value: {\n                            text: value !== null && value !== void 0 ? value : tooltipStyles.defaultValue,\n                            color: color\n                        }\n                    });\n                }\n            });\n            tooltipData.legends = legends;\n        }\n        if (isFunction(indicator.createTooltipDataSource)) {\n            var widget = this.getWidget();\n            var pane = widget.getPane();\n            var chart = pane.getChart();\n            var _c = indicator.createTooltipDataSource({\n                chart: chart,\n                indicator: indicator,\n                crosshair: chartStore.getCrosshair(),\n                bounding: widget.getBounding(),\n                xAxis: pane.getChart().getXAxisPane().getAxisComponent(),\n                yAxis: pane.getAxisComponent()\n            }), customName = _c.name, customCalcParamsText = _c.calcParamsText, customLegends = _c.legends, customFeatures = _c.features;\n            if (isString(customName) && tooltipStyles.showName) {\n                tooltipData.name = customName;\n            }\n            if (isString(customCalcParamsText) && tooltipStyles.showParams) {\n                tooltipData.calcParamsText = customCalcParamsText;\n            }\n            if (isValid(customFeatures)) {\n                tooltipData.features = customFeatures;\n            }\n            if (isValid(customLegends) && indicator.visible) {\n                var optimizedLegends_1 = [];\n                var color_1 = styles.tooltip.text.color;\n                customLegends.forEach(function(data) {\n                    var title = {\n                        text: \"\",\n                        color: color_1\n                    };\n                    if (isObject(data.title)) {\n                        title = data.title;\n                    } else {\n                        title.text = data.title;\n                    }\n                    var value = {\n                        text: \"\",\n                        color: color_1\n                    };\n                    if (isObject(data.value)) {\n                        value = data.value;\n                    } else {\n                        value.text = data.value;\n                    }\n                    if (isNumber(Number(value.text))) {\n                        value.text = decimalFold.format(thousandsSeparator.format(value.text));\n                    }\n                    optimizedLegends_1.push({\n                        title: title,\n                        value: value\n                    });\n                });\n                tooltipData.legends = optimizedLegends_1;\n            }\n        }\n        return tooltipData;\n    };\n    IndicatorTooltipView.prototype.classifyTooltipFeatures = function(features) {\n        var leftFeatures = [];\n        var middleFeatures = [];\n        var rightFeatures = [];\n        features.forEach(function(feature) {\n            switch(feature.position){\n                case TooltipFeaturePosition.Left:\n                    {\n                        leftFeatures.push(feature);\n                        break;\n                    }\n                case TooltipFeaturePosition.Middle:\n                    {\n                        middleFeatures.push(feature);\n                        break;\n                    }\n                case TooltipFeaturePosition.Right:\n                    {\n                        rightFeatures.push(feature);\n                        break;\n                    }\n            }\n        });\n        return [\n            leftFeatures,\n            middleFeatures,\n            rightFeatures\n        ];\n    };\n    return IndicatorTooltipView;\n}(View);\n/**\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n\n * http://www.apache.org/licenses/LICENSE-2.0\n\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ var OverlayView = /** @class */ function(_super) {\n    __extends(OverlayView, _super);\n    function OverlayView(widget) {\n        var _this = _super.call(this, widget) || this;\n        _this._initEvent();\n        return _this;\n    }\n    OverlayView.prototype._initEvent = function() {\n        var _this = this;\n        var pane = this.getWidget().getPane();\n        var paneId = pane.getId();\n        var chart = pane.getChart();\n        var chartStore = chart.getChartStore();\n        this.registerEvent(\"mouseMoveEvent\", function(event) {\n            var _a;\n            var progressOverlayInfo = chartStore.getProgressOverlayInfo();\n            if (progressOverlayInfo !== null) {\n                var overlay = progressOverlayInfo.overlay;\n                var progressOverlayPaneId = progressOverlayInfo.paneId;\n                if (overlay.isStart()) {\n                    chartStore.updateProgressOverlayInfo(paneId);\n                    progressOverlayPaneId = paneId;\n                }\n                var index = overlay.points.length - 1;\n                if (overlay.isDrawing() && progressOverlayPaneId === paneId) {\n                    overlay.eventMoveForDrawing(_this._coordinateToPoint(overlay, event));\n                    (_a = overlay.onDrawing) === null || _a === void 0 ? void 0 : _a.call(overlay, __assign({\n                        chart: chart,\n                        overlay: overlay\n                    }, event));\n                }\n                return _this._figureMouseMoveEvent(overlay, 1 /* EventOverlayInfoFigureType.Point */ , index, {\n                    key: \"\".concat(OVERLAY_FIGURE_KEY_PREFIX, \"point_\").concat(index),\n                    type: \"circle\",\n                    attrs: {}\n                })(event);\n            }\n            chartStore.setHoverOverlayInfo({\n                paneId: paneId,\n                overlay: null,\n                figureType: 0 /* EventOverlayInfoFigureType.None */ ,\n                figureIndex: -1,\n                figure: null\n            }, event);\n            return false;\n        }).registerEvent(\"mouseClickEvent\", function(event) {\n            var _a, _b;\n            var progressOverlayInfo = chartStore.getProgressOverlayInfo();\n            if (progressOverlayInfo !== null) {\n                var overlay = progressOverlayInfo.overlay;\n                var progressOverlayPaneId = progressOverlayInfo.paneId;\n                if (overlay.isStart()) {\n                    chartStore.updateProgressOverlayInfo(paneId, true);\n                    progressOverlayPaneId = paneId;\n                }\n                var index = overlay.points.length - 1;\n                if (overlay.isDrawing() && progressOverlayPaneId === paneId) {\n                    overlay.eventMoveForDrawing(_this._coordinateToPoint(overlay, event));\n                    (_a = overlay.onDrawing) === null || _a === void 0 ? void 0 : _a.call(overlay, __assign({\n                        chart: chart,\n                        overlay: overlay\n                    }, event));\n                    overlay.nextStep();\n                    if (!overlay.isDrawing()) {\n                        chartStore.progressOverlayComplete();\n                        (_b = overlay.onDrawEnd) === null || _b === void 0 ? void 0 : _b.call(overlay, __assign({\n                            chart: chart,\n                            overlay: overlay\n                        }, event));\n                    }\n                }\n                return _this._figureMouseClickEvent(overlay, 1 /* EventOverlayInfoFigureType.Point */ , index, {\n                    key: \"\".concat(OVERLAY_FIGURE_KEY_PREFIX, \"point_\").concat(index),\n                    type: \"circle\",\n                    attrs: {}\n                })(event);\n            }\n            chartStore.setClickOverlayInfo({\n                paneId: paneId,\n                overlay: null,\n                figureType: 0 /* EventOverlayInfoFigureType.None */ ,\n                figureIndex: -1,\n                figure: null\n            }, event);\n            return false;\n        }).registerEvent(\"mouseDoubleClickEvent\", function(event) {\n            var _a;\n            var progressOverlayInfo = chartStore.getProgressOverlayInfo();\n            if (progressOverlayInfo !== null) {\n                var overlay = progressOverlayInfo.overlay;\n                var progressOverlayPaneId = progressOverlayInfo.paneId;\n                if (overlay.isDrawing() && progressOverlayPaneId === paneId) {\n                    overlay.forceComplete();\n                    if (!overlay.isDrawing()) {\n                        chartStore.progressOverlayComplete();\n                        (_a = overlay.onDrawEnd) === null || _a === void 0 ? void 0 : _a.call(overlay, __assign({\n                            chart: chart,\n                            overlay: overlay\n                        }, event));\n                    }\n                }\n                var index = overlay.points.length - 1;\n                return _this._figureMouseClickEvent(overlay, 1 /* EventOverlayInfoFigureType.Point */ , index, {\n                    key: \"\".concat(OVERLAY_FIGURE_KEY_PREFIX, \"point_\").concat(index),\n                    type: \"circle\",\n                    attrs: {}\n                })(event);\n            }\n            return false;\n        }).registerEvent(\"mouseRightClickEvent\", function(event) {\n            var progressOverlayInfo = chartStore.getProgressOverlayInfo();\n            if (progressOverlayInfo !== null) {\n                var overlay = progressOverlayInfo.overlay;\n                if (overlay.isDrawing()) {\n                    var index = overlay.points.length - 1;\n                    return _this._figureMouseRightClickEvent(overlay, 1 /* EventOverlayInfoFigureType.Point */ , index, {\n                        key: \"\".concat(OVERLAY_FIGURE_KEY_PREFIX, \"point_\").concat(index),\n                        type: \"circle\",\n                        attrs: {}\n                    })(event);\n                }\n            }\n            return false;\n        }).registerEvent(\"mouseUpEvent\", function(event) {\n            var _a;\n            var _b = chartStore.getPressedOverlayInfo(), overlay = _b.overlay, figure = _b.figure;\n            if (overlay !== null) {\n                if (checkOverlayFigureEvent(\"onPressedMoveEnd\", figure)) {\n                    (_a = overlay.onPressedMoveEnd) === null || _a === void 0 ? void 0 : _a.call(overlay, __assign({\n                        chart: chart,\n                        overlay: overlay,\n                        figure: figure !== null && figure !== void 0 ? figure : undefined\n                    }, event));\n                }\n            }\n            chartStore.setPressedOverlayInfo({\n                paneId: paneId,\n                overlay: null,\n                figureType: 0 /* EventOverlayInfoFigureType.None */ ,\n                figureIndex: -1,\n                figure: null\n            });\n            return false;\n        }).registerEvent(\"pressedMouseMoveEvent\", function(event) {\n            var _a, _b;\n            var _c = chartStore.getPressedOverlayInfo(), overlay = _c.overlay, figureType = _c.figureType, figureIndex = _c.figureIndex, figure = _c.figure;\n            if (overlay !== null) {\n                if (checkOverlayFigureEvent(\"onPressedMoving\", figure)) {\n                    if (!overlay.lock) {\n                        if (!((_b = (_a = overlay.onPressedMoving) === null || _a === void 0 ? void 0 : _a.call(overlay, __assign({\n                            chart: chart,\n                            overlay: overlay,\n                            figure: figure !== null && figure !== void 0 ? figure : undefined\n                        }, event))) !== null && _b !== void 0 ? _b : false)) {\n                            var point = _this._coordinateToPoint(overlay, event);\n                            if (figureType === 1 /* EventOverlayInfoFigureType.Point */ ) {\n                                overlay.eventPressedPointMove(point, figureIndex);\n                            } else {\n                                overlay.eventPressedOtherMove(point, _this.getWidget().getPane().getChart().getChartStore());\n                            }\n                        }\n                    }\n                    return true;\n                }\n            }\n            return false;\n        });\n    };\n    OverlayView.prototype._createFigureEvents = function(overlay, figureType, figureIndex, figure) {\n        if (overlay.isDrawing()) {\n            return null;\n        }\n        return {\n            mouseMoveEvent: this._figureMouseMoveEvent(overlay, figureType, figureIndex, figure),\n            mouseDownEvent: this._figureMouseDownEvent(overlay, figureType, figureIndex, figure),\n            mouseClickEvent: this._figureMouseClickEvent(overlay, figureType, figureIndex, figure),\n            mouseRightClickEvent: this._figureMouseRightClickEvent(overlay, figureType, figureIndex, figure),\n            mouseDoubleClickEvent: this._figureMouseDoubleClickEvent(overlay, figureType, figureIndex, figure)\n        };\n    };\n    OverlayView.prototype._figureMouseMoveEvent = function(overlay, figureType, figureIndex, figure) {\n        var _this = this;\n        return function(event) {\n            var pane = _this.getWidget().getPane();\n            pane.getChart().getChartStore().setHoverOverlayInfo({\n                paneId: pane.getId(),\n                overlay: overlay,\n                figureType: figureType,\n                figure: figure,\n                figureIndex: figureIndex\n            }, event);\n            return checkOverlayFigureEvent(\"onMouseEnter\", figure) && !overlay.isDrawing();\n        };\n    };\n    OverlayView.prototype._figureMouseDownEvent = function(overlay, figureType, figureIndex, figure) {\n        var _this = this;\n        return function(event) {\n            var _a;\n            var pane = _this.getWidget().getPane();\n            var paneId = pane.getId();\n            overlay.startPressedMove(_this._coordinateToPoint(overlay, event));\n            if (checkOverlayFigureEvent(\"onPressedMoveStart\", figure)) {\n                (_a = overlay.onPressedMoveStart) === null || _a === void 0 ? void 0 : _a.call(overlay, __assign({\n                    chart: pane.getChart(),\n                    overlay: overlay,\n                    figure: figure\n                }, event));\n                pane.getChart().getChartStore().setPressedOverlayInfo({\n                    paneId: paneId,\n                    overlay: overlay,\n                    figureType: figureType,\n                    figureIndex: figureIndex,\n                    figure: figure\n                });\n                return !overlay.isDrawing();\n            }\n            return false;\n        };\n    };\n    OverlayView.prototype._figureMouseClickEvent = function(overlay, figureType, figureIndex, figure) {\n        var _this = this;\n        return function(event) {\n            var pane = _this.getWidget().getPane();\n            var paneId = pane.getId();\n            pane.getChart().getChartStore().setClickOverlayInfo({\n                paneId: paneId,\n                overlay: overlay,\n                figureType: figureType,\n                figureIndex: figureIndex,\n                figure: figure\n            }, event);\n            return checkOverlayFigureEvent(\"onClick\", figure) && !overlay.isDrawing();\n        };\n    };\n    OverlayView.prototype._figureMouseDoubleClickEvent = function(overlay, _figureType, _figureIndex, figure) {\n        var _this = this;\n        return function(event) {\n            var _a;\n            if (checkOverlayFigureEvent(\"onDoubleClick\", figure)) {\n                (_a = overlay.onDoubleClick) === null || _a === void 0 ? void 0 : _a.call(overlay, __assign(__assign({}, event), {\n                    chart: _this.getWidget().getPane().getChart(),\n                    figure: figure,\n                    overlay: overlay\n                }));\n                return !overlay.isDrawing();\n            }\n            return false;\n        };\n    };\n    OverlayView.prototype._figureMouseRightClickEvent = function(overlay, _figureType, _figureIndex, figure) {\n        var _this = this;\n        return function(event) {\n            var _a, _b;\n            if (checkOverlayFigureEvent(\"onRightClick\", figure)) {\n                if (!((_b = (_a = overlay.onRightClick) === null || _a === void 0 ? void 0 : _a.call(overlay, __assign({\n                    chart: _this.getWidget().getPane().getChart(),\n                    overlay: overlay,\n                    figure: figure\n                }, event))) !== null && _b !== void 0 ? _b : false)) {\n                    _this.getWidget().getPane().getChart().getChartStore().removeOverlay(overlay);\n                }\n                return !overlay.isDrawing();\n            }\n            return false;\n        };\n    };\n    OverlayView.prototype._coordinateToPoint = function(o, coordinate) {\n        var _a;\n        var point = {};\n        var pane = this.getWidget().getPane();\n        var chart = pane.getChart();\n        var paneId = pane.getId();\n        var chartStore = chart.getChartStore();\n        if (this.coordinateToPointTimestampDataIndexFlag()) {\n            var xAxis = chart.getXAxisPane().getAxisComponent();\n            var dataIndex = xAxis.convertFromPixel(coordinate.x);\n            var timestamp = (_a = chartStore.dataIndexToTimestamp(dataIndex)) !== null && _a !== void 0 ? _a : undefined;\n            point.timestamp = timestamp;\n            point.dataIndex = dataIndex;\n        }\n        if (this.coordinateToPointValueFlag()) {\n            var yAxis = pane.getAxisComponent();\n            var value = yAxis.convertFromPixel(coordinate.y);\n            if (o.mode !== OverlayMode.Normal && paneId === PaneIdConstants.CANDLE && isNumber(point.dataIndex)) {\n                var kLineData = chartStore.getDataByDataIndex(point.dataIndex);\n                if (kLineData !== null) {\n                    var modeSensitivity = o.modeSensitivity;\n                    if (value > kLineData.high) {\n                        if (o.mode === OverlayMode.WeakMagnet) {\n                            var highY = yAxis.convertToPixel(kLineData.high);\n                            var buffValue = yAxis.convertFromPixel(highY - modeSensitivity);\n                            if (value < buffValue) {\n                                value = kLineData.high;\n                            }\n                        } else {\n                            value = kLineData.high;\n                        }\n                    } else if (value < kLineData.low) {\n                        if (o.mode === OverlayMode.WeakMagnet) {\n                            var lowY = yAxis.convertToPixel(kLineData.low);\n                            var buffValue = yAxis.convertFromPixel(lowY - modeSensitivity);\n                            if (value > buffValue) {\n                                value = kLineData.low;\n                            }\n                        } else {\n                            value = kLineData.low;\n                        }\n                    } else {\n                        var max = Math.max(kLineData.open, kLineData.close);\n                        var min = Math.min(kLineData.open, kLineData.close);\n                        if (value > max) {\n                            if (value - max < kLineData.high - value) {\n                                value = max;\n                            } else {\n                                value = kLineData.high;\n                            }\n                        } else if (value < min) {\n                            if (value - kLineData.low < min - value) {\n                                value = kLineData.low;\n                            } else {\n                                value = min;\n                            }\n                        } else if (max - value < value - min) {\n                            value = max;\n                        } else {\n                            value = min;\n                        }\n                    }\n                }\n            }\n            point.value = value;\n        }\n        return point;\n    };\n    OverlayView.prototype.coordinateToPointValueFlag = function() {\n        return true;\n    };\n    OverlayView.prototype.coordinateToPointTimestampDataIndexFlag = function() {\n        return true;\n    };\n    OverlayView.prototype.dispatchEvent = function(name, event, other) {\n        if (this.getWidget().getPane().getChart().getChartStore().isOverlayDrawing()) {\n            return this.onEvent(name, event, other);\n        }\n        return _super.prototype.dispatchEvent.call(this, name, event, other);\n    };\n    OverlayView.prototype.checkEventOn = function() {\n        return true;\n    };\n    OverlayView.prototype.drawImp = function(ctx) {\n        var _this = this;\n        var overlays = this.getCompleteOverlays();\n        overlays.forEach(function(overlay) {\n            if (overlay.visible) {\n                _this._drawOverlay(ctx, overlay);\n            }\n        });\n        var progressOverlay = this.getProgressOverlay();\n        if (isValid(progressOverlay) && progressOverlay.visible) {\n            this._drawOverlay(ctx, progressOverlay);\n        }\n    };\n    OverlayView.prototype._drawOverlay = function(ctx, overlay) {\n        var points = overlay.points;\n        var pane = this.getWidget().getPane();\n        var chart = pane.getChart();\n        var chartStore = chart.getChartStore();\n        var yAxis = pane.getAxisComponent();\n        var xAxis = chart.getXAxisPane().getAxisComponent();\n        var coordinates = points.map(function(point) {\n            var _a;\n            var dataIndex = null;\n            if (isNumber(point.timestamp)) {\n                dataIndex = chartStore.timestampToDataIndex(point.timestamp);\n            }\n            var coordinate = {\n                x: 0,\n                y: 0\n            };\n            if (isNumber(dataIndex)) {\n                coordinate.x = xAxis.convertToPixel(dataIndex);\n            }\n            if (isNumber(point.value)) {\n                coordinate.y = (_a = yAxis === null || yAxis === void 0 ? void 0 : yAxis.convertToPixel(point.value)) !== null && _a !== void 0 ? _a : 0;\n            }\n            return coordinate;\n        });\n        if (coordinates.length > 0) {\n            // eslint-disable-next-line @typescript-eslint/ban-ts-comment -- ignore\n            // @ts-expect-error\n            var figures = [].concat(this.getFigures(overlay, coordinates));\n            this.drawFigures(ctx, overlay, figures);\n        }\n        this.drawDefaultFigures(ctx, overlay, coordinates);\n    };\n    OverlayView.prototype.drawFigures = function(ctx, overlay, figures) {\n        var _this = this;\n        var defaultStyles = this.getWidget().getPane().getChart().getStyles().overlay;\n        figures.forEach(function(figure, figureIndex) {\n            var type = figure.type, styles = figure.styles, attrs = figure.attrs;\n            // eslint-disable-next-line @typescript-eslint/ban-ts-comment -- ignore\n            // @ts-expect-error\n            var attrsArray = [].concat(attrs);\n            attrsArray.forEach(function(ats) {\n                var _a, _b;\n                var events = _this._createFigureEvents(overlay, 2 /* EventOverlayInfoFigureType.Other */ , figureIndex, figure);\n                // eslint-disable-next-line @typescript-eslint/ban-ts-comment -- ignore\n                // @ts-expect-error\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment -- ignore\n                var ss = __assign(__assign(__assign({}, defaultStyles[type]), (_a = overlay.styles) === null || _a === void 0 ? void 0 : _a[type]), styles);\n                (_b = _this.createFigure({\n                    name: type,\n                    attrs: ats,\n                    styles: ss\n                }, events !== null && events !== void 0 ? events : undefined)) === null || _b === void 0 ? void 0 : _b.draw(ctx);\n            });\n        });\n    };\n    OverlayView.prototype.getCompleteOverlays = function() {\n        var pane = this.getWidget().getPane();\n        return pane.getChart().getChartStore().getOverlaysByPaneId(pane.getId());\n    };\n    OverlayView.prototype.getProgressOverlay = function() {\n        var pane = this.getWidget().getPane();\n        var info = pane.getChart().getChartStore().getProgressOverlayInfo();\n        if (isValid(info) && info.paneId === pane.getId()) {\n            return info.overlay;\n        }\n        return null;\n    };\n    OverlayView.prototype.getFigures = function(o, coordinates) {\n        var _a, _b;\n        var widget = this.getWidget();\n        var pane = widget.getPane();\n        var chart = pane.getChart();\n        var yAxis = pane.getAxisComponent();\n        var xAxis = chart.getXAxisPane().getAxisComponent();\n        var bounding = widget.getBounding();\n        return (_b = (_a = o.createPointFigures) === null || _a === void 0 ? void 0 : _a.call(o, {\n            chart: chart,\n            overlay: o,\n            coordinates: coordinates,\n            bounding: bounding,\n            xAxis: xAxis,\n            yAxis: yAxis\n        })) !== null && _b !== void 0 ? _b : [];\n    };\n    OverlayView.prototype.drawDefaultFigures = function(ctx, overlay, coordinates) {\n        var _this = this;\n        var _a, _b;\n        if (overlay.needDefaultPointFigure) {\n            var chartStore = this.getWidget().getPane().getChart().getChartStore();\n            var hoverOverlayInfo_1 = chartStore.getHoverOverlayInfo();\n            var clickOverlayInfo = chartStore.getClickOverlayInfo();\n            if (((_a = hoverOverlayInfo_1.overlay) === null || _a === void 0 ? void 0 : _a.id) === overlay.id && hoverOverlayInfo_1.figureType !== 0 /* EventOverlayInfoFigureType.None */  || ((_b = clickOverlayInfo.overlay) === null || _b === void 0 ? void 0 : _b.id) === overlay.id && clickOverlayInfo.figureType !== 0 /* EventOverlayInfoFigureType.None */ ) {\n                var defaultStyles = chartStore.getStyles().overlay;\n                var styles = overlay.styles;\n                var pointStyles_1 = __assign(__assign({}, defaultStyles.point), styles === null || styles === void 0 ? void 0 : styles.point);\n                coordinates.forEach(function(_a, index) {\n                    var _b, _c, _d, _e, _f;\n                    var x = _a.x, y = _a.y;\n                    var radius = pointStyles_1.radius;\n                    var color = pointStyles_1.color;\n                    var borderColor = pointStyles_1.borderColor;\n                    var borderSize = pointStyles_1.borderSize;\n                    if (((_b = hoverOverlayInfo_1.overlay) === null || _b === void 0 ? void 0 : _b.id) === overlay.id && hoverOverlayInfo_1.figureType === 1 /* EventOverlayInfoFigureType.Point */  && ((_c = hoverOverlayInfo_1.figure) === null || _c === void 0 ? void 0 : _c.key) === \"\".concat(OVERLAY_FIGURE_KEY_PREFIX, \"point_\").concat(index)) {\n                        radius = pointStyles_1.activeRadius;\n                        color = pointStyles_1.activeColor;\n                        borderColor = pointStyles_1.activeBorderColor;\n                        borderSize = pointStyles_1.activeBorderSize;\n                    }\n                    (_e = _this.createFigure({\n                        name: \"circle\",\n                        attrs: {\n                            x: x,\n                            y: y,\n                            r: radius + borderSize\n                        },\n                        styles: {\n                            color: borderColor\n                        }\n                    }, (_d = _this._createFigureEvents(overlay, 1 /* EventOverlayInfoFigureType.Point */ , index, {\n                        key: \"\".concat(OVERLAY_FIGURE_KEY_PREFIX, \"point_\").concat(index),\n                        type: \"circle\",\n                        attrs: {\n                            x: x,\n                            y: y,\n                            r: radius + borderSize\n                        },\n                        styles: {\n                            color: borderColor\n                        }\n                    })) !== null && _d !== void 0 ? _d : undefined)) === null || _e === void 0 ? void 0 : _e.draw(ctx);\n                    (_f = _this.createFigure({\n                        name: \"circle\",\n                        attrs: {\n                            x: x,\n                            y: y,\n                            r: radius\n                        },\n                        styles: {\n                            color: color\n                        }\n                    })) === null || _f === void 0 ? void 0 : _f.draw(ctx);\n                });\n            }\n        }\n    };\n    return OverlayView;\n}(View);\n/**\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n\n * http://www.apache.org/licenses/LICENSE-2.0\n\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ var IndicatorWidget = /** @class */ function(_super) {\n    __extends(IndicatorWidget, _super);\n    function IndicatorWidget(rootContainer, pane) {\n        var _this = _super.call(this, rootContainer, pane) || this;\n        _this._gridView = new GridView(_this);\n        _this._indicatorView = new IndicatorView(_this);\n        _this._crosshairLineView = new CrosshairLineView(_this);\n        _this._tooltipView = _this.createTooltipView();\n        _this._overlayView = new OverlayView(_this);\n        _this.addChild(_this._tooltipView);\n        _this.addChild(_this._overlayView);\n        _this.getContainer().style.cursor = \"crosshair\";\n        return _this;\n    }\n    IndicatorWidget.prototype.getName = function() {\n        return WidgetNameConstants.MAIN;\n    };\n    IndicatorWidget.prototype.updateMain = function(ctx) {\n        if (this.getPane().getOptions().state !== \"minimize\" /* PaneState.Minimize */ ) {\n            this.updateMainContent(ctx);\n            this._indicatorView.draw(ctx);\n            this._gridView.draw(ctx);\n        }\n    };\n    IndicatorWidget.prototype.createTooltipView = function() {\n        return new IndicatorTooltipView(this);\n    };\n    IndicatorWidget.prototype.updateMainContent = function(_ctx) {\n    // to do it\n    };\n    IndicatorWidget.prototype.updateOverlay = function(ctx) {\n        if (this.getPane().getOptions().state !== \"minimize\" /* PaneState.Minimize */ ) {\n            this._overlayView.draw(ctx);\n            this._crosshairLineView.draw(ctx);\n        }\n        this._tooltipView.draw(ctx);\n    };\n    return IndicatorWidget;\n}(DrawWidget);\n/**\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n\n * http://www.apache.org/licenses/LICENSE-2.0\n\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ var CandleAreaView = /** @class */ function(_super) {\n    __extends(CandleAreaView, _super);\n    function CandleAreaView() {\n        var _this = _super.apply(this, __spreadArray([], __read(arguments), false)) || this;\n        _this._ripplePoint = _this.createFigure({\n            name: \"circle\",\n            attrs: {\n                x: 0,\n                y: 0,\n                r: 0\n            },\n            styles: {\n                style: \"fill\"\n            }\n        });\n        _this._animationFrameTime = 0;\n        _this._animation = new Animation({\n            iterationCount: Infinity\n        }).doFrame(function(time) {\n            _this._animationFrameTime = time;\n            var pane = _this.getWidget().getPane();\n            pane.getChart().updatePane(0 /* UpdateLevel.Main */ , pane.getId());\n        });\n        return _this;\n    }\n    CandleAreaView.prototype.drawImp = function(ctx) {\n        var _a, _b, _c;\n        var widget = this.getWidget();\n        var pane = widget.getPane();\n        var chart = pane.getChart();\n        var dataList = chart.getDataList();\n        var lastDataIndex = dataList.length - 1;\n        var bounding = widget.getBounding();\n        var yAxis = pane.getAxisComponent();\n        var styles = chart.getStyles().candle.area;\n        var coordinates = [];\n        var minY = Number.MAX_SAFE_INTEGER;\n        var areaStartX = Number.MIN_SAFE_INTEGER;\n        var ripplePointCoordinate = null;\n        this.eachChildren(function(data) {\n            var x = data.x;\n            var kLineData = data.data.current;\n            var value = kLineData === null || kLineData === void 0 ? void 0 : kLineData[styles.value];\n            if (isNumber(value)) {\n                var y = yAxis.convertToPixel(value);\n                if (areaStartX === Number.MIN_SAFE_INTEGER) {\n                    areaStartX = x;\n                }\n                coordinates.push({\n                    x: x,\n                    y: y\n                });\n                minY = Math.min(minY, y);\n                if (data.dataIndex === lastDataIndex) {\n                    ripplePointCoordinate = {\n                        x: x,\n                        y: y\n                    };\n                }\n            }\n        });\n        if (coordinates.length > 0) {\n            (_a = this.createFigure({\n                name: \"line\",\n                attrs: {\n                    coordinates: coordinates\n                },\n                styles: {\n                    color: styles.lineColor,\n                    size: styles.lineSize,\n                    smooth: styles.smooth\n                }\n            })) === null || _a === void 0 ? void 0 : _a.draw(ctx);\n            // render area\n            var backgroundColor = styles.backgroundColor;\n            var color = \"\";\n            if (isArray(backgroundColor)) {\n                var gradient_1 = ctx.createLinearGradient(0, bounding.height, 0, minY);\n                try {\n                    backgroundColor.forEach(function(_a) {\n                        var offset = _a.offset, color = _a.color;\n                        gradient_1.addColorStop(offset, color);\n                    });\n                } catch (e) {}\n                color = gradient_1;\n            } else {\n                color = backgroundColor;\n            }\n            ctx.fillStyle = color;\n            ctx.beginPath();\n            ctx.moveTo(areaStartX, bounding.height);\n            ctx.lineTo(coordinates[0].x, coordinates[0].y);\n            lineTo(ctx, coordinates, styles.smooth);\n            ctx.lineTo(coordinates[coordinates.length - 1].x, bounding.height);\n            ctx.closePath();\n            ctx.fill();\n        }\n        var pointStyles = styles.point;\n        if (pointStyles.show && isValid(ripplePointCoordinate)) {\n            (_b = this.createFigure({\n                name: \"circle\",\n                attrs: {\n                    x: ripplePointCoordinate.x,\n                    y: ripplePointCoordinate.y,\n                    r: pointStyles.radius\n                },\n                styles: {\n                    style: \"fill\",\n                    color: pointStyles.color\n                }\n            })) === null || _b === void 0 ? void 0 : _b.draw(ctx);\n            var rippleRadius = pointStyles.rippleRadius;\n            if (pointStyles.animation) {\n                rippleRadius = pointStyles.radius + this._animationFrameTime / pointStyles.animationDuration * (pointStyles.rippleRadius - pointStyles.radius);\n                this._animation.setDuration(pointStyles.animationDuration).start();\n            }\n            (_c = this._ripplePoint) === null || _c === void 0 ? void 0 : _c.setAttrs({\n                x: ripplePointCoordinate.x,\n                y: ripplePointCoordinate.y,\n                r: rippleRadius\n            }).setStyles({\n                style: \"fill\",\n                color: pointStyles.rippleColor\n            }).draw(ctx);\n        } else {\n            this.stopAnimation();\n        }\n    };\n    CandleAreaView.prototype.stopAnimation = function() {\n        this._animation.stop();\n    };\n    return CandleAreaView;\n}(ChildrenView);\n/**\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n\n * http://www.apache.org/licenses/LICENSE-2.0\n\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ var CandleHighLowPriceView = /** @class */ function(_super) {\n    __extends(CandleHighLowPriceView, _super);\n    function CandleHighLowPriceView() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    CandleHighLowPriceView.prototype.drawImp = function(ctx) {\n        var widget = this.getWidget();\n        var pane = widget.getPane();\n        var chartStore = pane.getChart().getChartStore();\n        var priceMarkStyles = chartStore.getStyles().candle.priceMark;\n        var highPriceMarkStyles = priceMarkStyles.high;\n        var lowPriceMarkStyles = priceMarkStyles.low;\n        if (priceMarkStyles.show && (highPriceMarkStyles.show || lowPriceMarkStyles.show)) {\n            var highestLowestPrice = chartStore.getVisibleRangeHighLowPrice();\n            var precision = chartStore.getPrecision();\n            var yAxis = pane.getAxisComponent();\n            var _a = highestLowestPrice[0], high = _a.price, highX = _a.x;\n            var _b = highestLowestPrice[1], low = _b.price, lowX = _b.x;\n            var highY = yAxis.convertToPixel(high);\n            var lowY = yAxis.convertToPixel(low);\n            var decimalFold = chartStore.getDecimalFold();\n            var thousandsSeparator = chartStore.getThousandsSeparator();\n            if (highPriceMarkStyles.show && high !== Number.MIN_SAFE_INTEGER) {\n                this._drawMark(ctx, decimalFold.format(thousandsSeparator.format(formatPrecision(high, precision.price))), {\n                    x: highX,\n                    y: highY\n                }, highY < lowY ? [\n                    -2,\n                    -5\n                ] : [\n                    2,\n                    5\n                ], highPriceMarkStyles);\n            }\n            if (lowPriceMarkStyles.show && low !== Number.MAX_SAFE_INTEGER) {\n                this._drawMark(ctx, decimalFold.format(thousandsSeparator.format(formatPrecision(low, precision.price))), {\n                    x: lowX,\n                    y: lowY\n                }, highY < lowY ? [\n                    2,\n                    5\n                ] : [\n                    -2,\n                    -5\n                ], lowPriceMarkStyles);\n            }\n        }\n    };\n    CandleHighLowPriceView.prototype._drawMark = function(ctx, text, coordinate, offsets, styles) {\n        var _a, _b, _c;\n        var startX = coordinate.x;\n        var startY = coordinate.y + offsets[0];\n        (_a = this.createFigure({\n            name: \"line\",\n            attrs: {\n                coordinates: [\n                    {\n                        x: startX - 2,\n                        y: startY + offsets[0]\n                    },\n                    {\n                        x: startX,\n                        y: startY\n                    },\n                    {\n                        x: startX + 2,\n                        y: startY + offsets[0]\n                    }\n                ]\n            },\n            styles: {\n                color: styles.color\n            }\n        })) === null || _a === void 0 ? void 0 : _a.draw(ctx);\n        var lineEndX = 0;\n        var textStartX = 0;\n        var textAlign = \"left\";\n        var width = this.getWidget().getBounding().width;\n        if (startX > width / 2) {\n            lineEndX = startX - 5;\n            textStartX = lineEndX - styles.textOffset;\n            textAlign = \"right\";\n        } else {\n            lineEndX = startX + 5;\n            textAlign = \"left\";\n            textStartX = lineEndX + styles.textOffset;\n        }\n        var y = startY + offsets[1];\n        (_b = this.createFigure({\n            name: \"line\",\n            attrs: {\n                coordinates: [\n                    {\n                        x: startX,\n                        y: startY\n                    },\n                    {\n                        x: startX,\n                        y: y\n                    },\n                    {\n                        x: lineEndX,\n                        y: y\n                    }\n                ]\n            },\n            styles: {\n                color: styles.color\n            }\n        })) === null || _b === void 0 ? void 0 : _b.draw(ctx);\n        (_c = this.createFigure({\n            name: \"text\",\n            attrs: {\n                x: textStartX,\n                y: y,\n                text: text,\n                align: textAlign,\n                baseline: \"middle\"\n            },\n            styles: {\n                color: styles.color,\n                size: styles.textSize,\n                family: styles.textFamily,\n                weight: styles.textWeight\n            }\n        })) === null || _c === void 0 ? void 0 : _c.draw(ctx);\n    };\n    return CandleHighLowPriceView;\n}(View);\n/**\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n\n * http://www.apache.org/licenses/LICENSE-2.0\n\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ var CandleLastPriceView = /** @class */ function(_super) {\n    __extends(CandleLastPriceView, _super);\n    function CandleLastPriceView() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    CandleLastPriceView.prototype.drawImp = function(ctx) {\n        var _a, _b, _c;\n        var widget = this.getWidget();\n        var pane = widget.getPane();\n        var bounding = widget.getBounding();\n        var chartStore = pane.getChart().getChartStore();\n        var priceMarkStyles = chartStore.getStyles().candle.priceMark;\n        var lastPriceMarkStyles = priceMarkStyles.last;\n        var lastPriceMarkLineStyles = lastPriceMarkStyles.line;\n        if (priceMarkStyles.show && lastPriceMarkStyles.show && lastPriceMarkLineStyles.show) {\n            var yAxis = pane.getAxisComponent();\n            var dataList = chartStore.getDataList();\n            var data = dataList[dataList.length - 1];\n            if (isValid(data)) {\n                var close_1 = data.close, open_1 = data.open;\n                var comparePrice = lastPriceMarkStyles.compareRule === CandleColorCompareRule.CurrentOpen ? open_1 : (_b = (_a = dataList[dataList.length - 2]) === null || _a === void 0 ? void 0 : _a.close) !== null && _b !== void 0 ? _b : close_1;\n                var priceY = yAxis.convertToNicePixel(close_1);\n                var color = \"\";\n                if (close_1 > comparePrice) {\n                    color = lastPriceMarkStyles.upColor;\n                } else if (close_1 < comparePrice) {\n                    color = lastPriceMarkStyles.downColor;\n                } else {\n                    color = lastPriceMarkStyles.noChangeColor;\n                }\n                (_c = this.createFigure({\n                    name: \"line\",\n                    attrs: {\n                        coordinates: [\n                            {\n                                x: 0,\n                                y: priceY\n                            },\n                            {\n                                x: bounding.width,\n                                y: priceY\n                            }\n                        ]\n                    },\n                    styles: {\n                        style: lastPriceMarkLineStyles.style,\n                        color: color,\n                        size: lastPriceMarkLineStyles.size,\n                        dashedValue: lastPriceMarkLineStyles.dashedValue\n                    }\n                })) === null || _c === void 0 ? void 0 : _c.draw(ctx);\n            }\n        }\n    };\n    return CandleLastPriceView;\n}(View);\n/**\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n\n * http://www.apache.org/licenses/LICENSE-2.0\n\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ var AxisPosition;\n(function(AxisPosition) {\n    AxisPosition[\"Left\"] = \"left\";\n    AxisPosition[\"Right\"] = \"right\";\n})(AxisPosition || (AxisPosition = {}));\nfunction getDefaultAxisRange() {\n    return {\n        from: 0,\n        to: 0,\n        range: 0,\n        realFrom: 0,\n        realTo: 0,\n        realRange: 0,\n        displayFrom: 0,\n        displayTo: 0,\n        displayRange: 0\n    };\n}\nvar AxisImp = /** @class */ function() {\n    function AxisImp(parent) {\n        this.scrollZoomEnabled = true;\n        this._range = getDefaultAxisRange();\n        this._prevRange = getDefaultAxisRange();\n        this._ticks = [];\n        this._autoCalcTickFlag = true;\n        this._parent = parent;\n    }\n    AxisImp.prototype.getParent = function() {\n        return this._parent;\n    };\n    AxisImp.prototype.buildTicks = function(force) {\n        if (this._autoCalcTickFlag) {\n            this._range = this.createRangeImp();\n        }\n        if (this._prevRange.from !== this._range.from || this._prevRange.to !== this._range.to || force) {\n            this._prevRange = this._range;\n            this._ticks = this.createTicksImp();\n            return true;\n        }\n        return false;\n    };\n    AxisImp.prototype.getTicks = function() {\n        return this._ticks;\n    };\n    AxisImp.prototype.setRange = function(range) {\n        this._autoCalcTickFlag = false;\n        this._range = range;\n    };\n    AxisImp.prototype.getRange = function() {\n        return this._range;\n    };\n    AxisImp.prototype.setAutoCalcTickFlag = function(flag) {\n        this._autoCalcTickFlag = flag;\n    };\n    AxisImp.prototype.getAutoCalcTickFlag = function() {\n        return this._autoCalcTickFlag;\n    };\n    return AxisImp;\n}();\n/**\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n\n * http://www.apache.org/licenses/LICENSE-2.0\n\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ var zhCN = {\n    time: \"时间：\",\n    open: \"开：\",\n    high: \"高：\",\n    low: \"低：\",\n    close: \"收：\",\n    volume: \"成交量：\",\n    turnover: \"成交额：\",\n    change: \"涨幅：\"\n};\n/**\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n\n * http://www.apache.org/licenses/LICENSE-2.0\n\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ var enUS = {\n    time: \"Time: \",\n    open: \"Open: \",\n    high: \"High: \",\n    low: \"Low: \",\n    close: \"Close: \",\n    volume: \"Volume: \",\n    turnover: \"Turnover: \",\n    change: \"Change: \"\n};\n/**\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n\n * http://www.apache.org/licenses/LICENSE-2.0\n\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ var locales = {\n    \"zh-CN\": zhCN,\n    \"en-US\": enUS\n};\nfunction registerLocale(locale, ls) {\n    locales[locale] = __assign(__assign({}, locales[locale]), ls);\n}\nfunction getSupportedLocales() {\n    return Object.keys(locales);\n}\nfunction i18n(key, locale) {\n    var _a;\n    return (_a = locales[locale][key]) !== null && _a !== void 0 ? _a : key;\n}\n/**\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n\n * http://www.apache.org/licenses/LICENSE-2.0\n\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ var CandleTooltipView = /** @class */ function(_super) {\n    __extends(CandleTooltipView, _super);\n    function CandleTooltipView() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    CandleTooltipView.prototype.drawImp = function(ctx) {\n        var widget = this.getWidget();\n        var chartStore = widget.getPane().getChart().getChartStore();\n        var crosshair = chartStore.getCrosshair();\n        if (isValid(crosshair.kLineData)) {\n            var bounding = widget.getBounding();\n            var styles = chartStore.getStyles();\n            var candleStyles = styles.candle;\n            var indicatorStyles = styles.indicator;\n            if (candleStyles.tooltip.showType === TooltipShowType.Rect && indicatorStyles.tooltip.showType === TooltipShowType.Rect) {\n                var isDrawCandleTooltip = this.isDrawTooltip(crosshair, candleStyles.tooltip);\n                var isDrawIndicatorTooltip = this.isDrawTooltip(crosshair, indicatorStyles.tooltip);\n                this._drawRectTooltip(ctx, isDrawCandleTooltip, isDrawIndicatorTooltip, candleStyles.tooltip.offsetTop);\n            } else if (candleStyles.tooltip.showType === TooltipShowType.Standard && indicatorStyles.tooltip.showType === TooltipShowType.Standard) {\n                var _a = candleStyles.tooltip, offsetLeft = _a.offsetLeft, offsetTop = _a.offsetTop, offsetRight = _a.offsetRight;\n                var maxWidth = bounding.width - offsetRight;\n                var top_1 = this._drawCandleStandardTooltip(ctx, offsetLeft, offsetTop, maxWidth);\n                this.drawIndicatorTooltip(ctx, offsetLeft, top_1, maxWidth);\n            } else if (candleStyles.tooltip.showType === TooltipShowType.Rect && indicatorStyles.tooltip.showType === TooltipShowType.Standard) {\n                var _b = candleStyles.tooltip, offsetLeft = _b.offsetLeft, offsetTop = _b.offsetTop, offsetRight = _b.offsetRight;\n                var maxWidth = bounding.width - offsetRight;\n                var top_2 = this.drawIndicatorTooltip(ctx, offsetLeft, offsetTop, maxWidth);\n                var isDrawCandleTooltip = this.isDrawTooltip(crosshair, candleStyles.tooltip);\n                this._drawRectTooltip(ctx, isDrawCandleTooltip, false, top_2);\n            } else {\n                var _c = candleStyles.tooltip, offsetLeft = _c.offsetLeft, offsetTop = _c.offsetTop, offsetRight = _c.offsetRight;\n                var maxWidth = bounding.width - offsetRight;\n                var top_3 = this._drawCandleStandardTooltip(ctx, offsetLeft, offsetTop, maxWidth);\n                var isDrawIndicatorTooltip = this.isDrawTooltip(crosshair, indicatorStyles.tooltip);\n                this._drawRectTooltip(ctx, false, isDrawIndicatorTooltip, top_3);\n            }\n        }\n    };\n    CandleTooltipView.prototype._drawCandleStandardTooltip = function(ctx, left, top, maxWidth) {\n        var chartStore = this.getWidget().getPane().getChart().getChartStore();\n        var styles = chartStore.getStyles().candle;\n        var tooltipStyles = styles.tooltip;\n        var tooltipTextStyles = tooltipStyles.text;\n        var prevRowHeight = 0;\n        var coordinate = {\n            x: left,\n            y: top\n        };\n        var crosshair = chartStore.getCrosshair();\n        if (this.isDrawTooltip(crosshair, tooltipStyles)) {\n            var legends = this._getCandleTooltipLegends();\n            var _a = __read(this.classifyTooltipFeatures(tooltipStyles.features), 3), leftFeatures = _a[0], middleFeatures = _a[1], rightFeatures = _a[2];\n            prevRowHeight = this.drawStandardTooltipFeatures(ctx, leftFeatures, coordinate, null, left, prevRowHeight, maxWidth);\n            prevRowHeight = this.drawStandardTooltipFeatures(ctx, middleFeatures, coordinate, null, left, prevRowHeight, maxWidth);\n            if (legends.length > 0) {\n                prevRowHeight = this.drawStandardTooltipLegends(ctx, legends, coordinate, left, prevRowHeight, maxWidth, tooltipTextStyles);\n            }\n            prevRowHeight = this.drawStandardTooltipFeatures(ctx, rightFeatures, coordinate, null, left, prevRowHeight, maxWidth);\n        }\n        return coordinate.y + prevRowHeight;\n    };\n    CandleTooltipView.prototype._drawRectTooltip = function(ctx, isDrawCandleTooltip, isDrawIndicatorTooltip, top) {\n        var _this = this;\n        var _a, _b;\n        var widget = this.getWidget();\n        var pane = widget.getPane();\n        var chartStore = pane.getChart().getChartStore();\n        var styles = chartStore.getStyles();\n        var candleStyles = styles.candle;\n        var indicatorStyles = styles.indicator;\n        var candleTooltipStyles = candleStyles.tooltip;\n        var indicatorTooltipStyles = indicatorStyles.tooltip;\n        if (isDrawCandleTooltip || isDrawIndicatorTooltip) {\n            var candleLegends = this._getCandleTooltipLegends();\n            var offsetLeft = candleTooltipStyles.offsetLeft, offsetTop = candleTooltipStyles.offsetTop, offsetRight = candleTooltipStyles.offsetRight, offsetBottom = candleTooltipStyles.offsetBottom;\n            var _c = candleTooltipStyles.text, baseTextMarginLeft_1 = _c.marginLeft, baseTextMarginRight_1 = _c.marginRight, baseTextMarginTop_1 = _c.marginTop, baseTextMarginBottom_1 = _c.marginBottom, baseTextSize_1 = _c.size, baseTextWeight_1 = _c.weight, baseTextFamily_1 = _c.family;\n            var _d = candleTooltipStyles.rect, rectPosition = _d.position, rectPaddingLeft = _d.paddingLeft, rectPaddingRight_1 = _d.paddingRight, rectPaddingTop = _d.paddingTop, rectPaddingBottom = _d.paddingBottom, rectOffsetLeft = _d.offsetLeft, rectOffsetRight = _d.offsetRight, rectOffsetTop = _d.offsetTop, rectOffsetBottom = _d.offsetBottom, rectBorderSize_1 = _d.borderSize, rectBorderRadius = _d.borderRadius, rectBorderColor = _d.borderColor, rectBackgroundColor = _d.color;\n            var maxTextWidth_1 = 0;\n            var rectWidth_1 = 0;\n            var rectHeight_1 = 0;\n            if (isDrawCandleTooltip) {\n                ctx.font = createFont(baseTextSize_1, baseTextWeight_1, baseTextFamily_1);\n                candleLegends.forEach(function(data) {\n                    var title = data.title;\n                    var value = data.value;\n                    var text = \"\".concat(title.text).concat(value.text);\n                    var labelWidth = ctx.measureText(text).width + baseTextMarginLeft_1 + baseTextMarginRight_1;\n                    maxTextWidth_1 = Math.max(maxTextWidth_1, labelWidth);\n                });\n                rectHeight_1 += (baseTextMarginBottom_1 + baseTextMarginTop_1 + baseTextSize_1) * candleLegends.length;\n            }\n            var _e = indicatorTooltipStyles.text, indicatorTextMarginLeft_1 = _e.marginLeft, indicatorTextMarginRight_1 = _e.marginRight, indicatorTextMarginTop_1 = _e.marginTop, indicatorTextMarginBottom_1 = _e.marginBottom, indicatorTextSize_1 = _e.size, indicatorTextWeight_1 = _e.weight, indicatorTextFamily_1 = _e.family;\n            var indicatorLegendsArray_1 = [];\n            if (isDrawIndicatorTooltip) {\n                var indicators = chartStore.getIndicatorsByPaneId(pane.getId());\n                ctx.font = createFont(indicatorTextSize_1, indicatorTextWeight_1, indicatorTextFamily_1);\n                indicators.forEach(function(indicator) {\n                    var tooltipDataLegends = _this.getIndicatorTooltipData(indicator).legends;\n                    indicatorLegendsArray_1.push(tooltipDataLegends);\n                    tooltipDataLegends.forEach(function(data) {\n                        var title = data.title;\n                        var value = data.value;\n                        var text = \"\".concat(title.text).concat(value.text);\n                        var textWidth = ctx.measureText(text).width + indicatorTextMarginLeft_1 + indicatorTextMarginRight_1;\n                        maxTextWidth_1 = Math.max(maxTextWidth_1, textWidth);\n                        rectHeight_1 += indicatorTextMarginTop_1 + indicatorTextMarginBottom_1 + indicatorTextSize_1;\n                    });\n                });\n            }\n            rectWidth_1 += maxTextWidth_1;\n            if (rectWidth_1 !== 0 && rectHeight_1 !== 0) {\n                var crosshair = chartStore.getCrosshair();\n                var bounding = widget.getBounding();\n                var yAxisBounding = pane.getYAxisWidget().getBounding();\n                rectWidth_1 += rectBorderSize_1 * 2 + rectPaddingLeft + rectPaddingRight_1;\n                rectHeight_1 += rectBorderSize_1 * 2 + rectPaddingTop + rectPaddingBottom;\n                var centerX = bounding.width / 2;\n                var isPointer = rectPosition === CandleTooltipRectPosition.Pointer && crosshair.paneId === PaneIdConstants.CANDLE;\n                var isLeft = ((_a = crosshair.realX) !== null && _a !== void 0 ? _a : 0) > centerX;\n                var rectX_1 = 0;\n                if (isPointer) {\n                    var realX = crosshair.realX;\n                    if (isLeft) {\n                        rectX_1 = realX - rectOffsetRight - rectWidth_1;\n                    } else {\n                        rectX_1 = realX + rectOffsetLeft;\n                    }\n                } else {\n                    var yAxis = this.getWidget().getPane().getAxisComponent();\n                    if (isLeft) {\n                        rectX_1 = rectOffsetLeft + offsetLeft;\n                        if (yAxis.inside && yAxis.position === AxisPosition.Left) {\n                            rectX_1 += yAxisBounding.width;\n                        }\n                    } else {\n                        rectX_1 = bounding.width - rectOffsetRight - rectWidth_1 - offsetRight;\n                        if (yAxis.inside && yAxis.position === AxisPosition.Right) {\n                            rectX_1 -= yAxisBounding.width;\n                        }\n                    }\n                }\n                var rectY = top + rectOffsetTop;\n                if (isPointer) {\n                    var y = crosshair.y;\n                    rectY = y - rectHeight_1 / 2;\n                    if (rectY + rectHeight_1 > bounding.height - rectOffsetBottom - offsetBottom) {\n                        rectY = bounding.height - rectOffsetBottom - rectHeight_1 - offsetBottom;\n                    }\n                    if (rectY < top + rectOffsetTop) {\n                        rectY = top + rectOffsetTop + offsetTop;\n                    }\n                }\n                (_b = this.createFigure({\n                    name: \"rect\",\n                    attrs: {\n                        x: rectX_1,\n                        y: rectY,\n                        width: rectWidth_1,\n                        height: rectHeight_1\n                    },\n                    styles: {\n                        style: PolygonType.StrokeFill,\n                        color: rectBackgroundColor,\n                        borderColor: rectBorderColor,\n                        borderSize: rectBorderSize_1,\n                        borderRadius: rectBorderRadius\n                    }\n                })) === null || _b === void 0 ? void 0 : _b.draw(ctx);\n                var candleTextX_1 = rectX_1 + rectBorderSize_1 + rectPaddingLeft + baseTextMarginLeft_1;\n                var textY_1 = rectY + rectBorderSize_1 + rectPaddingTop;\n                if (isDrawCandleTooltip) {\n                    // render candle texts\n                    candleLegends.forEach(function(data) {\n                        var _a, _b;\n                        textY_1 += baseTextMarginTop_1;\n                        var title = data.title;\n                        (_a = _this.createFigure({\n                            name: \"text\",\n                            attrs: {\n                                x: candleTextX_1,\n                                y: textY_1,\n                                text: title.text\n                            },\n                            styles: {\n                                color: title.color,\n                                size: baseTextSize_1,\n                                family: baseTextFamily_1,\n                                weight: baseTextWeight_1\n                            }\n                        })) === null || _a === void 0 ? void 0 : _a.draw(ctx);\n                        var value = data.value;\n                        (_b = _this.createFigure({\n                            name: \"text\",\n                            attrs: {\n                                x: rectX_1 + rectWidth_1 - rectBorderSize_1 - baseTextMarginRight_1 - rectPaddingRight_1,\n                                y: textY_1,\n                                text: value.text,\n                                align: \"right\"\n                            },\n                            styles: {\n                                color: value.color,\n                                size: baseTextSize_1,\n                                family: baseTextFamily_1,\n                                weight: baseTextWeight_1\n                            }\n                        })) === null || _b === void 0 ? void 0 : _b.draw(ctx);\n                        textY_1 += baseTextSize_1 + baseTextMarginBottom_1;\n                    });\n                }\n                if (isDrawIndicatorTooltip) {\n                    // render indicator texts\n                    var indicatorTextX_1 = rectX_1 + rectBorderSize_1 + rectPaddingLeft + indicatorTextMarginLeft_1;\n                    indicatorLegendsArray_1.forEach(function(legends) {\n                        legends.forEach(function(data) {\n                            var _a, _b;\n                            textY_1 += indicatorTextMarginTop_1;\n                            var title = data.title;\n                            var value = data.value;\n                            (_a = _this.createFigure({\n                                name: \"text\",\n                                attrs: {\n                                    x: indicatorTextX_1,\n                                    y: textY_1,\n                                    text: title.text\n                                },\n                                styles: {\n                                    color: title.color,\n                                    size: indicatorTextSize_1,\n                                    family: indicatorTextFamily_1,\n                                    weight: indicatorTextWeight_1\n                                }\n                            })) === null || _a === void 0 ? void 0 : _a.draw(ctx);\n                            (_b = _this.createFigure({\n                                name: \"text\",\n                                attrs: {\n                                    x: rectX_1 + rectWidth_1 - rectBorderSize_1 - indicatorTextMarginRight_1 - rectPaddingRight_1,\n                                    y: textY_1,\n                                    text: value.text,\n                                    align: \"right\"\n                                },\n                                styles: {\n                                    color: value.color,\n                                    size: indicatorTextSize_1,\n                                    family: indicatorTextFamily_1,\n                                    weight: indicatorTextWeight_1\n                                }\n                            })) === null || _b === void 0 ? void 0 : _b.draw(ctx);\n                            textY_1 += indicatorTextSize_1 + indicatorTextMarginBottom_1;\n                        });\n                    });\n                }\n            }\n        }\n    };\n    CandleTooltipView.prototype._getCandleTooltipLegends = function() {\n        var _a, _b, _c, _d, _e, _f;\n        var chartStore = this.getWidget().getPane().getChart().getChartStore();\n        var styles = chartStore.getStyles().candle;\n        var dataList = chartStore.getDataList();\n        var customApi = chartStore.getCustomApi();\n        var decimalFold = chartStore.getDecimalFold();\n        var thousandsSeparator = chartStore.getThousandsSeparator();\n        var locale = chartStore.getLocale();\n        var _g = chartStore.getPrecision(), pricePrecision = _g.price, volumePrecision = _g.volume;\n        var dataIndex = (_a = chartStore.getCrosshair().dataIndex) !== null && _a !== void 0 ? _a : 0;\n        var tooltipStyles = styles.tooltip;\n        var textColor = tooltipStyles.text.color;\n        var prev = (_b = dataList[dataIndex - 1]) !== null && _b !== void 0 ? _b : null;\n        var current = dataList[dataIndex];\n        // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition -- ignore\n        var prevClose = (_c = prev === null || prev === void 0 ? void 0 : prev.close) !== null && _c !== void 0 ? _c : current.close;\n        var changeValue = current.close - prevClose;\n        var mapping = {\n            \"{time}\": customApi.formatDate(current.timestamp, \"YYYY-MM-DD HH:mm\", FormatDateType.Tooltip),\n            \"{open}\": decimalFold.format(thousandsSeparator.format(formatPrecision(current.open, pricePrecision))),\n            \"{high}\": decimalFold.format(thousandsSeparator.format(formatPrecision(current.high, pricePrecision))),\n            \"{low}\": decimalFold.format(thousandsSeparator.format(formatPrecision(current.low, pricePrecision))),\n            \"{close}\": decimalFold.format(thousandsSeparator.format(formatPrecision(current.close, pricePrecision))),\n            \"{volume}\": decimalFold.format(thousandsSeparator.format(customApi.formatBigNumber(formatPrecision((_d = current.volume) !== null && _d !== void 0 ? _d : tooltipStyles.defaultValue, volumePrecision)))),\n            \"{turnover}\": decimalFold.format(thousandsSeparator.format(formatPrecision((_e = current.turnover) !== null && _e !== void 0 ? _e : tooltipStyles.defaultValue, pricePrecision))),\n            \"{change}\": prevClose === 0 ? tooltipStyles.defaultValue : \"\".concat(thousandsSeparator.format(formatPrecision(changeValue / prevClose * 100)), \"%\")\n        };\n        var legends = isFunction(tooltipStyles.custom) ? tooltipStyles.custom({\n            prev: prev,\n            current: current,\n            next: (_f = dataList[dataIndex + 1]) !== null && _f !== void 0 ? _f : null\n        }, styles) : tooltipStyles.custom;\n        return legends.map(function(_a) {\n            var _b;\n            var title = _a.title, value = _a.value;\n            var t = {\n                text: \"\",\n                color: textColor\n            };\n            if (isObject(title)) {\n                t = __assign({}, title);\n            } else {\n                t.text = title;\n            }\n            t.text = i18n(t.text, locale);\n            var v = {\n                text: tooltipStyles.defaultValue,\n                color: textColor\n            };\n            if (isObject(value)) {\n                v = __assign({}, value);\n            } else {\n                v.text = value;\n            }\n            var match = /{(\\S*)}/.exec(v.text);\n            if (match !== null && match.length > 1) {\n                var key = \"{\".concat(match[1], \"}\");\n                v.text = v.text.replace(key, (_b = mapping[key]) !== null && _b !== void 0 ? _b : tooltipStyles.defaultValue);\n                if (key === \"{change}\") {\n                    v.color = changeValue === 0 ? styles.priceMark.last.noChangeColor : changeValue > 0 ? styles.priceMark.last.upColor : styles.priceMark.last.downColor;\n                }\n            }\n            return {\n                title: t,\n                value: v\n            };\n        });\n    };\n    return CandleTooltipView;\n}(IndicatorTooltipView);\n/**\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n\n * http://www.apache.org/licenses/LICENSE-2.0\n\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ var CandleWidget = /** @class */ function(_super) {\n    __extends(CandleWidget, _super);\n    function CandleWidget(rootContainer, pane) {\n        var _this = _super.call(this, rootContainer, pane) || this;\n        _this._candleBarView = new CandleBarView(_this);\n        _this._candleAreaView = new CandleAreaView(_this);\n        _this._candleHighLowPriceView = new CandleHighLowPriceView(_this);\n        _this._candleLastPriceLineView = new CandleLastPriceView(_this);\n        _this.addChild(_this._candleBarView);\n        return _this;\n    }\n    CandleWidget.prototype.updateMainContent = function(ctx) {\n        var candleStyles = this.getPane().getChart().getStyles().candle;\n        if (candleStyles.type !== CandleType.Area) {\n            this._candleBarView.draw(ctx);\n            this._candleHighLowPriceView.draw(ctx);\n            this._candleAreaView.stopAnimation();\n        } else {\n            this._candleAreaView.draw(ctx);\n        }\n        this._candleLastPriceLineView.draw(ctx);\n    };\n    CandleWidget.prototype.createTooltipView = function() {\n        return new CandleTooltipView(this);\n    };\n    return CandleWidget;\n}(IndicatorWidget);\n/**\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n\n * http://www.apache.org/licenses/LICENSE-2.0\n\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ var AxisView = /** @class */ function(_super) {\n    __extends(AxisView, _super);\n    function AxisView() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    AxisView.prototype.drawImp = function(ctx, extend) {\n        var _this = this;\n        var _a, _b;\n        var widget = this.getWidget();\n        var pane = widget.getPane();\n        var bounding = widget.getBounding();\n        var axis = pane.getAxisComponent();\n        var styles = this.getAxisStyles(pane.getChart().getStyles());\n        if (styles.show) {\n            if (styles.axisLine.show) {\n                (_a = this.createFigure({\n                    name: \"line\",\n                    attrs: this.createAxisLine(bounding, styles),\n                    styles: styles.axisLine\n                })) === null || _a === void 0 ? void 0 : _a.draw(ctx);\n            }\n            if (!extend[0]) {\n                var ticks = axis.getTicks();\n                if (styles.tickLine.show) {\n                    var lines = this.createTickLines(ticks, bounding, styles);\n                    lines.forEach(function(line) {\n                        var _a;\n                        (_a = _this.createFigure({\n                            name: \"line\",\n                            attrs: line,\n                            styles: styles.tickLine\n                        })) === null || _a === void 0 ? void 0 : _a.draw(ctx);\n                    });\n                }\n                if (styles.tickText.show) {\n                    var texts = this.createTickTexts(ticks, bounding, styles);\n                    (_b = this.createFigure({\n                        name: \"text\",\n                        attrs: texts,\n                        styles: styles.tickText\n                    })) === null || _b === void 0 ? void 0 : _b.draw(ctx);\n                }\n            }\n        }\n    };\n    return AxisView;\n}(View);\n/**\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n\n * http://www.apache.org/licenses/LICENSE-2.0\n\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ var YAxisView = /** @class */ function(_super) {\n    __extends(YAxisView, _super);\n    function YAxisView() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    YAxisView.prototype.getAxisStyles = function(styles) {\n        return styles.yAxis;\n    };\n    YAxisView.prototype.createAxisLine = function(bounding, styles) {\n        var yAxis = this.getWidget().getPane().getAxisComponent();\n        var size = styles.axisLine.size;\n        var x = 0;\n        if (yAxis.isFromZero()) {\n            x = 0;\n        } else {\n            x = bounding.width - size;\n        }\n        return {\n            coordinates: [\n                {\n                    x: x,\n                    y: 0\n                },\n                {\n                    x: x,\n                    y: bounding.height\n                }\n            ]\n        };\n    };\n    YAxisView.prototype.createTickLines = function(ticks, bounding, styles) {\n        var yAxis = this.getWidget().getPane().getAxisComponent();\n        var axisLineStyles = styles.axisLine;\n        var tickLineStyles = styles.tickLine;\n        var startX = 0;\n        var endX = 0;\n        if (yAxis.isFromZero()) {\n            startX = 0;\n            if (axisLineStyles.show) {\n                startX += axisLineStyles.size;\n            }\n            endX = startX + tickLineStyles.length;\n        } else {\n            startX = bounding.width;\n            if (axisLineStyles.show) {\n                startX -= axisLineStyles.size;\n            }\n            endX = startX - tickLineStyles.length;\n        }\n        return ticks.map(function(tick) {\n            return {\n                coordinates: [\n                    {\n                        x: startX,\n                        y: tick.coord\n                    },\n                    {\n                        x: endX,\n                        y: tick.coord\n                    }\n                ]\n            };\n        });\n    };\n    YAxisView.prototype.createTickTexts = function(ticks, bounding, styles) {\n        var yAxis = this.getWidget().getPane().getAxisComponent();\n        var axisLineStyles = styles.axisLine;\n        var tickLineStyles = styles.tickLine;\n        var tickTextStyles = styles.tickText;\n        var x = 0;\n        if (yAxis.isFromZero()) {\n            x = tickTextStyles.marginStart;\n            if (axisLineStyles.show) {\n                x += axisLineStyles.size;\n            }\n            if (tickLineStyles.show) {\n                x += tickLineStyles.length;\n            }\n        } else {\n            x = bounding.width - tickTextStyles.marginEnd;\n            if (axisLineStyles.show) {\n                x -= axisLineStyles.size;\n            }\n            if (tickLineStyles.show) {\n                x -= tickLineStyles.length;\n            }\n        }\n        var textAlign = this.getWidget().getPane().getAxisComponent().isFromZero() ? \"left\" : \"right\";\n        return ticks.map(function(tick) {\n            return {\n                x: x,\n                y: tick.coord,\n                text: tick.text,\n                align: textAlign,\n                baseline: \"middle\"\n            };\n        });\n    };\n    return YAxisView;\n}(AxisView);\n/**\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n\n * http://www.apache.org/licenses/LICENSE-2.0\n\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ var CandleLastPriceLabelView = /** @class */ function(_super) {\n    __extends(CandleLastPriceLabelView, _super);\n    function CandleLastPriceLabelView() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    CandleLastPriceLabelView.prototype.drawImp = function(ctx) {\n        var _a, _b, _c;\n        var widget = this.getWidget();\n        var pane = widget.getPane();\n        var bounding = widget.getBounding();\n        var chartStore = pane.getChart().getChartStore();\n        var priceMarkStyles = chartStore.getStyles().candle.priceMark;\n        var lastPriceMarkStyles = priceMarkStyles.last;\n        var lastPriceMarkTextStyles = lastPriceMarkStyles.text;\n        if (priceMarkStyles.show && lastPriceMarkStyles.show && lastPriceMarkTextStyles.show) {\n            var precision = chartStore.getPrecision();\n            var yAxis = pane.getAxisComponent();\n            var dataList = chartStore.getDataList();\n            var data = dataList[dataList.length - 1];\n            if (isValid(data)) {\n                var close_1 = data.close, open_1 = data.open;\n                var comparePrice = lastPriceMarkStyles.compareRule === CandleColorCompareRule.CurrentOpen ? open_1 : (_b = (_a = dataList[dataList.length - 2]) === null || _a === void 0 ? void 0 : _a.close) !== null && _b !== void 0 ? _b : close_1;\n                var priceY = yAxis.convertToNicePixel(close_1);\n                var backgroundColor = \"\";\n                if (close_1 > comparePrice) {\n                    backgroundColor = lastPriceMarkStyles.upColor;\n                } else if (close_1 < comparePrice) {\n                    backgroundColor = lastPriceMarkStyles.downColor;\n                } else {\n                    backgroundColor = lastPriceMarkStyles.noChangeColor;\n                }\n                var yAxisRange = yAxis.getRange();\n                var text = yAxis.displayValueToText(yAxis.realValueToDisplayValue(yAxis.valueToRealValue(close_1, {\n                    range: yAxisRange\n                }), {\n                    range: yAxisRange\n                }), precision.price);\n                text = chartStore.getDecimalFold().format(chartStore.getThousandsSeparator().format(text));\n                var x = 0;\n                var textAlgin = \"left\";\n                if (yAxis.isFromZero()) {\n                    x = 0;\n                    textAlgin = \"left\";\n                } else {\n                    x = bounding.width;\n                    textAlgin = \"right\";\n                }\n                (_c = this.createFigure({\n                    name: \"text\",\n                    attrs: {\n                        x: x,\n                        y: priceY,\n                        text: text,\n                        align: textAlgin,\n                        baseline: \"middle\"\n                    },\n                    styles: __assign(__assign({}, lastPriceMarkTextStyles), {\n                        backgroundColor: backgroundColor\n                    })\n                })) === null || _c === void 0 ? void 0 : _c.draw(ctx);\n            }\n        }\n    };\n    return CandleLastPriceLabelView;\n}(View);\n/**\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n\n * http://www.apache.org/licenses/LICENSE-2.0\n\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ var IndicatorLastValueView = /** @class */ function(_super) {\n    __extends(IndicatorLastValueView, _super);\n    function IndicatorLastValueView() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    IndicatorLastValueView.prototype.drawImp = function(ctx) {\n        var _this = this;\n        var widget = this.getWidget();\n        var pane = widget.getPane();\n        var bounding = widget.getBounding();\n        var chartStore = pane.getChart().getChartStore();\n        var defaultStyles = chartStore.getStyles().indicator;\n        var lastValueMarkStyles = defaultStyles.lastValueMark;\n        var lastValueMarkTextStyles = lastValueMarkStyles.text;\n        if (lastValueMarkStyles.show) {\n            var yAxis_1 = pane.getAxisComponent();\n            var yAxisRange_1 = yAxis_1.getRange();\n            var dataList = chartStore.getDataList();\n            var dataIndex_1 = dataList.length - 1;\n            var indicators = chartStore.getIndicatorsByPaneId(pane.getId());\n            var customApi_1 = chartStore.getCustomApi();\n            var decimalFold_1 = chartStore.getDecimalFold();\n            var thousandsSeparator_1 = chartStore.getThousandsSeparator();\n            indicators.forEach(function(indicator) {\n                var _a, _b;\n                var result = indicator.result;\n                var data = (_b = (_a = result[dataIndex_1]) !== null && _a !== void 0 ? _a : result[dataIndex_1 - 1]) !== null && _b !== void 0 ? _b : {};\n                if (isValid(data) && indicator.visible) {\n                    var precision_1 = indicator.precision;\n                    eachFigures(indicator, dataIndex_1, defaultStyles, function(figure, figureStyles) {\n                        var _a;\n                        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment -- ignore\n                        var value = data[figure.key];\n                        if (isNumber(value)) {\n                            var y = yAxis_1.convertToNicePixel(value);\n                            var text = yAxis_1.displayValueToText(yAxis_1.realValueToDisplayValue(yAxis_1.valueToRealValue(value, {\n                                range: yAxisRange_1\n                            }), {\n                                range: yAxisRange_1\n                            }), precision_1);\n                            if (indicator.shouldFormatBigNumber) {\n                                text = customApi_1.formatBigNumber(text);\n                            }\n                            text = decimalFold_1.format(thousandsSeparator_1.format(text));\n                            var x = 0;\n                            var textAlign = \"left\";\n                            if (yAxis_1.isFromZero()) {\n                                x = 0;\n                                textAlign = \"left\";\n                            } else {\n                                x = bounding.width;\n                                textAlign = \"right\";\n                            }\n                            (_a = _this.createFigure({\n                                name: \"text\",\n                                attrs: {\n                                    x: x,\n                                    y: y,\n                                    text: text,\n                                    align: textAlign,\n                                    baseline: \"middle\"\n                                },\n                                styles: __assign(__assign({}, lastValueMarkTextStyles), {\n                                    backgroundColor: figureStyles.color\n                                })\n                            })) === null || _a === void 0 ? void 0 : _a.draw(ctx);\n                        }\n                    });\n                }\n            });\n        }\n    };\n    return IndicatorLastValueView;\n}(View);\n/**\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n\n * http://www.apache.org/licenses/LICENSE-2.0\n\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ var OverlayYAxisView = /** @class */ function(_super) {\n    __extends(OverlayYAxisView, _super);\n    function OverlayYAxisView() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    OverlayYAxisView.prototype.coordinateToPointTimestampDataIndexFlag = function() {\n        return false;\n    };\n    OverlayYAxisView.prototype.drawDefaultFigures = function(ctx, overlay, coordinates) {\n        this.drawFigures(ctx, overlay, this.getDefaultFigures(overlay, coordinates));\n    };\n    OverlayYAxisView.prototype.getDefaultFigures = function(overlay, coordinates) {\n        var _a;\n        var widget = this.getWidget();\n        var pane = widget.getPane();\n        var chartStore = pane.getChart().getChartStore();\n        var clickOverlayInfo = chartStore.getClickOverlayInfo();\n        var figures = [];\n        if (overlay.needDefaultYAxisFigure && overlay.id === ((_a = clickOverlayInfo.overlay) === null || _a === void 0 ? void 0 : _a.id) && clickOverlayInfo.paneId === pane.getId()) {\n            var yAxis = pane.getAxisComponent();\n            var bounding = widget.getBounding();\n            var topY_1 = Number.MAX_SAFE_INTEGER;\n            var bottomY_1 = Number.MIN_SAFE_INTEGER;\n            var isFromZero = yAxis.isFromZero();\n            var textAlign_1 = \"left\";\n            var x_1 = 0;\n            if (isFromZero) {\n                textAlign_1 = \"left\";\n                x_1 = 0;\n            } else {\n                textAlign_1 = \"right\";\n                x_1 = bounding.width;\n            }\n            var decimalFold_1 = chartStore.getDecimalFold();\n            var thousandsSeparator_1 = chartStore.getThousandsSeparator();\n            coordinates.forEach(function(coordinate, index) {\n                var point = overlay.points[index];\n                if (isNumber(point.value)) {\n                    topY_1 = Math.min(topY_1, coordinate.y);\n                    bottomY_1 = Math.max(bottomY_1, coordinate.y);\n                    var text = decimalFold_1.format(thousandsSeparator_1.format(formatPrecision(point.value, chartStore.getPrecision().price)));\n                    figures.push({\n                        type: \"text\",\n                        attrs: {\n                            x: x_1,\n                            y: coordinate.y,\n                            text: text,\n                            align: textAlign_1,\n                            baseline: \"middle\"\n                        },\n                        ignoreEvent: true\n                    });\n                }\n            });\n            if (coordinates.length > 1) {\n                figures.unshift({\n                    type: \"rect\",\n                    attrs: {\n                        x: 0,\n                        y: topY_1,\n                        width: bounding.width,\n                        height: bottomY_1 - topY_1\n                    },\n                    ignoreEvent: true\n                });\n            }\n        }\n        return figures;\n    };\n    OverlayYAxisView.prototype.getFigures = function(overlay, coordinates) {\n        var _a, _b;\n        var widget = this.getWidget();\n        var pane = widget.getPane();\n        var chart = pane.getChart();\n        var yAxis = pane.getAxisComponent();\n        var xAxis = chart.getXAxisPane().getAxisComponent();\n        var bounding = widget.getBounding();\n        return (_b = (_a = overlay.createYAxisFigures) === null || _a === void 0 ? void 0 : _a.call(overlay, {\n            chart: chart,\n            overlay: overlay,\n            coordinates: coordinates,\n            bounding: bounding,\n            xAxis: xAxis,\n            yAxis: yAxis\n        })) !== null && _b !== void 0 ? _b : [];\n    };\n    return OverlayYAxisView;\n}(OverlayView);\n/**\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n\n * http://www.apache.org/licenses/LICENSE-2.0\n\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ var CrosshairHorizontalLabelView = /** @class */ function(_super) {\n    __extends(CrosshairHorizontalLabelView, _super);\n    function CrosshairHorizontalLabelView() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    CrosshairHorizontalLabelView.prototype.drawImp = function(ctx) {\n        var _a;\n        var widget = this.getWidget();\n        var pane = widget.getPane();\n        var bounding = widget.getBounding();\n        var chartStore = widget.getPane().getChart().getChartStore();\n        var crosshair = chartStore.getCrosshair();\n        var styles = chartStore.getStyles().crosshair;\n        if (isString(crosshair.paneId) && this.compare(crosshair, pane.getId())) {\n            if (styles.show) {\n                var directionStyles = this.getDirectionStyles(styles);\n                var textStyles = directionStyles.text;\n                if (directionStyles.show && textStyles.show) {\n                    var axis = pane.getAxisComponent();\n                    var text = this.getText(crosshair, chartStore, axis);\n                    ctx.font = createFont(textStyles.size, textStyles.weight, textStyles.family);\n                    (_a = this.createFigure({\n                        name: \"text\",\n                        attrs: this.getTextAttrs(text, ctx.measureText(text).width, crosshair, bounding, axis, textStyles),\n                        styles: textStyles\n                    })) === null || _a === void 0 ? void 0 : _a.draw(ctx);\n                }\n            }\n        }\n    };\n    CrosshairHorizontalLabelView.prototype.compare = function(crosshair, paneId) {\n        return crosshair.paneId === paneId;\n    };\n    CrosshairHorizontalLabelView.prototype.getDirectionStyles = function(styles) {\n        return styles.horizontal;\n    };\n    CrosshairHorizontalLabelView.prototype.getText = function(crosshair, chartStore, axis) {\n        var yAxis = axis;\n        var value = axis.convertFromPixel(crosshair.y);\n        var precision = 0;\n        var shouldFormatBigNumber = false;\n        if (yAxis.isInCandle()) {\n            precision = chartStore.getPrecision().price;\n        } else {\n            var indicators = chartStore.getIndicatorsByPaneId(crosshair.paneId);\n            indicators.forEach(function(indicator) {\n                precision = Math.max(indicator.precision, precision);\n                shouldFormatBigNumber || (shouldFormatBigNumber = indicator.shouldFormatBigNumber);\n            });\n        }\n        var yAxisRange = yAxis.getRange();\n        var text = yAxis.displayValueToText(yAxis.realValueToDisplayValue(yAxis.valueToRealValue(value, {\n            range: yAxisRange\n        }), {\n            range: yAxisRange\n        }), precision);\n        // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition -- ignore\n        if (shouldFormatBigNumber) {\n            text = chartStore.getCustomApi().formatBigNumber(text);\n        }\n        return chartStore.getDecimalFold().format(chartStore.getThousandsSeparator().format(text));\n    };\n    CrosshairHorizontalLabelView.prototype.getTextAttrs = function(text, _textWidth, crosshair, bounding, axis, _styles) {\n        var yAxis = axis;\n        var x = 0;\n        var textAlign = \"left\";\n        if (yAxis.isFromZero()) {\n            x = 0;\n            textAlign = \"left\";\n        } else {\n            x = bounding.width;\n            textAlign = \"right\";\n        }\n        return {\n            x: x,\n            y: crosshair.y,\n            text: text,\n            align: textAlign,\n            baseline: \"middle\"\n        };\n    };\n    return CrosshairHorizontalLabelView;\n}(View);\n/**\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n\n * http://www.apache.org/licenses/LICENSE-2.0\n\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ var YAxisWidget = /** @class */ function(_super) {\n    __extends(YAxisWidget, _super);\n    function YAxisWidget(rootContainer, pane) {\n        var _this = _super.call(this, rootContainer, pane) || this;\n        _this._yAxisView = new YAxisView(_this);\n        _this._candleLastPriceLabelView = new CandleLastPriceLabelView(_this);\n        _this._indicatorLastValueView = new IndicatorLastValueView(_this);\n        _this._overlayYAxisView = new OverlayYAxisView(_this);\n        _this._crosshairHorizontalLabelView = new CrosshairHorizontalLabelView(_this);\n        _this.getContainer().style.cursor = \"ns-resize\";\n        _this.addChild(_this._overlayYAxisView);\n        return _this;\n    }\n    YAxisWidget.prototype.getName = function() {\n        return WidgetNameConstants.Y_AXIS;\n    };\n    YAxisWidget.prototype.updateMain = function(ctx) {\n        var minimize = this.getPane().getOptions().state === \"minimize\" /* PaneState.Minimize */ ;\n        this._yAxisView.draw(ctx, minimize);\n        if (!minimize) {\n            if (this.getPane().getAxisComponent().isInCandle()) {\n                this._candleLastPriceLabelView.draw(ctx);\n            }\n            this._indicatorLastValueView.draw(ctx);\n        }\n    };\n    YAxisWidget.prototype.updateOverlay = function(ctx) {\n        if (this.getPane().getOptions().state !== \"minimize\" /* PaneState.Minimize */ ) {\n            this._overlayYAxisView.draw(ctx);\n            this._crosshairHorizontalLabelView.draw(ctx);\n        }\n    };\n    return YAxisWidget;\n}(DrawWidget);\n/**\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n\n * http://www.apache.org/licenses/LICENSE-2.0\n\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ var TICK_COUNT = 8;\nvar YAxisImp = /** @class */ function(_super) {\n    __extends(YAxisImp, _super);\n    function YAxisImp(parent, yAxis) {\n        var _this = _super.call(this, parent) || this;\n        _this.reverse = false;\n        _this.inside = false;\n        _this.position = AxisPosition.Right;\n        _this.gap = {\n            top: 0.2,\n            bottom: 0.1\n        };\n        _this.createRange = function(params) {\n            return params.defaultRange;\n        };\n        _this.minSpan = function(precision) {\n            return index10(-precision);\n        };\n        _this.valueToRealValue = function(value) {\n            return value;\n        };\n        _this.realValueToDisplayValue = function(value) {\n            return value;\n        };\n        _this.displayValueToRealValue = function(value) {\n            return value;\n        };\n        _this.realValueToValue = function(value) {\n            return value;\n        };\n        _this.displayValueToText = function(value, precision) {\n            return formatPrecision(value, precision);\n        };\n        _this.override(yAxis);\n        return _this;\n    }\n    YAxisImp.prototype.override = function(yAxis) {\n        var name = yAxis.name, gap = yAxis.gap, others = __rest(yAxis, [\n            \"name\",\n            \"gap\"\n        ]);\n        if (!isString(this.name)) {\n            this.name = name;\n        }\n        merge(this.gap, gap);\n        merge(this, others);\n    };\n    YAxisImp.prototype.createRangeImp = function() {\n        var parent = this.getParent();\n        var chart = parent.getChart();\n        var chartStore = chart.getChartStore();\n        var paneId = parent.getId();\n        var min = Number.MAX_SAFE_INTEGER;\n        var max = Number.MIN_SAFE_INTEGER;\n        var shouldOhlc = false;\n        var specifyMin = Number.MAX_SAFE_INTEGER;\n        var specifyMax = Number.MIN_SAFE_INTEGER;\n        var indicatorPrecision = Number.MAX_SAFE_INTEGER;\n        var indicators = chartStore.getIndicatorsByPaneId(paneId);\n        indicators.forEach(function(indicator) {\n            shouldOhlc || (shouldOhlc = indicator.shouldOhlc);\n            indicatorPrecision = Math.min(indicatorPrecision, indicator.precision);\n            if (isNumber(indicator.minValue)) {\n                specifyMin = Math.min(specifyMin, indicator.minValue);\n            }\n            if (isNumber(indicator.maxValue)) {\n                specifyMax = Math.max(specifyMax, indicator.maxValue);\n            }\n        });\n        var precision = 4;\n        var inCandle = this.isInCandle();\n        if (inCandle) {\n            var pricePrecision = chartStore.getPrecision().price;\n            if (indicatorPrecision !== Number.MAX_SAFE_INTEGER) {\n                precision = Math.min(indicatorPrecision, pricePrecision);\n            } else {\n                precision = pricePrecision;\n            }\n        } else {\n            if (indicatorPrecision !== Number.MAX_SAFE_INTEGER) {\n                precision = indicatorPrecision;\n            }\n        }\n        var visibleRangeDataList = chartStore.getVisibleRangeDataList();\n        var candleStyles = chart.getStyles().candle;\n        var isArea = candleStyles.type === CandleType.Area;\n        var areaValueKey = candleStyles.area.value;\n        var shouldCompareHighLow = inCandle && !isArea || !inCandle && shouldOhlc;\n        visibleRangeDataList.forEach(function(visibleData) {\n            var dataIndex = visibleData.dataIndex;\n            var data = visibleData.data.current;\n            if (isValid(data)) {\n                if (shouldCompareHighLow) {\n                    min = Math.min(min, data.low);\n                    max = Math.max(max, data.high);\n                }\n                if (inCandle && isArea) {\n                    var value = data[areaValueKey];\n                    if (isNumber(value)) {\n                        min = Math.min(min, value);\n                        max = Math.max(max, value);\n                    }\n                }\n            }\n            indicators.forEach(function(_a) {\n                var _b;\n                var result = _a.result, figures = _a.figures;\n                var data = (_b = result[dataIndex]) !== null && _b !== void 0 ? _b : {};\n                figures.forEach(function(figure) {\n                    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment -- ignore\n                    var value = data[figure.key];\n                    if (isNumber(value)) {\n                        min = Math.min(min, value);\n                        max = Math.max(max, value);\n                    }\n                });\n            });\n        });\n        if (min !== Number.MAX_SAFE_INTEGER && max !== Number.MIN_SAFE_INTEGER) {\n            min = Math.min(specifyMin, min);\n            max = Math.max(specifyMax, max);\n        } else {\n            min = 0;\n            max = 10;\n        }\n        var defaultDiff = max - min;\n        var defaultRange = {\n            from: min,\n            to: max,\n            range: defaultDiff,\n            realFrom: min,\n            realTo: max,\n            realRange: defaultDiff,\n            displayFrom: min,\n            displayTo: max,\n            displayRange: defaultDiff\n        };\n        var range = this.createRange({\n            chart: chart,\n            paneId: paneId,\n            defaultRange: defaultRange\n        });\n        var realFrom = range.realFrom;\n        var realTo = range.realTo;\n        var realRange = range.realRange;\n        var minSpan = this.minSpan(precision);\n        if (realFrom === realTo || realRange < minSpan) {\n            var minCheck = specifyMin === realFrom;\n            var maxCheck = specifyMax === realTo;\n            var halfTickCount = TICK_COUNT / 2;\n            realFrom = minCheck ? realFrom : maxCheck ? realFrom - TICK_COUNT * minSpan : realFrom - halfTickCount * minSpan;\n            realTo = maxCheck ? realTo : minCheck ? realTo + TICK_COUNT * minSpan : realTo + halfTickCount * minSpan;\n        }\n        var height = this.getBounding().height;\n        var _a = this.gap, top = _a.top, bottom = _a.bottom;\n        var topRate = top;\n        if (topRate >= 1) {\n            topRate = topRate / height;\n        }\n        var bottomRate = bottom;\n        if (bottomRate >= 1) {\n            bottomRate = bottomRate / height;\n        }\n        realRange = realTo - realFrom;\n        realFrom = realFrom - realRange * bottomRate;\n        realTo = realTo + realRange * topRate;\n        var from = this.realValueToValue(realFrom, {\n            range: range\n        });\n        var to = this.realValueToValue(realTo, {\n            range: range\n        });\n        var displayFrom = this.realValueToDisplayValue(realFrom, {\n            range: range\n        });\n        var displayTo = this.realValueToDisplayValue(realTo, {\n            range: range\n        });\n        return {\n            from: from,\n            to: to,\n            range: to - from,\n            realFrom: realFrom,\n            realTo: realTo,\n            realRange: realTo - realFrom,\n            displayFrom: displayFrom,\n            displayTo: displayTo,\n            displayRange: displayTo - displayFrom\n        };\n    };\n    /**\n     * 是否是蜡烛图轴\n     * @return {boolean}\n     */ YAxisImp.prototype.isInCandle = function() {\n        return this.getParent().getId() === PaneIdConstants.CANDLE;\n    };\n    /**\n     * 是否从y轴0开始\n     * @return {boolean}\n     */ YAxisImp.prototype.isFromZero = function() {\n        return this.position === AxisPosition.Left && this.inside || this.position === AxisPosition.Right && !this.inside;\n    };\n    YAxisImp.prototype.createTicksImp = function() {\n        var _this = this;\n        var _a, _b;\n        var range = this.getRange();\n        var displayFrom = range.displayFrom, displayTo = range.displayTo, displayRange = range.displayRange;\n        var ticks = [];\n        if (displayRange >= 0) {\n            var interval = nice(displayRange / TICK_COUNT);\n            var precision_1 = getPrecision(interval);\n            var first = round(Math.ceil(displayFrom / interval) * interval, precision_1);\n            var last = round(Math.floor(displayTo / interval) * interval, precision_1);\n            var n = 0;\n            var f = first;\n            if (interval !== 0) {\n                while(f <= last){\n                    var v = f.toFixed(precision_1);\n                    ticks[n] = {\n                        text: v,\n                        coord: 0,\n                        value: v\n                    };\n                    ++n;\n                    f += interval;\n                }\n            }\n        }\n        var pane = this.getParent();\n        var height = (_b = (_a = pane.getYAxisWidget()) === null || _a === void 0 ? void 0 : _a.getBounding().height) !== null && _b !== void 0 ? _b : 0;\n        var chartStore = pane.getChart().getChartStore();\n        var optimalTicks = [];\n        var indicators = chartStore.getIndicatorsByPaneId(pane.getId());\n        var styles = chartStore.getStyles();\n        var precision = 0;\n        var shouldFormatBigNumber = false;\n        if (this.isInCandle()) {\n            precision = chartStore.getPrecision().price;\n        } else {\n            indicators.forEach(function(indicator) {\n                precision = Math.max(precision, indicator.precision);\n                shouldFormatBigNumber || (shouldFormatBigNumber = indicator.shouldFormatBigNumber);\n            });\n        }\n        var customApi = chartStore.getCustomApi();\n        var thousandsSeparator = chartStore.getThousandsSeparator();\n        var decimalFold = chartStore.getDecimalFold();\n        var textHeight = styles.xAxis.tickText.size;\n        var validY = NaN;\n        ticks.forEach(function(_a) {\n            var value = _a.value;\n            var v = _this.displayValueToText(+value, precision);\n            var y = _this.convertToPixel(_this.realValueToValue(_this.displayValueToRealValue(+value, {\n                range: range\n            }), {\n                range: range\n            }));\n            if (shouldFormatBigNumber) {\n                v = customApi.formatBigNumber(value);\n            }\n            v = decimalFold.format(thousandsSeparator.format(v));\n            var validYNumber = isNumber(validY);\n            if (y > textHeight && y < height - textHeight && (validYNumber && Math.abs(validY - y) > textHeight * 2 || !validYNumber)) {\n                optimalTicks.push({\n                    text: v,\n                    coord: y,\n                    value: value\n                });\n                validY = y;\n            }\n        });\n        if (isFunction(this.createTicks)) {\n            return this.createTicks({\n                range: this.getRange(),\n                bounding: this.getBounding(),\n                defaultTicks: optimalTicks\n            });\n        }\n        return optimalTicks;\n    };\n    YAxisImp.prototype.getAutoSize = function() {\n        var pane = this.getParent();\n        var chart = pane.getChart();\n        var chartStore = chart.getChartStore();\n        var styles = chartStore.getStyles();\n        var yAxisStyles = styles.yAxis;\n        var width = yAxisStyles.size;\n        if (width !== \"auto\") {\n            return width;\n        }\n        var yAxisWidth = 0;\n        if (yAxisStyles.show) {\n            if (yAxisStyles.axisLine.show) {\n                yAxisWidth += yAxisStyles.axisLine.size;\n            }\n            if (yAxisStyles.tickLine.show) {\n                yAxisWidth += yAxisStyles.tickLine.length;\n            }\n            if (yAxisStyles.tickText.show) {\n                var textWidth_1 = 0;\n                this.getTicks().forEach(function(tick) {\n                    textWidth_1 = Math.max(textWidth_1, calcTextWidth(tick.text, yAxisStyles.tickText.size, yAxisStyles.tickText.weight, yAxisStyles.tickText.family));\n                });\n                yAxisWidth += yAxisStyles.tickText.marginStart + yAxisStyles.tickText.marginEnd + textWidth_1;\n            }\n        }\n        var crosshairStyles = styles.crosshair;\n        var crosshairVerticalTextWidth = 0;\n        if (crosshairStyles.show && crosshairStyles.horizontal.show && crosshairStyles.horizontal.text.show) {\n            var indicators = chartStore.getIndicatorsByPaneId(pane.getId());\n            var indicatorPrecision_1 = 0;\n            var shouldFormatBigNumber_1 = false;\n            indicators.forEach(function(indicator) {\n                indicatorPrecision_1 = Math.max(indicator.precision, indicatorPrecision_1);\n                shouldFormatBigNumber_1 || (shouldFormatBigNumber_1 = indicator.shouldFormatBigNumber);\n            });\n            var precision = 2;\n            if (this.isInCandle()) {\n                var pricePrecision = chartStore.getPrecision().price;\n                var lastValueMarkStyles = styles.indicator.lastValueMark;\n                if (lastValueMarkStyles.show && lastValueMarkStyles.text.show) {\n                    precision = Math.max(indicatorPrecision_1, pricePrecision);\n                } else {\n                    precision = pricePrecision;\n                }\n            } else {\n                precision = indicatorPrecision_1;\n            }\n            var valueText = formatPrecision(this.getRange().displayTo, precision);\n            // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition -- ignore\n            if (shouldFormatBigNumber_1) {\n                valueText = chartStore.getCustomApi().formatBigNumber(valueText);\n            }\n            valueText = chartStore.getDecimalFold().format(valueText);\n            crosshairVerticalTextWidth += crosshairStyles.horizontal.text.paddingLeft + crosshairStyles.horizontal.text.paddingRight + crosshairStyles.horizontal.text.borderSize * 2 + calcTextWidth(valueText, crosshairStyles.horizontal.text.size, crosshairStyles.horizontal.text.weight, crosshairStyles.horizontal.text.family);\n        }\n        return Math.max(yAxisWidth, crosshairVerticalTextWidth);\n    };\n    YAxisImp.prototype.getBounding = function() {\n        return this.getParent().getYAxisWidget().getBounding();\n    };\n    YAxisImp.prototype.convertFromPixel = function(pixel) {\n        var height = this.getBounding().height;\n        var range = this.getRange();\n        var realFrom = range.realFrom, realRange = range.realRange;\n        var rate = this.reverse ? pixel / height : 1 - pixel / height;\n        var realValue = rate * realRange + realFrom;\n        return this.realValueToValue(realValue, {\n            range: range\n        });\n    };\n    YAxisImp.prototype.convertToPixel = function(value) {\n        var _a, _b;\n        var range = this.getRange();\n        var realValue = this.valueToRealValue(value, {\n            range: range\n        });\n        var height = (_b = (_a = this.getParent().getYAxisWidget()) === null || _a === void 0 ? void 0 : _a.getBounding().height) !== null && _b !== void 0 ? _b : 0;\n        var realFrom = range.realFrom, realRange = range.realRange;\n        var rate = (realValue - realFrom) / realRange;\n        return this.reverse ? Math.round(rate * height) : Math.round((1 - rate) * height);\n    };\n    YAxisImp.prototype.convertToNicePixel = function(value) {\n        var _a, _b;\n        var height = (_b = (_a = this.getParent().getYAxisWidget()) === null || _a === void 0 ? void 0 : _a.getBounding().height) !== null && _b !== void 0 ? _b : 0;\n        var pixel = this.convertToPixel(value);\n        return Math.round(Math.max(height * 0.05, Math.min(pixel, height * 0.98)));\n    };\n    YAxisImp.extend = function(template) {\n        var Custom = /** @class */ function(_super) {\n            __extends(Custom, _super);\n            function Custom(parent) {\n                return _super.call(this, parent, template) || this;\n            }\n            return Custom;\n        }(YAxisImp);\n        return Custom;\n    };\n    return YAxisImp;\n}(AxisImp);\n/**\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n\n * http://www.apache.org/licenses/LICENSE-2.0\n\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ var normal$1 = {\n    name: \"normal\"\n};\n/**\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n\n * http://www.apache.org/licenses/LICENSE-2.0\n\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ var percentage = {\n    name: \"percentage\",\n    minSpan: function() {\n        return Math.pow(10, -2);\n    },\n    displayValueToText: function(value) {\n        return \"\".concat(formatPrecision(value, 2), \"%\");\n    },\n    valueToRealValue: function(value, _a) {\n        var range = _a.range;\n        return (value - range.from) / range.range * range.realRange + range.realFrom;\n    },\n    realValueToValue: function(value, _a) {\n        var range = _a.range;\n        return (value - range.realFrom) / range.realRange * range.range + range.from;\n    },\n    createRange: function(_a) {\n        var chart = _a.chart, defaultRange = _a.defaultRange;\n        var kLineDataList = chart.getDataList();\n        var visibleRange = chart.getVisibleRange();\n        var kLineData = kLineDataList[visibleRange.from];\n        if (isValid(kLineData)) {\n            var from = defaultRange.from, to = defaultRange.to, range = defaultRange.range;\n            var realFrom = (defaultRange.from - kLineData.close) / kLineData.close * 100;\n            var realTo = (defaultRange.to - kLineData.close) / kLineData.close * 100;\n            var realRange = realTo - realFrom;\n            return {\n                from: from,\n                to: to,\n                range: range,\n                realFrom: realFrom,\n                realTo: realTo,\n                realRange: realRange,\n                displayFrom: realFrom,\n                displayTo: realTo,\n                displayRange: realRange\n            };\n        }\n        return defaultRange;\n    }\n};\n/**\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n\n * http://www.apache.org/licenses/LICENSE-2.0\n\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ var logarithm = {\n    name: \"logarithm\",\n    minSpan: function(precision) {\n        return 0.05 * index10(-precision);\n    },\n    valueToRealValue: function(value) {\n        return value < 0 ? -log10(Math.abs(value)) : log10(value);\n    },\n    realValueToDisplayValue: function(value) {\n        return value < 0 ? -index10(Math.abs(value)) : index10(value);\n    },\n    displayValueToRealValue: function(value) {\n        return value < 0 ? -log10(Math.abs(value)) : log10(value);\n    },\n    realValueToValue: function(value) {\n        return value < 0 ? -index10(Math.abs(value)) : index10(value);\n    },\n    createRange: function(_a) {\n        var defaultRange = _a.defaultRange;\n        var from = defaultRange.from, to = defaultRange.to, range = defaultRange.range;\n        var realFrom = from < 0 ? -log10(Math.abs(from)) : log10(from);\n        var realTo = to < 0 ? -log10(Math.abs(to)) : log10(to);\n        return {\n            from: from,\n            to: to,\n            range: range,\n            realFrom: realFrom,\n            realTo: realTo,\n            realRange: realTo - realFrom,\n            displayFrom: from,\n            displayTo: to,\n            displayRange: range\n        };\n    }\n};\n/**\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n\n * http://www.apache.org/licenses/LICENSE-2.0\n\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ var yAxises = {\n    normal: YAxisImp.extend(normal$1),\n    percentage: YAxisImp.extend(percentage),\n    logarithm: YAxisImp.extend(logarithm)\n};\nfunction registerYAxis(axis) {\n    yAxises[axis.name] = YAxisImp.extend(axis);\n}\nfunction getYAxisClass(name) {\n    var _a;\n    return (_a = yAxises[name]) !== null && _a !== void 0 ? _a : yAxises.normal;\n}\n/**\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n\n * http://www.apache.org/licenses/LICENSE-2.0\n\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ var Pane = /** @class */ function() {\n    function Pane(chart, id) {\n        this._bounding = createDefaultBounding();\n        this._originalBounding = createDefaultBounding();\n        this._visible = true;\n        this._chart = chart;\n        this._id = id;\n        this._container = createDom(\"div\", {\n            width: \"100%\",\n            margin: \"0\",\n            padding: \"0\",\n            position: \"relative\",\n            overflow: \"hidden\",\n            boxSizing: \"border-box\"\n        });\n    }\n    Pane.prototype.getContainer = function() {\n        return this._container;\n    };\n    Pane.prototype.setVisible = function(visible) {\n        if (this._visible !== visible) {\n            this._container.style.display = visible ? \"block\" : \"none\";\n            this._visible = visible;\n        }\n    };\n    Pane.prototype.getVisible = function() {\n        return this._visible;\n    };\n    Pane.prototype.getId = function() {\n        return this._id;\n    };\n    Pane.prototype.getChart = function() {\n        return this._chart;\n    };\n    Pane.prototype.getBounding = function() {\n        return this._bounding;\n    };\n    Pane.prototype.setOriginalBounding = function(bounding) {\n        merge(this._originalBounding, bounding);\n    };\n    Pane.prototype.getOriginalBounding = function() {\n        return this._originalBounding;\n    };\n    Pane.prototype.update = function(level) {\n        if (this._bounding.height !== this._container.clientHeight) {\n            this._container.style.height = \"\".concat(this._bounding.height, \"px\");\n        }\n        this.updateImp(level !== null && level !== void 0 ? level : 3 /* UpdateLevel.Drawer */ , this._container, this._bounding);\n    };\n    return Pane;\n}();\n/**\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n\n * http://www.apache.org/licenses/LICENSE-2.0\n\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ var DrawPane = /** @class */ function(_super) {\n    __extends(DrawPane, _super);\n    function DrawPane(chart, id, options) {\n        var _this = _super.call(this, chart, id) || this;\n        _this._yAxisWidget = null;\n        _this._options = {\n            id: \"\",\n            minHeight: PANE_MIN_HEIGHT,\n            dragEnabled: true,\n            order: 0,\n            height: PANE_DEFAULT_HEIGHT,\n            state: \"normal\" /* PaneState.Normal */ ,\n            axis: {\n                name: \"normal\",\n                scrollZoomEnabled: true\n            }\n        };\n        var container = _this.getContainer();\n        _this._mainWidget = _this.createMainWidget(container);\n        _this._yAxisWidget = _this.createYAxisWidget(container);\n        _this.setOptions(options);\n        return _this;\n    }\n    DrawPane.prototype.setOptions = function(options) {\n        var _a, _b, _c, _d, _e;\n        var paneId = this.getId();\n        if (paneId === PaneIdConstants.CANDLE || paneId === PaneIdConstants.X_AXIS) {\n            var axisName = (_a = options.axis) === null || _a === void 0 ? void 0 : _a.name;\n            if (!isValid(this._axis) || isValid(axisName) && this._options.axis.name !== axisName) {\n                this._axis = this.createAxisComponent(axisName !== null && axisName !== void 0 ? axisName : \"normal\");\n            }\n        } else {\n            if (!isValid(this._axis)) {\n                this._axis = this.createAxisComponent(\"normal\");\n            }\n        }\n        if (this._axis instanceof YAxisImp) {\n            this._axis.setAutoCalcTickFlag(true);\n        }\n        merge(this._options, options);\n        this._axis.override(__assign(__assign({}, this._options.axis), {\n            name: (_c = (_b = options.axis) === null || _b === void 0 ? void 0 : _b.name) !== null && _c !== void 0 ? _c : \"normal\"\n        }));\n        var container = null;\n        var cursor = \"default\";\n        if (this.getId() === PaneIdConstants.X_AXIS) {\n            container = this.getMainWidget().getContainer();\n            cursor = \"ew-resize\";\n        } else {\n            container = this.getYAxisWidget().getContainer();\n            cursor = \"ns-resize\";\n        }\n        if ((_e = (_d = options.axis) === null || _d === void 0 ? void 0 : _d.scrollZoomEnabled) !== null && _e !== void 0 ? _e : true) {\n            container.style.cursor = cursor;\n        } else {\n            container.style.cursor = \"default\";\n        }\n        return this;\n    };\n    DrawPane.prototype.getOptions = function() {\n        return this._options;\n    };\n    DrawPane.prototype.getAxisComponent = function() {\n        return this._axis;\n    };\n    DrawPane.prototype.setBounding = function(rootBounding, mainBounding, leftYAxisBounding, rightYAxisBounding) {\n        var _a, _b, _c, _d;\n        merge(this.getBounding(), rootBounding);\n        var contentBounding = {};\n        if (isValid(rootBounding.height)) {\n            contentBounding.height = rootBounding.height;\n        }\n        if (isValid(rootBounding.top)) {\n            contentBounding.top = rootBounding.top;\n        }\n        this._mainWidget.setBounding(contentBounding);\n        var mainBoundingValid = isValid(mainBounding);\n        if (mainBoundingValid) {\n            this._mainWidget.setBounding(mainBounding);\n        }\n        if (isValid(this._yAxisWidget)) {\n            this._yAxisWidget.setBounding(contentBounding);\n            var yAxis = this._axis;\n            if (yAxis.position === AxisPosition.Left) {\n                if (isValid(leftYAxisBounding)) {\n                    this._yAxisWidget.setBounding(__assign(__assign({}, leftYAxisBounding), {\n                        left: 0\n                    }));\n                }\n            } else {\n                if (isValid(rightYAxisBounding)) {\n                    this._yAxisWidget.setBounding(rightYAxisBounding);\n                    if (mainBoundingValid) {\n                        this._yAxisWidget.setBounding({\n                            left: ((_a = mainBounding.left) !== null && _a !== void 0 ? _a : 0) + ((_b = mainBounding.width) !== null && _b !== void 0 ? _b : 0) + ((_c = mainBounding.right) !== null && _c !== void 0 ? _c : 0) - ((_d = rightYAxisBounding.width) !== null && _d !== void 0 ? _d : 0)\n                        });\n                    }\n                }\n            }\n        }\n        return this;\n    };\n    DrawPane.prototype.getMainWidget = function() {\n        return this._mainWidget;\n    };\n    DrawPane.prototype.getYAxisWidget = function() {\n        return this._yAxisWidget;\n    };\n    DrawPane.prototype.updateImp = function(level) {\n        var _a;\n        this._mainWidget.update(level);\n        (_a = this._yAxisWidget) === null || _a === void 0 ? void 0 : _a.update(level);\n    };\n    DrawPane.prototype.destroy = function() {\n        var _a;\n        this._mainWidget.destroy();\n        (_a = this._yAxisWidget) === null || _a === void 0 ? void 0 : _a.destroy();\n    };\n    DrawPane.prototype.getImage = function(includeOverlay) {\n        var _a = this.getBounding(), width = _a.width, height = _a.height;\n        var canvas = createDom(\"canvas\", {\n            width: \"\".concat(width, \"px\"),\n            height: \"\".concat(height, \"px\"),\n            boxSizing: \"border-box\"\n        });\n        var ctx = canvas.getContext(\"2d\");\n        var pixelRatio = getPixelRatio(canvas);\n        canvas.width = width * pixelRatio;\n        canvas.height = height * pixelRatio;\n        ctx.scale(pixelRatio, pixelRatio);\n        var mainBounding = this._mainWidget.getBounding();\n        ctx.drawImage(this._mainWidget.getImage(includeOverlay), mainBounding.left, 0, mainBounding.width, mainBounding.height);\n        if (this._yAxisWidget !== null) {\n            var yAxisBounding = this._yAxisWidget.getBounding();\n            ctx.drawImage(this._yAxisWidget.getImage(includeOverlay), yAxisBounding.left, 0, yAxisBounding.width, yAxisBounding.height);\n        }\n        return canvas;\n    };\n    DrawPane.prototype.createYAxisWidget = function(_container) {\n        return null;\n    };\n    return DrawPane;\n}(Pane);\n/**\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n\n * http://www.apache.org/licenses/LICENSE-2.0\n\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ var IndicatorPane = /** @class */ function(_super) {\n    __extends(IndicatorPane, _super);\n    function IndicatorPane() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    IndicatorPane.prototype.createAxisComponent = function(name) {\n        var YAxisClass = getYAxisClass(name !== null && name !== void 0 ? name : \"default\");\n        return new YAxisClass(this);\n    };\n    IndicatorPane.prototype.createMainWidget = function(container) {\n        return new IndicatorWidget(container, this);\n    };\n    IndicatorPane.prototype.createYAxisWidget = function(container) {\n        return new YAxisWidget(container, this);\n    };\n    return IndicatorPane;\n}(DrawPane);\n/**\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n\n * http://www.apache.org/licenses/LICENSE-2.0\n\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ var CandlePane = /** @class */ function(_super) {\n    __extends(CandlePane, _super);\n    function CandlePane() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    CandlePane.prototype.createMainWidget = function(container) {\n        return new CandleWidget(container, this);\n    };\n    return CandlePane;\n}(IndicatorPane);\n/**\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n\n * http://www.apache.org/licenses/LICENSE-2.0\n\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ var XAxisView = /** @class */ function(_super) {\n    __extends(XAxisView, _super);\n    function XAxisView() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    XAxisView.prototype.getAxisStyles = function(styles) {\n        return styles.xAxis;\n    };\n    XAxisView.prototype.createAxisLine = function(bounding) {\n        return {\n            coordinates: [\n                {\n                    x: 0,\n                    y: 0\n                },\n                {\n                    x: bounding.width,\n                    y: 0\n                }\n            ]\n        };\n    };\n    XAxisView.prototype.createTickLines = function(ticks, _bounding, styles) {\n        var tickLineStyles = styles.tickLine;\n        var axisLineSize = styles.axisLine.size;\n        return ticks.map(function(tick) {\n            return {\n                coordinates: [\n                    {\n                        x: tick.coord,\n                        y: 0\n                    },\n                    {\n                        x: tick.coord,\n                        y: axisLineSize + tickLineStyles.length\n                    }\n                ]\n            };\n        });\n    };\n    XAxisView.prototype.createTickTexts = function(ticks, _bounding, styles) {\n        var tickTickStyles = styles.tickText;\n        var axisLineSize = styles.axisLine.size;\n        var tickLineLength = styles.tickLine.length;\n        return ticks.map(function(tick) {\n            return {\n                x: tick.coord,\n                y: axisLineSize + tickLineLength + tickTickStyles.marginStart,\n                text: tick.text,\n                align: \"center\",\n                baseline: \"top\"\n            };\n        });\n    };\n    return XAxisView;\n}(AxisView);\n/**\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n\n * http://www.apache.org/licenses/LICENSE-2.0\n\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ var OverlayXAxisView = /** @class */ function(_super) {\n    __extends(OverlayXAxisView, _super);\n    function OverlayXAxisView() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    OverlayXAxisView.prototype.coordinateToPointTimestampDataIndexFlag = function() {\n        return true;\n    };\n    OverlayXAxisView.prototype.coordinateToPointValueFlag = function() {\n        return false;\n    };\n    OverlayXAxisView.prototype.getCompleteOverlays = function() {\n        return this.getWidget().getPane().getChart().getChartStore().getOverlaysByPaneId();\n    };\n    OverlayXAxisView.prototype.getProgressOverlay = function() {\n        var _a, _b;\n        return (_b = (_a = this.getWidget().getPane().getChart().getChartStore().getProgressOverlayInfo()) === null || _a === void 0 ? void 0 : _a.overlay) !== null && _b !== void 0 ? _b : null;\n    };\n    OverlayXAxisView.prototype.getDefaultFigures = function(overlay, coordinates) {\n        var _a;\n        var figures = [];\n        var widget = this.getWidget();\n        var pane = widget.getPane();\n        var chartStore = pane.getChart().getChartStore();\n        var clickOverlayInfo = chartStore.getClickOverlayInfo();\n        if (overlay.needDefaultXAxisFigure && overlay.id === ((_a = clickOverlayInfo.overlay) === null || _a === void 0 ? void 0 : _a.id)) {\n            var leftX_1 = Number.MAX_SAFE_INTEGER;\n            var rightX_1 = Number.MIN_SAFE_INTEGER;\n            coordinates.forEach(function(coordinate, index) {\n                leftX_1 = Math.min(leftX_1, coordinate.x);\n                rightX_1 = Math.max(rightX_1, coordinate.x);\n                var point = overlay.points[index];\n                if (isNumber(point.timestamp)) {\n                    var text = chartStore.getCustomApi().formatDate(point.timestamp, \"YYYY-MM-DD HH:mm\", FormatDateType.Crosshair);\n                    figures.push({\n                        type: \"text\",\n                        attrs: {\n                            x: coordinate.x,\n                            y: 0,\n                            text: text,\n                            align: \"center\"\n                        },\n                        ignoreEvent: true\n                    });\n                }\n            });\n            if (coordinates.length > 1) {\n                figures.unshift({\n                    type: \"rect\",\n                    attrs: {\n                        x: leftX_1,\n                        y: 0,\n                        width: rightX_1 - leftX_1,\n                        height: widget.getBounding().height\n                    },\n                    ignoreEvent: true\n                });\n            }\n        }\n        return figures;\n    };\n    OverlayXAxisView.prototype.getFigures = function(o, coordinates) {\n        var _a, _b;\n        var widget = this.getWidget();\n        var pane = widget.getPane();\n        var chart = pane.getChart();\n        var yAxis = pane.getAxisComponent();\n        var xAxis = chart.getXAxisPane().getAxisComponent();\n        var bounding = widget.getBounding();\n        return (_b = (_a = o.createXAxisFigures) === null || _a === void 0 ? void 0 : _a.call(o, {\n            chart: chart,\n            overlay: o,\n            coordinates: coordinates,\n            bounding: bounding,\n            xAxis: xAxis,\n            yAxis: yAxis\n        })) !== null && _b !== void 0 ? _b : [];\n    };\n    return OverlayXAxisView;\n}(OverlayYAxisView);\n/**\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n\n * http://www.apache.org/licenses/LICENSE-2.0\n\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ var CrosshairVerticalLabelView = /** @class */ function(_super) {\n    __extends(CrosshairVerticalLabelView, _super);\n    function CrosshairVerticalLabelView() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    CrosshairVerticalLabelView.prototype.compare = function(crosshair) {\n        return isValid(crosshair.timestamp);\n    };\n    CrosshairVerticalLabelView.prototype.getDirectionStyles = function(styles) {\n        return styles.vertical;\n    };\n    CrosshairVerticalLabelView.prototype.getText = function(crosshair, chartStore) {\n        var timestamp = crosshair.timestamp;\n        return chartStore.getCustomApi().formatDate(timestamp, \"YYYY-MM-DD HH:mm\", FormatDateType.Crosshair);\n    };\n    CrosshairVerticalLabelView.prototype.getTextAttrs = function(text, textWidth, crosshair, bounding, _axis, styles) {\n        var x = crosshair.realX;\n        var optimalX = 0;\n        var align = \"center\";\n        if (x - textWidth / 2 - styles.paddingLeft < 0) {\n            optimalX = 0;\n            align = \"left\";\n        } else if (x + textWidth / 2 + styles.paddingRight > bounding.width) {\n            optimalX = bounding.width;\n            align = \"right\";\n        } else {\n            optimalX = x;\n        }\n        return {\n            x: optimalX,\n            y: 0,\n            text: text,\n            align: align,\n            baseline: \"top\"\n        };\n    };\n    return CrosshairVerticalLabelView;\n}(CrosshairHorizontalLabelView);\n/**\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n\n * http://www.apache.org/licenses/LICENSE-2.0\n\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ var XAxisWidget = /** @class */ function(_super) {\n    __extends(XAxisWidget, _super);\n    function XAxisWidget(rootContainer, pane) {\n        var _this = _super.call(this, rootContainer, pane) || this;\n        _this._xAxisView = new XAxisView(_this);\n        _this._overlayXAxisView = new OverlayXAxisView(_this);\n        _this._crosshairVerticalLabelView = new CrosshairVerticalLabelView(_this);\n        _this.getContainer().style.cursor = \"ew-resize\";\n        _this.addChild(_this._overlayXAxisView);\n        return _this;\n    }\n    XAxisWidget.prototype.getName = function() {\n        return WidgetNameConstants.X_AXIS;\n    };\n    XAxisWidget.prototype.updateMain = function(ctx) {\n        this._xAxisView.draw(ctx);\n    };\n    XAxisWidget.prototype.updateOverlay = function(ctx) {\n        this._overlayXAxisView.draw(ctx);\n        this._crosshairVerticalLabelView.draw(ctx);\n    };\n    return XAxisWidget;\n}(DrawWidget);\n/**\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n\n * http://www.apache.org/licenses/LICENSE-2.0\n\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ var XAxisImp = /** @class */ function(_super) {\n    __extends(XAxisImp, _super);\n    function XAxisImp(parent, xAxis) {\n        var _this = _super.call(this, parent) || this;\n        _this.override(xAxis);\n        return _this;\n    }\n    XAxisImp.prototype.override = function(xAxis) {\n        var name = xAxis.name, scrollZoomEnabled = xAxis.scrollZoomEnabled, createTicks = xAxis.createTicks;\n        if (!isString(this.name)) {\n            this.name = name;\n        }\n        this.scrollZoomEnabled = scrollZoomEnabled !== null && scrollZoomEnabled !== void 0 ? scrollZoomEnabled : this.scrollZoomEnabled;\n        this.createTicks = createTicks !== null && createTicks !== void 0 ? createTicks : this.createTicks;\n    };\n    XAxisImp.prototype.createRangeImp = function() {\n        var chartStore = this.getParent().getChart().getChartStore();\n        var visibleDataRange = chartStore.getVisibleRange();\n        var realFrom = visibleDataRange.realFrom, realTo = visibleDataRange.realTo;\n        var af = realFrom;\n        var at = realTo;\n        var diff = realTo - realFrom + 1;\n        var range = {\n            from: af,\n            to: at,\n            range: diff,\n            realFrom: af,\n            realTo: at,\n            realRange: diff,\n            displayFrom: af,\n            displayTo: at,\n            displayRange: diff\n        };\n        return range;\n    };\n    XAxisImp.prototype.createTicksImp = function() {\n        var _this = this;\n        var _a = this.getRange(), realFrom = _a.realFrom, realTo = _a.realTo;\n        var chartStore = this.getParent().getChart().getChartStore();\n        var formatDate = chartStore.getCustomApi().formatDate;\n        var timeWeightTickList = chartStore.getTimeWeightTickList();\n        var ticks = [];\n        var fitTicks = function(list, start) {\n            var e_1, _a;\n            try {\n                for(var list_1 = __values(list), list_1_1 = list_1.next(); !list_1_1.done; list_1_1 = list_1.next()){\n                    var timeWeightTick = list_1_1.value;\n                    if (timeWeightTick.dataIndex >= start && timeWeightTick.dataIndex < realTo) {\n                        var timestamp = timeWeightTick.timestamp, weight = timeWeightTick.weight, dataIndex = timeWeightTick.dataIndex;\n                        var text = \"\";\n                        switch(weight){\n                            case TimeWeightConstants.Year:\n                                {\n                                    text = formatDate(timestamp, \"YYYY\", FormatDateType.XAxis);\n                                    break;\n                                }\n                            case TimeWeightConstants.Month:\n                                {\n                                    text = formatDate(timestamp, \"YYYY-MM\", FormatDateType.XAxis);\n                                    break;\n                                }\n                            case TimeWeightConstants.Day:\n                                {\n                                    text = formatDate(timestamp, \"MM-DD\", FormatDateType.XAxis);\n                                    break;\n                                }\n                            case TimeWeightConstants.Hour:\n                            case TimeWeightConstants.Minute:\n                                {\n                                    text = formatDate(timestamp, \"HH:mm\", FormatDateType.XAxis);\n                                    break;\n                                }\n                            case TimeWeightConstants.Second:\n                                {\n                                    text = formatDate(timestamp, \"HH:mm:ss\", FormatDateType.XAxis);\n                                    break;\n                                }\n                            default:\n                                {\n                                    text = formatDate(timestamp, \"YYYY-MM-DD HH:mm\", FormatDateType.XAxis);\n                                    break;\n                                }\n                        }\n                        ticks.push({\n                            coord: _this.convertToPixel(dataIndex),\n                            value: timestamp,\n                            text: text\n                        });\n                    }\n                }\n            } catch (e_1_1) {\n                e_1 = {\n                    error: e_1_1\n                };\n            } finally{\n                try {\n                    if (list_1_1 && !list_1_1.done && (_a = list_1.return)) _a.call(list_1);\n                } finally{\n                    if (e_1) throw e_1.error;\n                }\n            }\n        };\n        fitTicks(timeWeightTickList, realFrom);\n        // Future time tick\n        if (timeWeightTickList.length > 0) {\n            var barSpace = chartStore.getBarSpace().bar;\n            var textStyles = chartStore.getStyles().xAxis.tickText;\n            var barCount = calcBetweenTimeWeightTickBarCount(barSpace, textStyles);\n            var startDataIndex = timeWeightTickList[timeWeightTickList.length - 1].dataIndex + barCount - 1;\n            var dataList = [];\n            for(var i = startDataIndex; i < realTo; i++){\n                var timestamp = chartStore.dataIndexToTimestamp(i);\n                if (isNumber(timestamp)) {\n                    dataList.push({\n                        timestamp: timestamp\n                    });\n                }\n            }\n            if (dataList.length > 0) {\n                var map = new Map();\n                classifyTimeWeightTicks(map, dataList, chartStore.getDateTimeFormat(), startDataIndex);\n                fitTicks(createTimeWeightTickList(map, barSpace, textStyles), startDataIndex);\n            }\n        }\n        if (isFunction(this.createTicks)) {\n            return this.createTicks({\n                range: this.getRange(),\n                bounding: this.getBounding(),\n                defaultTicks: ticks\n            });\n        }\n        return ticks;\n    };\n    XAxisImp.prototype.getAutoSize = function() {\n        var styles = this.getParent().getChart().getStyles();\n        var xAxisStyles = styles.xAxis;\n        var height = xAxisStyles.size;\n        if (height !== \"auto\") {\n            return height;\n        }\n        var crosshairStyles = styles.crosshair;\n        var xAxisHeight = 0;\n        if (xAxisStyles.show) {\n            if (xAxisStyles.axisLine.show) {\n                xAxisHeight += xAxisStyles.axisLine.size;\n            }\n            if (xAxisStyles.tickLine.show) {\n                xAxisHeight += xAxisStyles.tickLine.length;\n            }\n            if (xAxisStyles.tickText.show) {\n                xAxisHeight += xAxisStyles.tickText.marginStart + xAxisStyles.tickText.marginEnd + xAxisStyles.tickText.size;\n            }\n        }\n        var crosshairVerticalTextHeight = 0;\n        if (crosshairStyles.show && crosshairStyles.vertical.show && crosshairStyles.vertical.text.show) {\n            crosshairVerticalTextHeight += crosshairStyles.vertical.text.paddingTop + crosshairStyles.vertical.text.paddingBottom + crosshairStyles.vertical.text.borderSize * 2 + crosshairStyles.vertical.text.size;\n        }\n        return Math.max(xAxisHeight, crosshairVerticalTextHeight);\n    };\n    XAxisImp.prototype.getBounding = function() {\n        return this.getParent().getMainWidget().getBounding();\n    };\n    XAxisImp.prototype.convertTimestampFromPixel = function(pixel) {\n        var chartStore = this.getParent().getChart().getChartStore();\n        var dataIndex = chartStore.coordinateToDataIndex(pixel);\n        return chartStore.dataIndexToTimestamp(dataIndex);\n    };\n    XAxisImp.prototype.convertTimestampToPixel = function(timestamp) {\n        var chartStore = this.getParent().getChart().getChartStore();\n        var dataIndex = chartStore.timestampToDataIndex(timestamp);\n        return chartStore.dataIndexToCoordinate(dataIndex);\n    };\n    XAxisImp.prototype.convertFromPixel = function(pixel) {\n        return this.getParent().getChart().getChartStore().coordinateToDataIndex(pixel);\n    };\n    XAxisImp.prototype.convertToPixel = function(value) {\n        return this.getParent().getChart().getChartStore().dataIndexToCoordinate(value);\n    };\n    XAxisImp.extend = function(template) {\n        var Custom = /** @class */ function(_super) {\n            __extends(Custom, _super);\n            function Custom(parent) {\n                return _super.call(this, parent, template) || this;\n            }\n            return Custom;\n        }(XAxisImp);\n        return Custom;\n    };\n    return XAxisImp;\n}(AxisImp);\n/**\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n\n * http://www.apache.org/licenses/LICENSE-2.0\n\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ var normal = {\n    name: \"normal\"\n};\n/**\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n\n * http://www.apache.org/licenses/LICENSE-2.0\n\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ var xAxises = {\n    normal: XAxisImp.extend(normal)\n};\nfunction registerXAxis(axis) {\n    xAxises[axis.name] = XAxisImp.extend(axis);\n}\nfunction getXAxisClass(name) {\n    var _a;\n    return (_a = xAxises[name]) !== null && _a !== void 0 ? _a : xAxises.normal;\n}\n/**\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n\n * http://www.apache.org/licenses/LICENSE-2.0\n\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ var XAxisPane = /** @class */ function(_super) {\n    __extends(XAxisPane, _super);\n    function XAxisPane() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    XAxisPane.prototype.createAxisComponent = function(name) {\n        var XAxisClass = getXAxisClass(name);\n        return new XAxisClass(this);\n    };\n    XAxisPane.prototype.createMainWidget = function(container) {\n        return new XAxisWidget(container, this);\n    };\n    return XAxisPane;\n}(DrawPane);\n/**\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n\n * http://www.apache.org/licenses/LICENSE-2.0\n\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ function throttle(func, wait) {\n    var previous = 0;\n    return function() {\n        var now = Date.now();\n        if (now - previous > wait) {\n            func.apply(this, arguments);\n            previous = now;\n        }\n    };\n}\n// export function memoize<R1 = any, R2 = any> (func: (...args: any[]) => R1, resolver?: (...args: any[]) => R2): (...args: any[]) => R1 {\n//   if (!isFunction(func) || (isValid(resolver) && !isFunction(resolver))) {\n//     throw new TypeError('Expected a function')\n//   }\n//   const memoized = function (...args: any[]): any {\n//     const key = isFunction(resolver) ? resolver.apply(this, args) : args[0]\n//     const cache = memoized.cache\n//     if (cache.has(key)) {\n//       return cache.get(key)\n//     }\n//     const result = func.apply(this, args)\n//     // eslint-disable-next-line @typescript-eslint/strict-boolean-expressions\n//     memoized.cache = cache.set(key, result) || cache\n//     return result\n//   }\n//   // eslint-disable-next-line @typescript-eslint/strict-boolean-expressions\n//   memoized.cache = new (memoize.Cache || Map)()\n//   return memoized\n// }\n// memoize.Cache = Map\n/**\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n\n * http://www.apache.org/licenses/LICENSE-2.0\n\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ var SeparatorWidget = /** @class */ function(_super) {\n    __extends(SeparatorWidget, _super);\n    function SeparatorWidget(rootContainer, pane) {\n        var _this = _super.call(this, rootContainer, pane) || this;\n        _this._dragFlag = false;\n        _this._dragStartY = 0;\n        _this._topPaneHeight = 0;\n        _this._bottomPaneHeight = 0;\n        _this._topPane = null;\n        _this._bottomPane = null;\n        // eslint-disable-next-line @typescript-eslint/unbound-method -- ignore\n        _this._pressedMouseMoveEvent = throttle(_this._pressedTouchMouseMoveEvent, 20);\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-argument -- ignore\n        _this.registerEvent(\"touchStartEvent\", _this._mouseDownEvent.bind(_this))// eslint-disable-next-line @typescript-eslint/no-unsafe-argument -- ignore\n        .registerEvent(\"touchMoveEvent\", _this._pressedMouseMoveEvent.bind(_this))// eslint-disable-next-line @typescript-eslint/no-unsafe-argument -- ignore\n        .registerEvent(\"touchEndEvent\", _this._mouseUpEvent.bind(_this))// eslint-disable-next-line @typescript-eslint/no-unsafe-argument -- ignore\n        .registerEvent(\"mouseDownEvent\", _this._mouseDownEvent.bind(_this))// eslint-disable-next-line @typescript-eslint/no-unsafe-argument -- ignore\n        .registerEvent(\"mouseUpEvent\", _this._mouseUpEvent.bind(_this))// eslint-disable-next-line @typescript-eslint/no-unsafe-argument -- ignore\n        .registerEvent(\"pressedMouseMoveEvent\", _this._pressedMouseMoveEvent.bind(_this))// eslint-disable-next-line @typescript-eslint/no-unsafe-argument -- ignore\n        .registerEvent(\"mouseEnterEvent\", _this._mouseEnterEvent.bind(_this))// eslint-disable-next-line @typescript-eslint/no-unsafe-argument -- ignore\n        .registerEvent(\"mouseLeaveEvent\", _this._mouseLeaveEvent.bind(_this));\n        return _this;\n    }\n    SeparatorWidget.prototype.getName = function() {\n        return WidgetNameConstants.SEPARATOR;\n    };\n    SeparatorWidget.prototype.checkEventOn = function() {\n        return true;\n    };\n    SeparatorWidget.prototype._mouseDownEvent = function(event) {\n        var _this = this;\n        this._dragFlag = true;\n        this._dragStartY = event.pageY;\n        var pane = this.getPane();\n        var chart = pane.getChart();\n        this._topPane = pane.getTopPane();\n        this._bottomPane = pane.getBottomPane();\n        var drawPanes = chart.getDrawPanes();\n        if (this._topPane.getOptions().state === \"minimize\" /* PaneState.Minimize */ ) {\n            var index = drawPanes.findIndex(function(pane) {\n                var _a;\n                return pane.getId() === ((_a = _this._topPane) === null || _a === void 0 ? void 0 : _a.getId());\n            });\n            for(var i = index - 1; i > -1; i--){\n                var pane_1 = drawPanes[i];\n                if (pane_1.getOptions().state !== \"minimize\" /* PaneState.Minimize */ ) {\n                    this._topPane = pane_1;\n                    break;\n                }\n            }\n        }\n        if (this._bottomPane.getOptions().state === \"minimize\" /* PaneState.Minimize */ ) {\n            var index = drawPanes.findIndex(function(pane) {\n                var _a;\n                return pane.getId() === ((_a = _this._bottomPane) === null || _a === void 0 ? void 0 : _a.getId());\n            });\n            for(var i = index + 1; i < drawPanes.length; i++){\n                var pane_2 = drawPanes[i];\n                if (pane_2.getOptions().state !== \"minimize\" /* PaneState.Minimize */ ) {\n                    this._bottomPane = pane_2;\n                    break;\n                }\n            }\n        }\n        this._topPaneHeight = this._topPane.getBounding().height;\n        this._bottomPaneHeight = this._bottomPane.getBounding().height;\n        return true;\n    };\n    SeparatorWidget.prototype._mouseUpEvent = function() {\n        this._dragFlag = false;\n        this._topPane = null;\n        this._bottomPane = null;\n        this._topPaneHeight = 0;\n        this._bottomPaneHeight = 0;\n        return this._mouseLeaveEvent();\n    };\n    SeparatorWidget.prototype._pressedTouchMouseMoveEvent = function(event) {\n        var dragDistance = event.pageY - this._dragStartY;\n        var isUpDrag = dragDistance < 0;\n        if (isValid(this._topPane) && isValid(this._bottomPane)) {\n            var bottomPaneOptions = this._bottomPane.getOptions();\n            if (this._topPane.getOptions().state !== \"minimize\" /* PaneState.Minimize */  && bottomPaneOptions.state !== \"minimize\" /* PaneState.Minimize */  && bottomPaneOptions.dragEnabled) {\n                var reducedPane = null;\n                var increasedPane = null;\n                var startDragReducedPaneHeight = 0;\n                var startDragIncreasedPaneHeight = 0;\n                if (isUpDrag) {\n                    reducedPane = this._topPane;\n                    increasedPane = this._bottomPane;\n                    startDragReducedPaneHeight = this._topPaneHeight;\n                    startDragIncreasedPaneHeight = this._bottomPaneHeight;\n                } else {\n                    reducedPane = this._bottomPane;\n                    increasedPane = this._topPane;\n                    startDragReducedPaneHeight = this._bottomPaneHeight;\n                    startDragIncreasedPaneHeight = this._topPaneHeight;\n                }\n                var reducedPaneMinHeight = reducedPane.getOptions().minHeight;\n                if (startDragReducedPaneHeight > reducedPaneMinHeight) {\n                    var reducedPaneHeight = Math.max(startDragReducedPaneHeight - Math.abs(dragDistance), reducedPaneMinHeight);\n                    var diffHeight = startDragReducedPaneHeight - reducedPaneHeight;\n                    reducedPane.setBounding({\n                        height: reducedPaneHeight\n                    });\n                    increasedPane.setBounding({\n                        height: startDragIncreasedPaneHeight + diffHeight\n                    });\n                    var currentPane = this.getPane();\n                    var chart = currentPane.getChart();\n                    chart.getChartStore().executeAction(ActionType.OnPaneDrag, {\n                        paneId: currentPane.getId()\n                    });\n                    chart.layout({\n                        measureHeight: true,\n                        measureWidth: true,\n                        update: true,\n                        buildYAxisTick: true,\n                        forceBuildYAxisTick: true\n                    });\n                }\n            }\n        }\n        return true;\n    };\n    SeparatorWidget.prototype._mouseEnterEvent = function() {\n        var pane = this.getPane();\n        var bottomPane = pane.getBottomPane();\n        if (bottomPane.getOptions().dragEnabled) {\n            var chart = pane.getChart();\n            var styles = chart.getStyles().separator;\n            this.getContainer().style.background = styles.activeBackgroundColor;\n            return true;\n        }\n        return false;\n    };\n    SeparatorWidget.prototype._mouseLeaveEvent = function() {\n        if (!this._dragFlag) {\n            this.getContainer().style.background = \"transparent\";\n            return true;\n        }\n        return false;\n    };\n    SeparatorWidget.prototype.createContainer = function() {\n        return createDom(\"div\", {\n            width: \"100%\",\n            height: \"\".concat(REAL_SEPARATOR_HEIGHT, \"px\"),\n            margin: \"0\",\n            padding: \"0\",\n            position: \"absolute\",\n            top: \"-3px\",\n            zIndex: \"20\",\n            boxSizing: \"border-box\",\n            cursor: \"ns-resize\"\n        });\n    };\n    SeparatorWidget.prototype.updateImp = function(container, _bounding, level) {\n        if (level === 4 /* UpdateLevel.All */  || level === 2 /* UpdateLevel.Separator */ ) {\n            var styles = this.getPane().getChart().getStyles().separator;\n            container.style.top = \"\".concat(-Math.floor((REAL_SEPARATOR_HEIGHT - styles.size) / 2), \"px\");\n            container.style.height = \"\".concat(REAL_SEPARATOR_HEIGHT, \"px\");\n        }\n    };\n    return SeparatorWidget;\n}(Widget);\n/**\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n\n * http://www.apache.org/licenses/LICENSE-2.0\n\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ var SeparatorPane = /** @class */ function(_super) {\n    __extends(SeparatorPane, _super);\n    function SeparatorPane(chart, id, topPane, bottomPane) {\n        var _this = _super.call(this, chart, id) || this;\n        _this.getContainer().style.overflow = \"\";\n        _this._topPane = topPane;\n        _this._bottomPane = bottomPane;\n        _this._separatorWidget = new SeparatorWidget(_this.getContainer(), _this);\n        return _this;\n    }\n    SeparatorPane.prototype.setBounding = function(rootBounding) {\n        merge(this.getBounding(), rootBounding);\n        return this;\n    };\n    SeparatorPane.prototype.getTopPane = function() {\n        return this._topPane;\n    };\n    SeparatorPane.prototype.setTopPane = function(pane) {\n        this._topPane = pane;\n        return this;\n    };\n    SeparatorPane.prototype.getBottomPane = function() {\n        return this._bottomPane;\n    };\n    SeparatorPane.prototype.setBottomPane = function(pane) {\n        this._bottomPane = pane;\n        return this;\n    };\n    SeparatorPane.prototype.getWidget = function() {\n        return this._separatorWidget;\n    };\n    SeparatorPane.prototype.getImage = function(_includeOverlay) {\n        var _a = this.getBounding(), width = _a.width, height = _a.height;\n        var styles = this.getChart().getStyles().separator;\n        var canvas = createDom(\"canvas\", {\n            width: \"\".concat(width, \"px\"),\n            height: \"\".concat(height, \"px\"),\n            boxSizing: \"border-box\"\n        });\n        var ctx = canvas.getContext(\"2d\");\n        var pixelRatio = getPixelRatio(canvas);\n        canvas.width = width * pixelRatio;\n        canvas.height = height * pixelRatio;\n        ctx.scale(pixelRatio, pixelRatio);\n        ctx.fillStyle = styles.color;\n        ctx.fillRect(0, 0, width, height);\n        return canvas;\n    };\n    SeparatorPane.prototype.updateImp = function(level, container, bounding) {\n        if (level === 4 /* UpdateLevel.All */  || level === 2 /* UpdateLevel.Separator */ ) {\n            var styles = this.getChart().getStyles().separator;\n            container.style.backgroundColor = styles.color;\n            container.style.height = \"\".concat(bounding.height, \"px\");\n            container.style.marginLeft = \"\".concat(bounding.left, \"px\");\n            container.style.width = \"\".concat(bounding.width, \"px\");\n            this._separatorWidget.update(level);\n        }\n    };\n    return SeparatorPane;\n}(Pane);\n/**\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n\n * http://www.apache.org/licenses/LICENSE-2.0\n\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ function isFF() {\n    if (true) {\n        return false;\n    }\n    return window.navigator.userAgent.toLowerCase().includes(\"firefox\");\n}\nfunction isIOS() {\n    if (true) {\n        return false;\n    }\n    return /iPhone|iPad|iPod|iOS/.test(window.navigator.userAgent);\n}\n/* eslint-disable eslint-comments/require-description -- ignore */ var ManhattanDistance = {\n    CancelClick: 5,\n    CancelTap: 5,\n    DoubleClick: 5,\n    DoubleTap: 30\n};\nvar MouseEventButton = {\n    Left: 0,\n    Middle: 1,\n    Right: 2\n};\nvar TOUCH_MIN_RADIUS = 10;\n// TODO: get rid of a lot of boolean flags, probably we should replace it with some enum\nvar SyntheticEvent = /** @class */ function() {\n    function SyntheticEvent(target, handler, options) {\n        var _this = this;\n        this._clickCount = 0;\n        this._clickTimeoutId = null;\n        this._clickCoordinate = {\n            x: Number.NEGATIVE_INFINITY,\n            y: Number.POSITIVE_INFINITY\n        };\n        this._tapCount = 0;\n        this._tapTimeoutId = null;\n        this._tapCoordinate = {\n            x: Number.NEGATIVE_INFINITY,\n            y: Number.POSITIVE_INFINITY\n        };\n        this._longTapTimeoutId = null;\n        this._longTapActive = false;\n        this._mouseMoveStartCoordinate = null;\n        this._touchMoveStartCoordinate = null;\n        this._touchMoveExceededManhattanDistance = false;\n        this._cancelClick = false;\n        this._cancelTap = false;\n        this._unsubscribeOutsideMouseEvents = null;\n        this._unsubscribeOutsideTouchEvents = null;\n        this._unsubscribeMobileSafariEvents = null;\n        this._unsubscribeMousemove = null;\n        this._unsubscribeMouseWheel = null;\n        this._unsubscribeContextMenu = null;\n        this._unsubscribeRootMouseEvents = null;\n        this._unsubscribeRootTouchEvents = null;\n        this._startPinchMiddleCoordinate = null;\n        this._startPinchDistance = 0;\n        this._pinchPrevented = false;\n        this._preventTouchDragProcess = false;\n        this._mousePressed = false;\n        this._lastTouchEventTimeStamp = 0;\n        // for touchstart/touchmove/touchend events we handle only first touch\n        // i.e. we don't support several active touches at the same time (except pinch event)\n        this._activeTouchId = null;\n        // accept all mouse leave events if it's not an iOS device\n        // see _mouseEnterHandler, _mouseMoveHandler, _mouseLeaveHandler\n        this._acceptMouseLeave = !isIOS();\n        /**\n         * In Firefox mouse events dont't fire if the mouse position is outside of the browser's border.\n         * To prevent the mouse from hanging while pressed we're subscribing on the mouseleave event of the document element.\n         * We're subscribing on mouseleave, but this event is actually fired on mouseup outside of the browser's border.\n         */ this._onFirefoxOutsideMouseUp = function(mouseUpEvent) {\n            _this._mouseUpHandler(mouseUpEvent);\n        };\n        /**\n         * Safari doesn't fire touchstart/mousedown events on double tap since iOS 13.\n         * There are two possible solutions:\n         * 1) Call preventDefault in touchEnd handler. But it also prevents click event from firing.\n         * 2) Add listener on dblclick event that fires with the preceding mousedown/mouseup.\n         * https://developer.apple.com/forums/thread/125073\n         */ this._onMobileSafariDoubleClick = function(dblClickEvent) {\n            if (_this._firesTouchEvents(dblClickEvent)) {\n                ++_this._tapCount;\n                if (_this._tapTimeoutId !== null && _this._tapCount > 1) {\n                    var manhattanDistance = _this._mouseTouchMoveWithDownInfo(_this._getCoordinate(dblClickEvent), _this._tapCoordinate).manhattanDistance;\n                    if (manhattanDistance < ManhattanDistance.DoubleTap && !_this._cancelTap) {\n                        _this._processEvent(_this._makeCompatEvent(dblClickEvent), _this._handler.doubleTapEvent);\n                    }\n                    _this._resetTapTimeout();\n                }\n            } else {\n                ++_this._clickCount;\n                if (_this._clickTimeoutId !== null && _this._clickCount > 1) {\n                    var manhattanDistance = _this._mouseTouchMoveWithDownInfo(_this._getCoordinate(dblClickEvent), _this._clickCoordinate).manhattanDistance;\n                    if (manhattanDistance < ManhattanDistance.DoubleClick && !_this._cancelClick) {\n                        _this._processEvent(_this._makeCompatEvent(dblClickEvent), _this._handler.mouseDoubleClickEvent);\n                    }\n                    _this._resetClickTimeout();\n                }\n            }\n        };\n        this._target = target;\n        this._handler = handler;\n        this._options = options;\n        this._init();\n    }\n    SyntheticEvent.prototype.destroy = function() {\n        if (this._unsubscribeOutsideMouseEvents !== null) {\n            this._unsubscribeOutsideMouseEvents();\n            this._unsubscribeOutsideMouseEvents = null;\n        }\n        if (this._unsubscribeOutsideTouchEvents !== null) {\n            this._unsubscribeOutsideTouchEvents();\n            this._unsubscribeOutsideTouchEvents = null;\n        }\n        if (this._unsubscribeMousemove !== null) {\n            this._unsubscribeMousemove();\n            this._unsubscribeMousemove = null;\n        }\n        if (this._unsubscribeMouseWheel !== null) {\n            this._unsubscribeMouseWheel();\n            this._unsubscribeMouseWheel = null;\n        }\n        if (this._unsubscribeContextMenu !== null) {\n            this._unsubscribeContextMenu();\n            this._unsubscribeContextMenu = null;\n        }\n        if (this._unsubscribeRootMouseEvents !== null) {\n            this._unsubscribeRootMouseEvents();\n            this._unsubscribeRootMouseEvents = null;\n        }\n        if (this._unsubscribeRootTouchEvents !== null) {\n            this._unsubscribeRootTouchEvents();\n            this._unsubscribeRootTouchEvents = null;\n        }\n        if (this._unsubscribeMobileSafariEvents !== null) {\n            this._unsubscribeMobileSafariEvents();\n            this._unsubscribeMobileSafariEvents = null;\n        }\n        this._clearLongTapTimeout();\n        this._resetClickTimeout();\n    };\n    SyntheticEvent.prototype._mouseEnterHandler = function(enterEvent) {\n        var _this = this;\n        var _a, _b, _c;\n        (_a = this._unsubscribeMousemove) === null || _a === void 0 ? void 0 : _a.call(this);\n        (_b = this._unsubscribeMouseWheel) === null || _b === void 0 ? void 0 : _b.call(this);\n        (_c = this._unsubscribeContextMenu) === null || _c === void 0 ? void 0 : _c.call(this);\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n        var boundMouseMoveHandler = this._mouseMoveHandler.bind(this);\n        this._unsubscribeMousemove = function() {\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n            _this._target.removeEventListener(\"mousemove\", boundMouseMoveHandler);\n        };\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n        this._target.addEventListener(\"mousemove\", boundMouseMoveHandler);\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n        var boundMouseWheel = this._mouseWheelHandler.bind(this);\n        this._unsubscribeMouseWheel = function() {\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n            _this._target.removeEventListener(\"wheel\", boundMouseWheel);\n        };\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n        this._target.addEventListener(\"wheel\", boundMouseWheel, {\n            passive: false\n        });\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n        var boundContextMenu = this._contextMenuHandler.bind(this);\n        this._unsubscribeContextMenu = function() {\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n            _this._target.removeEventListener(\"contextmenu\", boundContextMenu);\n        };\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n        this._target.addEventListener(\"contextmenu\", boundContextMenu, {\n            passive: false\n        });\n        if (this._firesTouchEvents(enterEvent)) {\n            return;\n        }\n        this._processEvent(this._makeCompatEvent(enterEvent), this._handler.mouseEnterEvent);\n        this._acceptMouseLeave = true;\n    };\n    SyntheticEvent.prototype._resetClickTimeout = function() {\n        if (this._clickTimeoutId !== null) {\n            clearTimeout(this._clickTimeoutId);\n        }\n        this._clickCount = 0;\n        this._clickTimeoutId = null;\n        this._clickCoordinate = {\n            x: Number.NEGATIVE_INFINITY,\n            y: Number.POSITIVE_INFINITY\n        };\n    };\n    SyntheticEvent.prototype._resetTapTimeout = function() {\n        if (this._tapTimeoutId !== null) {\n            clearTimeout(this._tapTimeoutId);\n        }\n        this._tapCount = 0;\n        this._tapTimeoutId = null;\n        this._tapCoordinate = {\n            x: Number.NEGATIVE_INFINITY,\n            y: Number.POSITIVE_INFINITY\n        };\n    };\n    SyntheticEvent.prototype._mouseMoveHandler = function(moveEvent) {\n        if (this._mousePressed || this._touchMoveStartCoordinate !== null) {\n            return;\n        }\n        if (this._firesTouchEvents(moveEvent)) {\n            return;\n        }\n        this._processEvent(this._makeCompatEvent(moveEvent), this._handler.mouseMoveEvent);\n        this._acceptMouseLeave = true;\n    };\n    SyntheticEvent.prototype._mouseWheelHandler = function(wheelEvent) {\n        if (Math.abs(wheelEvent.deltaX) > Math.abs(wheelEvent.deltaY)) {\n            if (!isValid(this._handler.mouseWheelHortEvent)) {\n                return;\n            }\n            this._preventDefault(wheelEvent);\n            if (Math.abs(wheelEvent.deltaX) === 0) {\n                return;\n            }\n            this._handler.mouseWheelHortEvent(this._makeCompatEvent(wheelEvent), -wheelEvent.deltaX);\n        } else {\n            if (!isValid(this._handler.mouseWheelVertEvent)) {\n                return;\n            }\n            var deltaY = -(wheelEvent.deltaY / 100);\n            if (deltaY === 0) {\n                return;\n            }\n            this._preventDefault(wheelEvent);\n            switch(wheelEvent.deltaMode){\n                case wheelEvent.DOM_DELTA_PAGE:\n                    {\n                        deltaY *= 120;\n                        break;\n                    }\n                case wheelEvent.DOM_DELTA_LINE:\n                    {\n                        deltaY *= 32;\n                        break;\n                    }\n            }\n            if (deltaY !== 0) {\n                var scale = Math.sign(deltaY) * Math.min(1, Math.abs(deltaY));\n                this._handler.mouseWheelVertEvent(this._makeCompatEvent(wheelEvent), scale);\n            }\n        }\n    };\n    SyntheticEvent.prototype._contextMenuHandler = function(mouseEvent) {\n        this._preventDefault(mouseEvent);\n    };\n    SyntheticEvent.prototype._touchMoveHandler = function(moveEvent) {\n        var touch = this._touchWithId(moveEvent.changedTouches, this._activeTouchId);\n        if (touch === null) {\n            return;\n        }\n        this._lastTouchEventTimeStamp = this._eventTimeStamp(moveEvent);\n        if (this._startPinchMiddleCoordinate !== null) {\n            return;\n        }\n        if (this._preventTouchDragProcess) {\n            return;\n        }\n        // prevent pinch if move event comes faster than the second touch\n        this._pinchPrevented = true;\n        var moveInfo = this._mouseTouchMoveWithDownInfo(this._getCoordinate(touch), this._touchMoveStartCoordinate);\n        var xOffset = moveInfo.xOffset, yOffset = moveInfo.yOffset, manhattanDistance = moveInfo.manhattanDistance;\n        if (!this._touchMoveExceededManhattanDistance && manhattanDistance < ManhattanDistance.CancelTap) {\n            return;\n        }\n        if (!this._touchMoveExceededManhattanDistance) {\n            // first time when current position exceeded manhattan distance\n            // vertical drag is more important than horizontal drag\n            // because we scroll the page vertically often than horizontally\n            var correctedXOffset = xOffset * 0.5;\n            // a drag can be only if touch page scroll isn't allowed\n            var isVertDrag = yOffset >= correctedXOffset && !this._options.treatVertDragAsPageScroll();\n            var isHorzDrag = correctedXOffset > yOffset && !this._options.treatHorzDragAsPageScroll();\n            // if drag event happened then we should revert preventDefault state to original one\n            // and try to process the drag event\n            // else we shouldn't prevent default of the event and ignore processing the drag event\n            if (!isVertDrag && !isHorzDrag) {\n                this._preventTouchDragProcess = true;\n            }\n            this._touchMoveExceededManhattanDistance = true;\n            // if manhattan distance is more that 5 - we should cancel tap event\n            this._cancelTap = true;\n            this._clearLongTapTimeout();\n            this._resetTapTimeout();\n        }\n        if (!this._preventTouchDragProcess) {\n            this._processEvent(this._makeCompatEvent(moveEvent, touch), this._handler.touchMoveEvent);\n        // we should prevent default in case of touch only\n        // to prevent scroll of the page\n        // preventDefault(moveEvent)\n        }\n    };\n    SyntheticEvent.prototype._mouseMoveWithDownHandler = function(moveEvent) {\n        if (moveEvent.button !== MouseEventButton.Left) {\n            return;\n        }\n        var moveInfo = this._mouseTouchMoveWithDownInfo(this._getCoordinate(moveEvent), this._mouseMoveStartCoordinate);\n        var manhattanDistance = moveInfo.manhattanDistance;\n        if (manhattanDistance >= ManhattanDistance.CancelClick) {\n            // if manhattan distance is more that 5 - we should cancel click event\n            this._cancelClick = true;\n            this._resetClickTimeout();\n        }\n        if (this._cancelClick) {\n            // if this._cancelClick is true, that means that minimum manhattan distance is already exceeded\n            this._processEvent(this._makeCompatEvent(moveEvent), this._handler.pressedMouseMoveEvent);\n        }\n    };\n    SyntheticEvent.prototype._mouseTouchMoveWithDownInfo = function(currentCoordinate, startCoordinate) {\n        var xOffset = Math.abs(startCoordinate.x - currentCoordinate.x);\n        var yOffset = Math.abs(startCoordinate.y - currentCoordinate.y);\n        var manhattanDistance = xOffset + yOffset;\n        return {\n            xOffset: xOffset,\n            yOffset: yOffset,\n            manhattanDistance: manhattanDistance\n        };\n    };\n    SyntheticEvent.prototype._touchEndHandler = function(touchEndEvent) {\n        var touch = this._touchWithId(touchEndEvent.changedTouches, this._activeTouchId);\n        if (touch === null && touchEndEvent.touches.length === 0) {\n            // something went wrong, somehow we missed the required touchend event\n            // probably the browser has not sent this event\n            touch = touchEndEvent.changedTouches[0];\n        }\n        if (touch === null) {\n            return;\n        }\n        this._activeTouchId = null;\n        this._lastTouchEventTimeStamp = this._eventTimeStamp(touchEndEvent);\n        this._clearLongTapTimeout();\n        this._touchMoveStartCoordinate = null;\n        if (this._unsubscribeRootTouchEvents !== null) {\n            this._unsubscribeRootTouchEvents();\n            this._unsubscribeRootTouchEvents = null;\n        }\n        var compatEvent = this._makeCompatEvent(touchEndEvent, touch);\n        this._processEvent(compatEvent, this._handler.touchEndEvent);\n        ++this._tapCount;\n        if (this._tapTimeoutId !== null && this._tapCount > 1) {\n            // check that both clicks are near enough\n            var manhattanDistance = this._mouseTouchMoveWithDownInfo(this._getCoordinate(touch), this._tapCoordinate).manhattanDistance;\n            if (manhattanDistance < ManhattanDistance.DoubleTap && !this._cancelTap) {\n                this._processEvent(compatEvent, this._handler.doubleTapEvent);\n            }\n            this._resetTapTimeout();\n        } else {\n            if (!this._cancelTap) {\n                this._processEvent(compatEvent, this._handler.tapEvent);\n                // do not fire mouse events if tap handler was executed\n                // prevent click event on new dom element (who appeared after tap)\n                if (isValid(this._handler.tapEvent)) {\n                    this._preventDefault(touchEndEvent);\n                }\n            }\n        }\n        // prevent, for example, safari's dblclick-to-zoom or fast-click after long-tap\n        // we handle mouseDoubleClickEvent here ourselves\n        if (this._tapCount === 0) {\n            this._preventDefault(touchEndEvent);\n        }\n        if (touchEndEvent.touches.length === 0) {\n            if (this._longTapActive) {\n                this._longTapActive = false;\n                // prevent native click event\n                this._preventDefault(touchEndEvent);\n            }\n        }\n    };\n    SyntheticEvent.prototype._mouseUpHandler = function(mouseUpEvent) {\n        if (mouseUpEvent.button !== MouseEventButton.Left) {\n            return;\n        }\n        var compatEvent = this._makeCompatEvent(mouseUpEvent);\n        this._mouseMoveStartCoordinate = null;\n        this._mousePressed = false;\n        if (this._unsubscribeRootMouseEvents !== null) {\n            this._unsubscribeRootMouseEvents();\n            this._unsubscribeRootMouseEvents = null;\n        }\n        if (isFF()) {\n            var rootElement = this._target.ownerDocument.documentElement;\n            rootElement.removeEventListener(\"mouseleave\", this._onFirefoxOutsideMouseUp);\n        }\n        if (this._firesTouchEvents(mouseUpEvent)) {\n            return;\n        }\n        this._processEvent(compatEvent, this._handler.mouseUpEvent);\n        ++this._clickCount;\n        if (this._clickTimeoutId !== null && this._clickCount > 1) {\n            // check that both clicks are near enough\n            var manhattanDistance = this._mouseTouchMoveWithDownInfo(this._getCoordinate(mouseUpEvent), this._clickCoordinate).manhattanDistance;\n            if (manhattanDistance < ManhattanDistance.DoubleClick && !this._cancelClick) {\n                this._processEvent(compatEvent, this._handler.mouseDoubleClickEvent);\n            }\n            this._resetClickTimeout();\n        } else {\n            if (!this._cancelClick) {\n                this._processEvent(compatEvent, this._handler.mouseClickEvent);\n            }\n        }\n    };\n    SyntheticEvent.prototype._clearLongTapTimeout = function() {\n        if (this._longTapTimeoutId === null) {\n            return;\n        }\n        clearTimeout(this._longTapTimeoutId);\n        this._longTapTimeoutId = null;\n    };\n    SyntheticEvent.prototype._touchStartHandler = function(downEvent) {\n        if (this._activeTouchId !== null) {\n            return;\n        }\n        var touch = downEvent.changedTouches[0];\n        this._activeTouchId = touch.identifier;\n        this._lastTouchEventTimeStamp = this._eventTimeStamp(downEvent);\n        var rootElement = this._target.ownerDocument.documentElement;\n        this._cancelTap = false;\n        this._touchMoveExceededManhattanDistance = false;\n        this._preventTouchDragProcess = false;\n        this._touchMoveStartCoordinate = this._getCoordinate(touch);\n        if (this._unsubscribeRootTouchEvents !== null) {\n            this._unsubscribeRootTouchEvents();\n            this._unsubscribeRootTouchEvents = null;\n        }\n        {\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n            var boundTouchMoveWithDownHandler_1 = this._touchMoveHandler.bind(this);\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n            var boundTouchEndHandler_1 = this._touchEndHandler.bind(this);\n            this._unsubscribeRootTouchEvents = function() {\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n                rootElement.removeEventListener(\"touchmove\", boundTouchMoveWithDownHandler_1);\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n                rootElement.removeEventListener(\"touchend\", boundTouchEndHandler_1);\n            };\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n            rootElement.addEventListener(\"touchmove\", boundTouchMoveWithDownHandler_1, {\n                passive: false\n            });\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n            rootElement.addEventListener(\"touchend\", boundTouchEndHandler_1, {\n                passive: false\n            });\n            this._clearLongTapTimeout();\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n            this._longTapTimeoutId = setTimeout(this._longTapHandler.bind(this, downEvent), 500 /* Delay.LongTap */ );\n        }\n        this._processEvent(this._makeCompatEvent(downEvent, touch), this._handler.touchStartEvent);\n        if (this._tapTimeoutId === null) {\n            this._tapCount = 0;\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n            this._tapTimeoutId = setTimeout(this._resetTapTimeout.bind(this), 500 /* Delay.ResetClick */ );\n            this._tapCoordinate = this._getCoordinate(touch);\n        }\n    };\n    SyntheticEvent.prototype._mouseDownHandler = function(downEvent) {\n        if (downEvent.button === MouseEventButton.Right) {\n            this._preventDefault(downEvent);\n            this._processEvent(this._makeCompatEvent(downEvent), this._handler.mouseRightClickEvent);\n            return;\n        }\n        if (downEvent.button !== MouseEventButton.Left) {\n            return;\n        }\n        var rootElement = this._target.ownerDocument.documentElement;\n        if (isFF()) {\n            rootElement.addEventListener(\"mouseleave\", this._onFirefoxOutsideMouseUp);\n        }\n        this._cancelClick = false;\n        this._mouseMoveStartCoordinate = this._getCoordinate(downEvent);\n        if (this._unsubscribeRootMouseEvents !== null) {\n            this._unsubscribeRootMouseEvents();\n            this._unsubscribeRootMouseEvents = null;\n        }\n        {\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n            var boundMouseMoveWithDownHandler_1 = this._mouseMoveWithDownHandler.bind(this);\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n            var boundMouseUpHandler_1 = this._mouseUpHandler.bind(this);\n            this._unsubscribeRootMouseEvents = function() {\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n                rootElement.removeEventListener(\"mousemove\", boundMouseMoveWithDownHandler_1);\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n                rootElement.removeEventListener(\"mouseup\", boundMouseUpHandler_1);\n            };\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n            rootElement.addEventListener(\"mousemove\", boundMouseMoveWithDownHandler_1);\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n            rootElement.addEventListener(\"mouseup\", boundMouseUpHandler_1);\n        }\n        this._mousePressed = true;\n        if (this._firesTouchEvents(downEvent)) {\n            return;\n        }\n        this._processEvent(this._makeCompatEvent(downEvent), this._handler.mouseDownEvent);\n        if (this._clickTimeoutId === null) {\n            this._clickCount = 0;\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n            this._clickTimeoutId = setTimeout(this._resetClickTimeout.bind(this), 500 /* Delay.ResetClick */ );\n            this._clickCoordinate = this._getCoordinate(downEvent);\n        }\n    };\n    SyntheticEvent.prototype._init = function() {\n        var _this = this;\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n        this._target.addEventListener(\"mouseenter\", this._mouseEnterHandler.bind(this));\n        // Do not show context menu when something went wrong\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n        this._target.addEventListener(\"touchcancel\", this._clearLongTapTimeout.bind(this));\n        {\n            var doc_1 = this._target.ownerDocument;\n            var outsideHandler_1 = function(event) {\n                if (_this._handler.mouseDownOutsideEvent == null) {\n                    return;\n                }\n                if (event.composed && _this._target.contains(event.composedPath()[0])) {\n                    return;\n                }\n                if (event.target !== null && _this._target.contains(event.target)) {\n                    return;\n                }\n                _this._handler.mouseDownOutsideEvent({\n                    x: 0,\n                    y: 0,\n                    pageX: 0,\n                    pageY: 0\n                });\n            };\n            this._unsubscribeOutsideTouchEvents = function() {\n                doc_1.removeEventListener(\"touchstart\", outsideHandler_1);\n            };\n            this._unsubscribeOutsideMouseEvents = function() {\n                doc_1.removeEventListener(\"mousedown\", outsideHandler_1);\n            };\n            doc_1.addEventListener(\"mousedown\", outsideHandler_1);\n            doc_1.addEventListener(\"touchstart\", outsideHandler_1, {\n                passive: true\n            });\n        }\n        if (isIOS()) {\n            this._unsubscribeMobileSafariEvents = function() {\n                _this._target.removeEventListener(\"dblclick\", _this._onMobileSafariDoubleClick);\n            };\n            this._target.addEventListener(\"dblclick\", this._onMobileSafariDoubleClick);\n        }\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n        this._target.addEventListener(\"mouseleave\", this._mouseLeaveHandler.bind(this));\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n        this._target.addEventListener(\"touchstart\", this._touchStartHandler.bind(this), {\n            passive: true\n        });\n        this._target.addEventListener(\"mousedown\", function(e) {\n            if (e.button === MouseEventButton.Middle) {\n                // prevent incorrect scrolling event\n                e.preventDefault();\n                return false;\n            }\n            return undefined;\n        });\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n        this._target.addEventListener(\"mousedown\", this._mouseDownHandler.bind(this));\n        this._initPinch();\n        // Hey mobile Safari, what's up?\n        // If mobile Safari doesn't have any touchmove handler with passive=false\n        // it treats a touchstart and the following touchmove events as cancelable=false,\n        // so we can't prevent them (as soon we subscribe on touchmove inside touchstart's handler).\n        // And we'll get scroll of the page along with chart's one instead of only chart's scroll.\n        // eslint-disable-next-line @typescript-eslint/no-empty-function\n        this._target.addEventListener(\"touchmove\", function() {}, {\n            passive: false\n        });\n    };\n    SyntheticEvent.prototype._initPinch = function() {\n        var _this = this;\n        if (!isValid(this._handler.pinchStartEvent) && !isValid(this._handler.pinchEvent) && !isValid(this._handler.pinchEndEvent)) {\n            return;\n        }\n        this._target.addEventListener(\"touchstart\", function(event) {\n            _this._checkPinchState(event.touches);\n        }, {\n            passive: true\n        });\n        this._target.addEventListener(\"touchmove\", function(event) {\n            if (event.touches.length !== 2 || _this._startPinchMiddleCoordinate === null) {\n                return;\n            }\n            if (isValid(_this._handler.pinchEvent)) {\n                var currentDistance = _this._getTouchDistance(event.touches[0], event.touches[1]);\n                var scale = currentDistance / _this._startPinchDistance;\n                _this._handler.pinchEvent(__assign(__assign({}, _this._startPinchMiddleCoordinate), {\n                    pageX: 0,\n                    pageY: 0\n                }), scale);\n                _this._preventDefault(event);\n            }\n        }, {\n            passive: false\n        });\n        this._target.addEventListener(\"touchend\", function(event) {\n            _this._checkPinchState(event.touches);\n        });\n    };\n    SyntheticEvent.prototype._checkPinchState = function(touches) {\n        if (touches.length === 1) {\n            this._pinchPrevented = false;\n        }\n        if (touches.length !== 2 || this._pinchPrevented || this._longTapActive) {\n            this._stopPinch();\n        } else {\n            this._startPinch(touches);\n        }\n    };\n    SyntheticEvent.prototype._startPinch = function(touches) {\n        var box = this._target.getBoundingClientRect();\n        this._startPinchMiddleCoordinate = {\n            x: (touches[0].clientX - box.left + (touches[1].clientX - box.left)) / 2,\n            y: (touches[0].clientY - box.top + (touches[1].clientY - box.top)) / 2\n        };\n        this._startPinchDistance = this._getTouchDistance(touches[0], touches[1]);\n        if (isValid(this._handler.pinchStartEvent)) {\n            this._handler.pinchStartEvent({\n                x: 0,\n                y: 0,\n                pageX: 0,\n                pageY: 0\n            });\n        }\n        this._clearLongTapTimeout();\n    };\n    SyntheticEvent.prototype._stopPinch = function() {\n        if (this._startPinchMiddleCoordinate === null) {\n            return;\n        }\n        this._startPinchMiddleCoordinate = null;\n        if (isValid(this._handler.pinchEndEvent)) {\n            this._handler.pinchEndEvent({\n                x: 0,\n                y: 0,\n                pageX: 0,\n                pageY: 0\n            });\n        }\n    };\n    SyntheticEvent.prototype._mouseLeaveHandler = function(event) {\n        var _a, _b, _c;\n        (_a = this._unsubscribeMousemove) === null || _a === void 0 ? void 0 : _a.call(this);\n        (_b = this._unsubscribeMouseWheel) === null || _b === void 0 ? void 0 : _b.call(this);\n        (_c = this._unsubscribeContextMenu) === null || _c === void 0 ? void 0 : _c.call(this);\n        if (this._firesTouchEvents(event)) {\n            return;\n        }\n        if (!this._acceptMouseLeave) {\n            // mobile Safari sometimes emits mouse leave event for no reason, there is no way to handle it in other way\n            // just ignore this event if there was no mouse move or mouse enter events\n            return;\n        }\n        this._processEvent(this._makeCompatEvent(event), this._handler.mouseLeaveEvent);\n        // accept all mouse leave events if it's not an iOS device\n        this._acceptMouseLeave = !isIOS();\n    };\n    SyntheticEvent.prototype._longTapHandler = function(event) {\n        var touch = this._touchWithId(event.touches, this._activeTouchId);\n        if (touch === null) {\n            return;\n        }\n        this._processEvent(this._makeCompatEvent(event, touch), this._handler.longTapEvent);\n        this._cancelTap = true;\n        // long tap is active until touchend event with 0 touches occurred\n        this._longTapActive = true;\n    };\n    SyntheticEvent.prototype._firesTouchEvents = function(e) {\n        var _a;\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-expect-error\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n        if (isValid((_a = e.sourceCapabilities) === null || _a === void 0 ? void 0 : _a.firesTouchEvents)) {\n            // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n            // @ts-expect-error\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-return, @typescript-eslint/no-unsafe-member-access\n            return e.sourceCapabilities.firesTouchEvents;\n        }\n        return this._eventTimeStamp(e) < this._lastTouchEventTimeStamp + 500 /* Delay.PreventFiresTouchEvents */ ;\n    };\n    SyntheticEvent.prototype._processEvent = function(event, callback) {\n        callback === null || callback === void 0 ? void 0 : callback.call(this._handler, event);\n    };\n    SyntheticEvent.prototype._makeCompatEvent = function(event, touch) {\n        var _this = this;\n        // TouchEvent has no clientX/Y coordinates:\n        // We have to use the last Touch instead\n        var eventLike = touch !== null && touch !== void 0 ? touch : event;\n        var box = this._target.getBoundingClientRect();\n        return {\n            x: eventLike.clientX - box.left,\n            y: eventLike.clientY - box.top,\n            pageX: eventLike.pageX,\n            pageY: eventLike.pageY,\n            isTouch: !event.type.startsWith(\"mouse\") && event.type !== \"contextmenu\" && event.type !== \"click\" && event.type !== \"wheel\",\n            preventDefault: function() {\n                if (event.type !== \"touchstart\") {\n                    // touchstart is passive and cannot be prevented\n                    _this._preventDefault(event);\n                }\n            }\n        };\n    };\n    SyntheticEvent.prototype._getTouchDistance = function(p1, p2) {\n        var xDiff = p1.clientX - p2.clientX;\n        var yDiff = p1.clientY - p2.clientY;\n        return Math.sqrt(xDiff * xDiff + yDiff * yDiff);\n    };\n    SyntheticEvent.prototype._preventDefault = function(event) {\n        if (event.cancelable) {\n            event.preventDefault();\n        }\n    };\n    SyntheticEvent.prototype._getCoordinate = function(eventLike) {\n        return {\n            x: eventLike.pageX,\n            y: eventLike.pageY\n        };\n    };\n    SyntheticEvent.prototype._eventTimeStamp = function(e) {\n        var _a;\n        // for some reason e.timestamp is always 0 on iPad with magic mouse, so we use performance.now() as a fallback\n        // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n        return (_a = e.timeStamp) !== null && _a !== void 0 ? _a : performance.now();\n    };\n    SyntheticEvent.prototype._touchWithId = function(touches, id) {\n        // eslint-disable-next-line @typescript-eslint/prefer-for-of\n        for(var i = 0; i < touches.length; ++i){\n            if (touches[i].identifier === id) {\n                return touches[i];\n            }\n        }\n        return null;\n    };\n    return SyntheticEvent;\n}();\n/**\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n\n * http://www.apache.org/licenses/LICENSE-2.0\n\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ var Event = /** @class */ function() {\n    function Event(container, chart) {\n        var _this = this;\n        // 惯性滚动开始时间\n        this._flingStartTime = new Date().getTime();\n        // 惯性滚动定时器\n        this._flingScrollRequestId = null;\n        // 开始滚动时坐标点\n        this._startScrollCoordinate = null;\n        // 开始触摸时坐标\n        this._touchCoordinate = null;\n        // 是否是取消了十字光标\n        this._touchCancelCrosshair = false;\n        // 是否缩放过\n        this._touchZoomed = false;\n        // 用来记录捏合缩放的尺寸\n        this._pinchScale = 1;\n        this._mouseDownWidget = null;\n        this._prevYAxisRange = null;\n        this._xAxisStartScaleCoordinate = null;\n        this._xAxisStartScaleDistance = 0;\n        this._xAxisScale = 1;\n        this._yAxisStartScaleDistance = 0;\n        this._mouseMoveTriggerWidgetInfo = {\n            pane: null,\n            widget: null\n        };\n        this._boundKeyBoardDownEvent = function(event) {\n            if (event.shiftKey) {\n                switch(event.code){\n                    case \"Equal\":\n                        {\n                            _this._chart.getChartStore().zoom(0.5);\n                            break;\n                        }\n                    case \"Minus\":\n                        {\n                            _this._chart.getChartStore().zoom(-0.5);\n                            break;\n                        }\n                    case \"ArrowLeft\":\n                        {\n                            var store = _this._chart.getChartStore();\n                            store.startScroll();\n                            store.scroll(-3 * store.getBarSpace().bar);\n                            break;\n                        }\n                    case \"ArrowRight\":\n                        {\n                            var store = _this._chart.getChartStore();\n                            store.startScroll();\n                            store.scroll(3 * store.getBarSpace().bar);\n                            break;\n                        }\n                }\n            }\n        };\n        this._container = container;\n        this._chart = chart;\n        this._event = new SyntheticEvent(container, this, {\n            treatVertDragAsPageScroll: function() {\n                return false;\n            },\n            treatHorzDragAsPageScroll: function() {\n                return false;\n            }\n        });\n        container.addEventListener(\"keydown\", this._boundKeyBoardDownEvent);\n    }\n    Event.prototype.pinchStartEvent = function() {\n        this._touchZoomed = true;\n        this._pinchScale = 1;\n        return true;\n    };\n    Event.prototype.pinchEvent = function(e, scale) {\n        var _a = this._findWidgetByEvent(e), pane = _a.pane, widget = _a.widget;\n        if ((pane === null || pane === void 0 ? void 0 : pane.getId()) !== PaneIdConstants.X_AXIS && (widget === null || widget === void 0 ? void 0 : widget.getName()) === WidgetNameConstants.MAIN) {\n            var event_1 = this._makeWidgetEvent(e, widget);\n            var zoomScale = (scale - this._pinchScale) * 5;\n            this._pinchScale = scale;\n            this._chart.getChartStore().zoom(zoomScale, {\n                x: event_1.x,\n                y: event_1.y\n            });\n            return true;\n        }\n        return false;\n    };\n    Event.prototype.mouseWheelHortEvent = function(_, distance) {\n        var store = this._chart.getChartStore();\n        store.startScroll();\n        store.scroll(distance);\n        return true;\n    };\n    Event.prototype.mouseWheelVertEvent = function(e, scale) {\n        var widget = this._findWidgetByEvent(e).widget;\n        var event = this._makeWidgetEvent(e, widget);\n        var name = widget === null || widget === void 0 ? void 0 : widget.getName();\n        if (name === WidgetNameConstants.MAIN) {\n            this._chart.getChartStore().zoom(scale, {\n                x: event.x,\n                y: event.y\n            });\n            return true;\n        }\n        return false;\n    };\n    Event.prototype.mouseDownEvent = function(e) {\n        var _a = this._findWidgetByEvent(e), pane = _a.pane, widget = _a.widget;\n        this._mouseDownWidget = widget;\n        if (widget !== null) {\n            var event_2 = this._makeWidgetEvent(e, widget);\n            var name_1 = widget.getName();\n            switch(name_1){\n                case WidgetNameConstants.SEPARATOR:\n                    {\n                        return widget.dispatchEvent(\"mouseDownEvent\", event_2);\n                    }\n                case WidgetNameConstants.MAIN:\n                    {\n                        var yAxis = pane.getAxisComponent();\n                        if (!yAxis.getAutoCalcTickFlag()) {\n                            var range = yAxis.getRange();\n                            this._prevYAxisRange = __assign({}, range);\n                        }\n                        this._startScrollCoordinate = {\n                            x: event_2.x,\n                            y: event_2.y\n                        };\n                        this._chart.getChartStore().startScroll();\n                        return widget.dispatchEvent(\"mouseDownEvent\", event_2);\n                    }\n                case WidgetNameConstants.X_AXIS:\n                    {\n                        return this._processXAxisScrollStartEvent(widget, event_2);\n                    }\n                case WidgetNameConstants.Y_AXIS:\n                    {\n                        return this._processYAxisScaleStartEvent(widget, event_2);\n                    }\n            }\n        }\n        return false;\n    };\n    Event.prototype.mouseMoveEvent = function(e) {\n        var _a, _b, _c;\n        var _d = this._findWidgetByEvent(e), pane = _d.pane, widget = _d.widget;\n        var event = this._makeWidgetEvent(e, widget);\n        if (((_a = this._mouseMoveTriggerWidgetInfo.pane) === null || _a === void 0 ? void 0 : _a.getId()) !== (pane === null || pane === void 0 ? void 0 : pane.getId()) || ((_b = this._mouseMoveTriggerWidgetInfo.widget) === null || _b === void 0 ? void 0 : _b.getName()) !== (widget === null || widget === void 0 ? void 0 : widget.getName())) {\n            widget === null || widget === void 0 ? void 0 : widget.dispatchEvent(\"mouseEnterEvent\", event);\n            (_c = this._mouseMoveTriggerWidgetInfo.widget) === null || _c === void 0 ? void 0 : _c.dispatchEvent(\"mouseLeaveEvent\", event);\n            this._mouseMoveTriggerWidgetInfo = {\n                pane: pane,\n                widget: widget\n            };\n        }\n        if (widget !== null) {\n            var name_2 = widget.getName();\n            switch(name_2){\n                case WidgetNameConstants.MAIN:\n                    {\n                        var consumed = widget.dispatchEvent(\"mouseMoveEvent\", event);\n                        var crosshair = {\n                            x: event.x,\n                            y: event.y,\n                            paneId: pane === null || pane === void 0 ? void 0 : pane.getId()\n                        };\n                        if (consumed) {\n                            crosshair = undefined;\n                            widget.getContainer().style.cursor = \"pointer\";\n                        } else {\n                            widget.getContainer().style.cursor = \"crosshair\";\n                        }\n                        this._chart.getChartStore().setCrosshair(crosshair);\n                        return consumed;\n                    }\n                case WidgetNameConstants.SEPARATOR:\n                case WidgetNameConstants.X_AXIS:\n                case WidgetNameConstants.Y_AXIS:\n                    {\n                        var consumed = widget.dispatchEvent(\"mouseMoveEvent\", event);\n                        this._chart.getChartStore().setCrosshair();\n                        return consumed;\n                    }\n            }\n        }\n        return false;\n    };\n    Event.prototype.pressedMouseMoveEvent = function(e) {\n        var _a, _b;\n        if (this._mouseDownWidget !== null && this._mouseDownWidget.getName() === WidgetNameConstants.SEPARATOR) {\n            return this._mouseDownWidget.dispatchEvent(\"pressedMouseMoveEvent\", e);\n        }\n        var _c = this._findWidgetByEvent(e), pane = _c.pane, widget = _c.widget;\n        if (widget !== null && ((_a = this._mouseDownWidget) === null || _a === void 0 ? void 0 : _a.getPane().getId()) === (pane === null || pane === void 0 ? void 0 : pane.getId()) && ((_b = this._mouseDownWidget) === null || _b === void 0 ? void 0 : _b.getName()) === widget.getName()) {\n            var event_3 = this._makeWidgetEvent(e, widget);\n            var name_3 = widget.getName();\n            switch(name_3){\n                case WidgetNameConstants.MAIN:\n                    {\n                        // eslint-disable-next-line @typescript-eslint/init-declarations -- ignore\n                        var crosshair = void 0;\n                        var consumed = widget.dispatchEvent(\"pressedMouseMoveEvent\", event_3);\n                        if (!consumed) {\n                            crosshair = {\n                                x: event_3.x,\n                                y: event_3.y,\n                                paneId: pane === null || pane === void 0 ? void 0 : pane.getId()\n                            };\n                            this._processMainScrollingEvent(widget, event_3);\n                        }\n                        this._chart.getChartStore().setCrosshair(crosshair, {\n                            forceInvalidate: true\n                        });\n                        return consumed;\n                    }\n                case WidgetNameConstants.X_AXIS:\n                    {\n                        return this._processXAxisScrollingEvent(widget, event_3);\n                    }\n                case WidgetNameConstants.Y_AXIS:\n                    {\n                        return this._processYAxisScalingEvent(widget, event_3);\n                    }\n            }\n        }\n        return false;\n    };\n    Event.prototype.mouseUpEvent = function(e) {\n        var widget = this._findWidgetByEvent(e).widget;\n        var consumed = false;\n        if (widget !== null) {\n            var event_4 = this._makeWidgetEvent(e, widget);\n            var name_4 = widget.getName();\n            switch(name_4){\n                case WidgetNameConstants.MAIN:\n                case WidgetNameConstants.SEPARATOR:\n                case WidgetNameConstants.X_AXIS:\n                case WidgetNameConstants.Y_AXIS:\n                    {\n                        consumed = widget.dispatchEvent(\"mouseUpEvent\", event_4);\n                        break;\n                    }\n            }\n            if (consumed) {\n                this._chart.updatePane(1 /* UpdateLevel.Overlay */ );\n            }\n        }\n        this._mouseDownWidget = null;\n        this._startScrollCoordinate = null;\n        this._prevYAxisRange = null;\n        this._xAxisStartScaleCoordinate = null;\n        this._xAxisStartScaleDistance = 0;\n        this._xAxisScale = 1;\n        this._yAxisStartScaleDistance = 0;\n        return consumed;\n    };\n    Event.prototype.mouseClickEvent = function(e) {\n        var widget = this._findWidgetByEvent(e).widget;\n        if (widget !== null) {\n            var event_5 = this._makeWidgetEvent(e, widget);\n            return widget.dispatchEvent(\"mouseClickEvent\", event_5);\n        }\n        return false;\n    };\n    Event.prototype.mouseRightClickEvent = function(e) {\n        var widget = this._findWidgetByEvent(e).widget;\n        var consumed = false;\n        if (widget !== null) {\n            var event_6 = this._makeWidgetEvent(e, widget);\n            var name_5 = widget.getName();\n            switch(name_5){\n                case WidgetNameConstants.MAIN:\n                case WidgetNameConstants.X_AXIS:\n                case WidgetNameConstants.Y_AXIS:\n                    {\n                        consumed = widget.dispatchEvent(\"mouseRightClickEvent\", event_6);\n                        break;\n                    }\n            }\n            if (consumed) {\n                this._chart.updatePane(1 /* UpdateLevel.Overlay */ );\n            }\n        }\n        return false;\n    };\n    Event.prototype.mouseDoubleClickEvent = function(e) {\n        var _a = this._findWidgetByEvent(e), pane = _a.pane, widget = _a.widget;\n        if (widget !== null) {\n            var name_6 = widget.getName();\n            switch(name_6){\n                case WidgetNameConstants.MAIN:\n                    {\n                        var event_7 = this._makeWidgetEvent(e, widget);\n                        return widget.dispatchEvent(\"mouseDoubleClickEvent\", event_7);\n                    }\n                case WidgetNameConstants.Y_AXIS:\n                    {\n                        var yAxis = pane.getAxisComponent();\n                        if (!yAxis.getAutoCalcTickFlag()) {\n                            yAxis.setAutoCalcTickFlag(true);\n                            this._chart.layout({\n                                measureWidth: true,\n                                update: true,\n                                buildYAxisTick: true\n                            });\n                            return true;\n                        }\n                        break;\n                    }\n            }\n        }\n        return false;\n    };\n    Event.prototype.mouseLeaveEvent = function() {\n        this._chart.getChartStore().setCrosshair();\n        return true;\n    };\n    Event.prototype.touchStartEvent = function(e) {\n        var _a;\n        var _b = this._findWidgetByEvent(e), pane = _b.pane, widget = _b.widget;\n        if (widget !== null) {\n            var event_8 = this._makeWidgetEvent(e, widget);\n            (_a = event_8.preventDefault) === null || _a === void 0 ? void 0 : _a.call(event_8);\n            var name_7 = widget.getName();\n            switch(name_7){\n                case WidgetNameConstants.MAIN:\n                    {\n                        var chartStore = this._chart.getChartStore();\n                        if (widget.dispatchEvent(\"mouseDownEvent\", event_8)) {\n                            this._touchCancelCrosshair = true;\n                            this._touchCoordinate = null;\n                            chartStore.setCrosshair(undefined, {\n                                notInvalidate: true\n                            });\n                            this._chart.updatePane(1 /* UpdateLevel.Overlay */ );\n                            return true;\n                        }\n                        if (this._flingScrollRequestId !== null) {\n                            cancelAnimationFrame(this._flingScrollRequestId);\n                            this._flingScrollRequestId = null;\n                        }\n                        this._flingStartTime = new Date().getTime();\n                        var yAxis = pane.getAxisComponent();\n                        if (!yAxis.getAutoCalcTickFlag()) {\n                            var range = yAxis.getRange();\n                            this._prevYAxisRange = __assign({}, range);\n                        }\n                        this._startScrollCoordinate = {\n                            x: event_8.x,\n                            y: event_8.y\n                        };\n                        chartStore.startScroll();\n                        this._touchZoomed = false;\n                        if (this._touchCoordinate !== null) {\n                            var xDif = event_8.x - this._touchCoordinate.x;\n                            var yDif = event_8.y - this._touchCoordinate.y;\n                            var radius = Math.sqrt(xDif * xDif + yDif * yDif);\n                            if (radius < TOUCH_MIN_RADIUS) {\n                                this._touchCoordinate = {\n                                    x: event_8.x,\n                                    y: event_8.y\n                                };\n                                chartStore.setCrosshair({\n                                    x: event_8.x,\n                                    y: event_8.y,\n                                    paneId: pane === null || pane === void 0 ? void 0 : pane.getId()\n                                });\n                            } else {\n                                this._touchCoordinate = null;\n                                this._touchCancelCrosshair = true;\n                                chartStore.setCrosshair();\n                            }\n                        }\n                        return true;\n                    }\n                case WidgetNameConstants.X_AXIS:\n                    {\n                        return this._processXAxisScrollStartEvent(widget, event_8);\n                    }\n                case WidgetNameConstants.Y_AXIS:\n                    {\n                        return this._processYAxisScaleStartEvent(widget, event_8);\n                    }\n            }\n        }\n        return false;\n    };\n    Event.prototype.touchMoveEvent = function(e) {\n        var _a;\n        var _b = this._findWidgetByEvent(e), pane = _b.pane, widget = _b.widget;\n        if (widget !== null) {\n            var event_9 = this._makeWidgetEvent(e, widget);\n            (_a = event_9.preventDefault) === null || _a === void 0 ? void 0 : _a.call(event_9);\n            var name_8 = widget.getName();\n            var chartStore = this._chart.getChartStore();\n            switch(name_8){\n                case WidgetNameConstants.MAIN:\n                    {\n                        if (widget.dispatchEvent(\"pressedMouseMoveEvent\", event_9)) {\n                            chartStore.setCrosshair(undefined, {\n                                notInvalidate: true\n                            });\n                            this._chart.updatePane(1 /* UpdateLevel.Overlay */ );\n                            return true;\n                        }\n                        if (this._touchCoordinate !== null) {\n                            chartStore.setCrosshair({\n                                x: event_9.x,\n                                y: event_9.y,\n                                paneId: pane === null || pane === void 0 ? void 0 : pane.getId()\n                            });\n                        } else {\n                            this._processMainScrollingEvent(widget, event_9);\n                        }\n                        return true;\n                    }\n                case WidgetNameConstants.X_AXIS:\n                    {\n                        return this._processXAxisScrollingEvent(widget, event_9);\n                    }\n                case WidgetNameConstants.Y_AXIS:\n                    {\n                        return this._processYAxisScalingEvent(widget, event_9);\n                    }\n            }\n        }\n        return false;\n    };\n    Event.prototype.touchEndEvent = function(e) {\n        var _this = this;\n        var widget = this._findWidgetByEvent(e).widget;\n        if (widget !== null) {\n            var event_10 = this._makeWidgetEvent(e, widget);\n            var name_9 = widget.getName();\n            switch(name_9){\n                case WidgetNameConstants.MAIN:\n                    {\n                        widget.dispatchEvent(\"mouseUpEvent\", event_10);\n                        if (this._startScrollCoordinate !== null) {\n                            var time = new Date().getTime() - this._flingStartTime;\n                            var distance = event_10.x - this._startScrollCoordinate.x;\n                            var v_1 = distance / (time > 0 ? time : 1) * 20;\n                            if (time < 200 && Math.abs(v_1) > 0) {\n                                var store_1 = this._chart.getChartStore();\n                                var flingScroll_1 = function() {\n                                    _this._flingScrollRequestId = requestAnimationFrame(function() {\n                                        store_1.startScroll();\n                                        store_1.scroll(v_1);\n                                        v_1 = v_1 * (1 - 0.025);\n                                        if (Math.abs(v_1) < 1) {\n                                            if (_this._flingScrollRequestId !== null) {\n                                                cancelAnimationFrame(_this._flingScrollRequestId);\n                                                _this._flingScrollRequestId = null;\n                                            }\n                                        } else {\n                                            flingScroll_1();\n                                        }\n                                    });\n                                };\n                                flingScroll_1();\n                            }\n                        }\n                        return true;\n                    }\n                case WidgetNameConstants.X_AXIS:\n                case WidgetNameConstants.Y_AXIS:\n                    {\n                        var consumed = widget.dispatchEvent(\"mouseUpEvent\", event_10);\n                        if (consumed) {\n                            this._chart.updatePane(1 /* UpdateLevel.Overlay */ );\n                        }\n                    }\n            }\n            this._startScrollCoordinate = null;\n            this._prevYAxisRange = null;\n            this._xAxisStartScaleCoordinate = null;\n            this._xAxisStartScaleDistance = 0;\n            this._xAxisScale = 1;\n            this._yAxisStartScaleDistance = 0;\n        }\n        return false;\n    };\n    Event.prototype.tapEvent = function(e) {\n        var _a = this._findWidgetByEvent(e), pane = _a.pane, widget = _a.widget;\n        var consumed = false;\n        if (widget !== null) {\n            var event_11 = this._makeWidgetEvent(e, widget);\n            var result = widget.dispatchEvent(\"mouseClickEvent\", event_11);\n            if (widget.getName() === WidgetNameConstants.MAIN) {\n                var event_12 = this._makeWidgetEvent(e, widget);\n                var chartStore = this._chart.getChartStore();\n                if (result) {\n                    this._touchCancelCrosshair = true;\n                    this._touchCoordinate = null;\n                    chartStore.setCrosshair(undefined, {\n                        notInvalidate: true\n                    });\n                    consumed = true;\n                } else {\n                    if (!this._touchCancelCrosshair && !this._touchZoomed) {\n                        this._touchCoordinate = {\n                            x: event_12.x,\n                            y: event_12.y\n                        };\n                        chartStore.setCrosshair({\n                            x: event_12.x,\n                            y: event_12.y,\n                            paneId: pane === null || pane === void 0 ? void 0 : pane.getId()\n                        }, {\n                            notInvalidate: true\n                        });\n                        consumed = true;\n                    }\n                    this._touchCancelCrosshair = false;\n                }\n            }\n            if (consumed || result) {\n                this._chart.updatePane(1 /* UpdateLevel.Overlay */ );\n            }\n        }\n        return consumed;\n    };\n    Event.prototype.doubleTapEvent = function(e) {\n        return this.mouseDoubleClickEvent(e);\n    };\n    Event.prototype.longTapEvent = function(e) {\n        var _a = this._findWidgetByEvent(e), pane = _a.pane, widget = _a.widget;\n        if (widget !== null && widget.getName() === WidgetNameConstants.MAIN) {\n            var event_13 = this._makeWidgetEvent(e, widget);\n            this._touchCoordinate = {\n                x: event_13.x,\n                y: event_13.y\n            };\n            this._chart.getChartStore().setCrosshair({\n                x: event_13.x,\n                y: event_13.y,\n                paneId: pane === null || pane === void 0 ? void 0 : pane.getId()\n            });\n            return true;\n        }\n        return false;\n    };\n    Event.prototype._processMainScrollingEvent = function(widget, event) {\n        if (this._startScrollCoordinate !== null) {\n            var yAxis = widget.getPane().getAxisComponent();\n            if (this._prevYAxisRange !== null && !yAxis.getAutoCalcTickFlag() && yAxis.scrollZoomEnabled) {\n                var _a = this._prevYAxisRange, from = _a.from, to = _a.to, range = _a.range;\n                var distance_1 = 0;\n                if (yAxis.reverse) {\n                    distance_1 = this._startScrollCoordinate.y - event.y;\n                } else {\n                    distance_1 = event.y - this._startScrollCoordinate.y;\n                }\n                var bounding = widget.getBounding();\n                var scale = distance_1 / bounding.height;\n                var difRange = range * scale;\n                var newFrom = from + difRange;\n                var newTo = to + difRange;\n                var newRealFrom = yAxis.valueToRealValue(newFrom, {\n                    range: this._prevYAxisRange\n                });\n                var newRealTo = yAxis.valueToRealValue(newTo, {\n                    range: this._prevYAxisRange\n                });\n                var newDisplayFrom = yAxis.realValueToDisplayValue(newRealFrom, {\n                    range: this._prevYAxisRange\n                });\n                var newDisplayTo = yAxis.realValueToDisplayValue(newRealTo, {\n                    range: this._prevYAxisRange\n                });\n                yAxis.setRange({\n                    from: newFrom,\n                    to: newTo,\n                    range: newTo - newFrom,\n                    realFrom: newRealFrom,\n                    realTo: newRealTo,\n                    realRange: newRealTo - newRealFrom,\n                    displayFrom: newDisplayFrom,\n                    displayTo: newDisplayTo,\n                    displayRange: newDisplayTo - newDisplayFrom\n                });\n            }\n            var distance = event.x - this._startScrollCoordinate.x;\n            this._chart.getChartStore().scroll(distance);\n        }\n    };\n    Event.prototype._processXAxisScrollStartEvent = function(widget, event) {\n        var consumed = widget.dispatchEvent(\"mouseDownEvent\", event);\n        if (consumed) {\n            this._chart.updatePane(1 /* UpdateLevel.Overlay */ );\n        }\n        this._xAxisStartScaleCoordinate = {\n            x: event.x,\n            y: event.y\n        };\n        this._xAxisStartScaleDistance = event.pageX;\n        return consumed;\n    };\n    Event.prototype._processXAxisScrollingEvent = function(widget, event) {\n        var _a;\n        var consumed = widget.dispatchEvent(\"pressedMouseMoveEvent\", event);\n        if (!consumed) {\n            var xAxis = widget.getPane().getAxisComponent();\n            if (xAxis.scrollZoomEnabled && this._xAxisStartScaleDistance !== 0) {\n                var scale = this._xAxisStartScaleDistance / event.pageX;\n                if (Number.isFinite(scale)) {\n                    var zoomScale = (scale - this._xAxisScale) * 10;\n                    this._xAxisScale = scale;\n                    this._chart.getChartStore().zoom(zoomScale, (_a = this._xAxisStartScaleCoordinate) !== null && _a !== void 0 ? _a : undefined);\n                }\n            }\n        } else {\n            this._chart.updatePane(1 /* UpdateLevel.Overlay */ );\n        }\n        return consumed;\n    };\n    Event.prototype._processYAxisScaleStartEvent = function(widget, event) {\n        var consumed = widget.dispatchEvent(\"mouseDownEvent\", event);\n        if (consumed) {\n            this._chart.updatePane(1 /* UpdateLevel.Overlay */ );\n        }\n        var range = widget.getPane().getAxisComponent().getRange();\n        this._prevYAxisRange = __assign({}, range);\n        this._yAxisStartScaleDistance = event.pageY;\n        return consumed;\n    };\n    Event.prototype._processYAxisScalingEvent = function(widget, event) {\n        var consumed = widget.dispatchEvent(\"pressedMouseMoveEvent\", event);\n        if (!consumed) {\n            var yAxis = widget.getPane().getAxisComponent();\n            if (this._prevYAxisRange !== null && yAxis.scrollZoomEnabled && this._yAxisStartScaleDistance !== 0) {\n                var _a = this._prevYAxisRange, from = _a.from, to = _a.to, range = _a.range;\n                var scale = event.pageY / this._yAxisStartScaleDistance;\n                var newRange = range * scale;\n                var difRange = (newRange - range) / 2;\n                var newFrom = from - difRange;\n                var newTo = to + difRange;\n                var newRealFrom = yAxis.valueToRealValue(newFrom, {\n                    range: this._prevYAxisRange\n                });\n                var newRealTo = yAxis.valueToRealValue(newTo, {\n                    range: this._prevYAxisRange\n                });\n                var newDisplayFrom = yAxis.realValueToDisplayValue(newRealFrom, {\n                    range: this._prevYAxisRange\n                });\n                var newDisplayTo = yAxis.realValueToDisplayValue(newRealTo, {\n                    range: this._prevYAxisRange\n                });\n                yAxis.setRange({\n                    from: newFrom,\n                    to: newTo,\n                    range: newRange,\n                    realFrom: newRealFrom,\n                    realTo: newRealTo,\n                    realRange: newRealTo - newRealFrom,\n                    displayFrom: newDisplayFrom,\n                    displayTo: newDisplayTo,\n                    displayRange: newDisplayTo - newDisplayFrom\n                });\n                this._chart.layout({\n                    measureWidth: true,\n                    update: true,\n                    buildYAxisTick: true\n                });\n            }\n        } else {\n            this._chart.updatePane(1 /* UpdateLevel.Overlay */ );\n        }\n        return consumed;\n    };\n    Event.prototype._findWidgetByEvent = function(event) {\n        var e_1, _a, e_2, _b;\n        var x = event.x, y = event.y;\n        var separatorPanes = this._chart.getSeparatorPanes();\n        var separatorSize = this._chart.getStyles().separator.size;\n        try {\n            for(var separatorPanes_1 = __values(separatorPanes), separatorPanes_1_1 = separatorPanes_1.next(); !separatorPanes_1_1.done; separatorPanes_1_1 = separatorPanes_1.next()){\n                var _c = __read(separatorPanes_1_1.value, 2), pane_1 = _c[1];\n                var bounding = pane_1.getBounding();\n                var top_1 = bounding.top - Math.round((REAL_SEPARATOR_HEIGHT - separatorSize) / 2);\n                if (x >= bounding.left && x <= bounding.left + bounding.width && y >= top_1 && y <= top_1 + REAL_SEPARATOR_HEIGHT) {\n                    return {\n                        pane: pane_1,\n                        widget: pane_1.getWidget()\n                    };\n                }\n            }\n        } catch (e_1_1) {\n            e_1 = {\n                error: e_1_1\n            };\n        } finally{\n            try {\n                if (separatorPanes_1_1 && !separatorPanes_1_1.done && (_a = separatorPanes_1.return)) _a.call(separatorPanes_1);\n            } finally{\n                if (e_1) throw e_1.error;\n            }\n        }\n        var drawPanes = this._chart.getDrawPanes();\n        var pane = null;\n        try {\n            for(var drawPanes_1 = __values(drawPanes), drawPanes_1_1 = drawPanes_1.next(); !drawPanes_1_1.done; drawPanes_1_1 = drawPanes_1.next()){\n                var p = drawPanes_1_1.value;\n                var bounding = p.getBounding();\n                if (x >= bounding.left && x <= bounding.left + bounding.width && y >= bounding.top && y <= bounding.top + bounding.height) {\n                    pane = p;\n                    break;\n                }\n            }\n        } catch (e_2_1) {\n            e_2 = {\n                error: e_2_1\n            };\n        } finally{\n            try {\n                if (drawPanes_1_1 && !drawPanes_1_1.done && (_b = drawPanes_1.return)) _b.call(drawPanes_1);\n            } finally{\n                if (e_2) throw e_2.error;\n            }\n        }\n        var widget = null;\n        if (pane !== null) {\n            if (!isValid(widget)) {\n                var mainWidget = pane.getMainWidget();\n                var mainBounding = mainWidget.getBounding();\n                if (x >= mainBounding.left && x <= mainBounding.left + mainBounding.width && y >= mainBounding.top && y <= mainBounding.top + mainBounding.height) {\n                    widget = mainWidget;\n                }\n            }\n            if (!isValid(widget)) {\n                var yAxisWidget = pane.getYAxisWidget();\n                if (yAxisWidget !== null) {\n                    var yAxisBounding = yAxisWidget.getBounding();\n                    if (x >= yAxisBounding.left && x <= yAxisBounding.left + yAxisBounding.width && y >= yAxisBounding.top && y <= yAxisBounding.top + yAxisBounding.height) {\n                        widget = yAxisWidget;\n                    }\n                }\n            }\n        }\n        return {\n            pane: pane,\n            widget: widget\n        };\n    };\n    Event.prototype._makeWidgetEvent = function(event, widget) {\n        var _a, _b, _c;\n        var bounding = (_a = widget === null || widget === void 0 ? void 0 : widget.getBounding()) !== null && _a !== void 0 ? _a : null;\n        return __assign(__assign({}, event), {\n            x: event.x - ((_b = bounding === null || bounding === void 0 ? void 0 : bounding.left) !== null && _b !== void 0 ? _b : 0),\n            y: event.y - ((_c = bounding === null || bounding === void 0 ? void 0 : bounding.top) !== null && _c !== void 0 ? _c : 0)\n        });\n    };\n    Event.prototype.destroy = function() {\n        this._container.removeEventListener(\"keydown\", this._boundKeyBoardDownEvent);\n        this._event.destroy();\n    };\n    return Event;\n}();\n/**\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n\n * http://www.apache.org/licenses/LICENSE-2.0\n\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ var DomPosition;\n(function(DomPosition) {\n    DomPosition[\"Root\"] = \"root\";\n    DomPosition[\"Main\"] = \"main\";\n    DomPosition[\"YAxis\"] = \"yAxis\";\n})(DomPosition || (DomPosition = {}));\nvar ChartImp = /** @class */ function() {\n    function ChartImp(container, options) {\n        this._chartBounding = createDefaultBounding();\n        this._drawPanes = [];\n        this._separatorPanes = new Map();\n        this._layoutOptions = {\n            sort: true,\n            measureHeight: true,\n            measureWidth: true,\n            update: true,\n            buildYAxisTick: false,\n            forceBuildYAxisTick: false\n        };\n        this._layoutPending = false;\n        this._initContainer(container);\n        this._chartEvent = new Event(this._chartContainer, this);\n        this._chartStore = new StoreImp(this, options);\n        this._initPanes(options);\n        this._layout();\n    }\n    ChartImp.prototype._initContainer = function(container) {\n        this._container = container;\n        this._chartContainer = createDom(\"div\", {\n            position: \"relative\",\n            width: \"100%\",\n            height: \"100%\",\n            outline: \"none\",\n            borderStyle: \"none\",\n            cursor: \"crosshair\",\n            boxSizing: \"border-box\",\n            userSelect: \"none\",\n            webkitUserSelect: \"none\",\n            overflow: \"hidden\",\n            // eslint-disable-next-line @typescript-eslint/ban-ts-comment -- ignore\n            // @ts-expect-error\n            msUserSelect: \"none\",\n            MozUserSelect: \"none\",\n            webkitTapHighlightColor: \"transparent\"\n        });\n        this._chartContainer.tabIndex = 1;\n        container.appendChild(this._chartContainer);\n        this._cacheChartBounding();\n    };\n    ChartImp.prototype._cacheChartBounding = function() {\n        this._chartBounding.width = Math.floor(this._chartContainer.clientWidth);\n        this._chartBounding.height = Math.floor(this._chartContainer.clientHeight);\n    };\n    ChartImp.prototype._initPanes = function(options) {\n        var _this = this;\n        var _a;\n        var layout = (_a = options === null || options === void 0 ? void 0 : options.layout) !== null && _a !== void 0 ? _a : [\n            {\n                type: \"candle\" /* LayoutChildType.Candle */ \n            }\n        ];\n        var createCandlePane = function(child) {\n            var _a, _b;\n            if (!isValid(_this._candlePane)) {\n                var paneOptions_1 = (_a = child.options) !== null && _a !== void 0 ? _a : {};\n                merge(paneOptions_1, {\n                    id: PaneIdConstants.CANDLE\n                });\n                _this._candlePane = _this._createPane(CandlePane, PaneIdConstants.CANDLE, paneOptions_1);\n                var content = (_b = child.content) !== null && _b !== void 0 ? _b : [];\n                content.forEach(function(v) {\n                    _this.createIndicator(v, true, paneOptions_1);\n                });\n            }\n        };\n        var createXAxisPane = function(ops) {\n            if (!isValid(_this._xAxisPane)) {\n                var pane = _this._createPane(XAxisPane, PaneIdConstants.X_AXIS, ops !== null && ops !== void 0 ? ops : {});\n                _this._xAxisPane = pane;\n            }\n        };\n        layout.forEach(function(child) {\n            var _a, _b, _c;\n            switch(child.type){\n                case \"candle\" /* LayoutChildType.Candle */ :\n                    {\n                        createCandlePane(child);\n                        break;\n                    }\n                case \"indicator\" /* LayoutChildType.Indicator */ :\n                    {\n                        var content = (_a = child.content) !== null && _a !== void 0 ? _a : [];\n                        if (content.length > 0) {\n                            var paneId = (_c = (_b = child.options) === null || _b === void 0 ? void 0 : _b.id) !== null && _c !== void 0 ? _c : null;\n                            if (isValid(paneId)) {\n                                paneId = createId(PaneIdConstants.INDICATOR);\n                            }\n                            var paneOptions_2 = __assign(__assign({}, child.options), {\n                                id: paneId\n                            });\n                            content.forEach(function(v) {\n                                _this.createIndicator(v, true, paneOptions_2);\n                            });\n                        }\n                        break;\n                    }\n                case \"xAxis\" /* LayoutChildType.XAxis */ :\n                    {\n                        createXAxisPane(child.options);\n                        break;\n                    }\n            }\n        });\n        createCandlePane({});\n        createXAxisPane({\n            order: Number.MAX_SAFE_INTEGER\n        });\n    };\n    ChartImp.prototype._createPane = function(DrawPaneClass, id, options) {\n        var pane = new DrawPaneClass(this, id, options !== null && options !== void 0 ? options : {});\n        this._drawPanes.push(pane);\n        return pane;\n    };\n    ChartImp.prototype._recalculatePaneHeight = function(currentPane, currentHeight, changeHeight) {\n        if (changeHeight === 0) {\n            return false;\n        }\n        var normalStatePanes = this._drawPanes.filter(function(pane) {\n            var paneId = pane.getId();\n            return pane.getOptions().state === \"normal\" /* PaneState.Normal */  && paneId !== currentPane.getId() && paneId !== PaneIdConstants.X_AXIS;\n        });\n        var count = normalStatePanes.length;\n        if (count === 0) {\n            return false;\n        }\n        if (currentPane.getId() !== PaneIdConstants.CANDLE && isValid(this._candlePane) && this._candlePane.getOptions().state === \"normal\" /* PaneState.Normal */ ) {\n            var height = this._candlePane.getBounding().height;\n            if (height > 0) {\n                var minHeight = this._candlePane.getOptions().minHeight;\n                var newHeight = height + changeHeight;\n                if (newHeight < minHeight) {\n                    newHeight = minHeight;\n                    currentHeight -= height + changeHeight - newHeight;\n                }\n                this._candlePane.setBounding({\n                    height: newHeight\n                });\n            }\n        } else {\n            var remainingHeight_1 = changeHeight;\n            var normalStatePaneChangeHeight_1 = Math.floor(changeHeight / count);\n            normalStatePanes.forEach(function(pane, index) {\n                var height = pane.getBounding().height;\n                var newHeight = 0;\n                if (index === count - 1) {\n                    newHeight = height + remainingHeight_1;\n                } else {\n                    newHeight = height + normalStatePaneChangeHeight_1;\n                }\n                if (newHeight < pane.getOptions().minHeight) {\n                    newHeight = pane.getOptions().minHeight;\n                }\n                pane.setBounding({\n                    height: newHeight\n                });\n                remainingHeight_1 -= newHeight - height;\n            });\n            if (Math.abs(remainingHeight_1) > 0) {\n                currentHeight -= remainingHeight_1;\n            }\n        }\n        currentPane.setBounding({\n            height: currentHeight\n        });\n        return true;\n    };\n    ChartImp.prototype.getDrawPaneById = function(paneId) {\n        if (paneId === PaneIdConstants.CANDLE) {\n            return this._candlePane;\n        }\n        if (paneId === PaneIdConstants.X_AXIS) {\n            return this._xAxisPane;\n        }\n        var pane = this._drawPanes.find(function(p) {\n            return p.getId() === paneId;\n        });\n        return pane !== null && pane !== void 0 ? pane : null;\n    };\n    ChartImp.prototype.getContainer = function() {\n        return this._container;\n    };\n    ChartImp.prototype.getChartStore = function() {\n        return this._chartStore;\n    };\n    ChartImp.prototype.getXAxisPane = function() {\n        return this._xAxisPane;\n    };\n    ChartImp.prototype.getDrawPanes = function() {\n        return this._drawPanes;\n    };\n    ChartImp.prototype.getSeparatorPanes = function() {\n        return this._separatorPanes;\n    };\n    ChartImp.prototype.layout = function(options) {\n        var _this = this;\n        var _a, _b, _c, _d, _e, _f;\n        if ((_a = options.sort) !== null && _a !== void 0 ? _a : false) {\n            this._layoutOptions.sort = options.sort;\n        }\n        if ((_b = options.measureHeight) !== null && _b !== void 0 ? _b : false) {\n            this._layoutOptions.measureHeight = options.measureHeight;\n        }\n        if ((_c = options.measureWidth) !== null && _c !== void 0 ? _c : false) {\n            this._layoutOptions.measureWidth = options.measureWidth;\n        }\n        if ((_d = options.update) !== null && _d !== void 0 ? _d : false) {\n            this._layoutOptions.update = options.update;\n        }\n        if ((_e = options.buildYAxisTick) !== null && _e !== void 0 ? _e : false) {\n            this._layoutOptions.buildYAxisTick = options.buildYAxisTick;\n        }\n        if ((_f = options.buildYAxisTick) !== null && _f !== void 0 ? _f : false) {\n            this._layoutOptions.forceBuildYAxisTick = options.forceBuildYAxisTick;\n        }\n        if (!this._layoutPending) {\n            this._layoutPending = true;\n            Promise.resolve().then(function(_) {\n                _this._layout();\n                _this._layoutPending = false;\n            }).catch(function(_) {\n            // todo\n            });\n        }\n    };\n    ChartImp.prototype._layout = function() {\n        var _this = this;\n        var _a = this._layoutOptions, sort = _a.sort, measureHeight = _a.measureHeight, measureWidth = _a.measureWidth, update = _a.update, buildYAxisTick = _a.buildYAxisTick, forceBuildYAxisTick = _a.forceBuildYAxisTick;\n        if (sort) {\n            while(isValid(this._chartContainer.firstChild)){\n                this._chartContainer.removeChild(this._chartContainer.firstChild);\n            }\n            this._separatorPanes.clear();\n            this._drawPanes.sort(function(a, b) {\n                return a.getOptions().order - b.getOptions().order;\n            });\n            var prevPane_1 = null;\n            this._drawPanes.forEach(function(pane) {\n                if (pane.getId() !== PaneIdConstants.X_AXIS) {\n                    if (isValid(prevPane_1)) {\n                        var separatorPane = new SeparatorPane(_this, \"\", prevPane_1, pane);\n                        _this._chartContainer.appendChild(separatorPane.getContainer());\n                        _this._separatorPanes.set(pane, separatorPane);\n                    }\n                    prevPane_1 = pane;\n                }\n                _this._chartContainer.appendChild(pane.getContainer());\n            });\n        }\n        if (measureHeight) {\n            var totalHeight = this._chartBounding.height;\n            var separatorSize_1 = this.getStyles().separator.size;\n            var xAxisHeight = this._xAxisPane.getAxisComponent().getAutoSize();\n            var remainingHeight_2 = totalHeight - xAxisHeight;\n            if (remainingHeight_2 < 0) {\n                remainingHeight_2 = 0;\n            }\n            this._drawPanes.forEach(function(pane) {\n                var paneId = pane.getId();\n                if (isValid(_this._separatorPanes.get(pane))) {\n                    remainingHeight_2 -= separatorSize_1;\n                }\n                if (paneId !== PaneIdConstants.X_AXIS && paneId !== PaneIdConstants.CANDLE && pane.getVisible()) {\n                    var paneHeight = pane.getBounding().height;\n                    if (paneHeight > remainingHeight_2) {\n                        paneHeight = remainingHeight_2;\n                        remainingHeight_2 = 0;\n                    } else {\n                        remainingHeight_2 -= paneHeight;\n                    }\n                    pane.setBounding({\n                        height: paneHeight\n                    });\n                }\n            });\n            this._candlePane.setBounding({\n                height: Math.max(remainingHeight_2, 0)\n            });\n            this._xAxisPane.setBounding({\n                height: xAxisHeight\n            });\n            var top_1 = 0;\n            this._drawPanes.forEach(function(pane) {\n                var separatorPane = _this._separatorPanes.get(pane);\n                if (isValid(separatorPane)) {\n                    separatorPane.setBounding({\n                        height: separatorSize_1,\n                        top: top_1\n                    });\n                    top_1 += separatorSize_1;\n                }\n                pane.setBounding({\n                    top: top_1\n                });\n                top_1 += pane.getBounding().height;\n            });\n        }\n        var forceMeasureWidth = measureWidth;\n        if (buildYAxisTick || forceBuildYAxisTick) {\n            this._drawPanes.forEach(function(pane) {\n                var success = pane.getAxisComponent().buildTicks(forceBuildYAxisTick);\n                forceMeasureWidth || (forceMeasureWidth = success);\n            });\n        }\n        if (forceMeasureWidth) {\n            var totalWidth = this._chartBounding.width;\n            var styles = this.getStyles();\n            var leftYAxisWidth_1 = 0;\n            var leftYAxisOutside_1 = true;\n            var rightYAxisWidth_1 = 0;\n            var rightYAxisOutside_1 = true;\n            this._drawPanes.forEach(function(pane) {\n                if (pane.getId() !== PaneIdConstants.X_AXIS) {\n                    var yAxis = pane.getAxisComponent();\n                    var inside = yAxis.inside;\n                    var yAxisWidth = yAxis.getAutoSize();\n                    if (yAxis.position === AxisPosition.Left) {\n                        leftYAxisWidth_1 = Math.max(leftYAxisWidth_1, yAxisWidth);\n                        if (inside) {\n                            leftYAxisOutside_1 = false;\n                        }\n                    } else {\n                        rightYAxisWidth_1 = Math.max(rightYAxisWidth_1, yAxisWidth);\n                        if (inside) {\n                            rightYAxisOutside_1 = false;\n                        }\n                    }\n                }\n            });\n            var mainWidth = totalWidth;\n            var mainLeft = 0;\n            var mainRight = 0;\n            // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition -- ignore\n            if (leftYAxisOutside_1) {\n                mainWidth -= leftYAxisWidth_1;\n                mainLeft = leftYAxisWidth_1;\n            }\n            // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition -- ignore\n            if (rightYAxisOutside_1) {\n                mainWidth -= rightYAxisWidth_1;\n                mainRight = rightYAxisWidth_1;\n            }\n            this._chartStore.setTotalBarSpace(mainWidth);\n            var paneBounding_1 = {\n                width: totalWidth\n            };\n            var mainBounding_1 = {\n                width: mainWidth,\n                left: mainLeft,\n                right: mainRight\n            };\n            var leftYAxisBounding_1 = {\n                width: leftYAxisWidth_1\n            };\n            var rightYAxisBounding_1 = {\n                width: rightYAxisWidth_1\n            };\n            var separatorFill = styles.separator.fill;\n            var separatorBounding_1 = {};\n            if (!separatorFill) {\n                separatorBounding_1 = mainBounding_1;\n            } else {\n                separatorBounding_1 = paneBounding_1;\n            }\n            this._drawPanes.forEach(function(pane) {\n                var _a;\n                (_a = _this._separatorPanes.get(pane)) === null || _a === void 0 ? void 0 : _a.setBounding(separatorBounding_1);\n                pane.setBounding(paneBounding_1, mainBounding_1, leftYAxisBounding_1, rightYAxisBounding_1);\n            });\n        }\n        if (update) {\n            this._xAxisPane.getAxisComponent().buildTicks(true);\n            this.updatePane(4 /* UpdateLevel.All */ );\n        }\n        this._layoutOptions = {\n            sort: false,\n            measureHeight: false,\n            measureWidth: false,\n            update: false,\n            buildYAxisTick: false,\n            forceBuildYAxisTick: false\n        };\n    };\n    ChartImp.prototype.updatePane = function(level, paneId) {\n        var _this = this;\n        if (isValid(paneId)) {\n            var pane = this.getDrawPaneById(paneId);\n            pane === null || pane === void 0 ? void 0 : pane.update(level);\n        } else {\n            this._drawPanes.forEach(function(pane) {\n                var _a;\n                pane.update(level);\n                (_a = _this._separatorPanes.get(pane)) === null || _a === void 0 ? void 0 : _a.update(level);\n            });\n        }\n    };\n    ChartImp.prototype.crosshairChange = function(crosshair) {\n        var _this = this;\n        if (this._chartStore.hasAction(ActionType.OnCrosshairChange)) {\n            var indicatorData_1 = {};\n            this._drawPanes.forEach(function(pane) {\n                var id = pane.getId();\n                var paneIndicatorData = {};\n                var indicators = _this._chartStore.getIndicatorsByPaneId(id);\n                indicators.forEach(function(indicator) {\n                    var _a;\n                    var result = indicator.result;\n                    paneIndicatorData[indicator.name] = result[(_a = crosshair.dataIndex) !== null && _a !== void 0 ? _a : result.length - 1];\n                });\n                indicatorData_1[id] = paneIndicatorData;\n            });\n            if (isString(crosshair.paneId)) {\n                this._chartStore.executeAction(ActionType.OnCrosshairChange, __assign(__assign({}, crosshair), {\n                    indicatorData: indicatorData_1\n                }));\n            }\n        }\n    };\n    ChartImp.prototype.getDom = function(paneId, position) {\n        var _a, _b;\n        if (isValid(paneId)) {\n            var pane = this.getDrawPaneById(paneId);\n            if (isValid(pane)) {\n                var pos = position !== null && position !== void 0 ? position : DomPosition.Root;\n                switch(pos){\n                    case DomPosition.Root:\n                        {\n                            return pane.getContainer();\n                        }\n                    case DomPosition.Main:\n                        {\n                            return pane.getMainWidget().getContainer();\n                        }\n                    case DomPosition.YAxis:\n                        {\n                            return (_b = (_a = pane.getYAxisWidget()) === null || _a === void 0 ? void 0 : _a.getContainer()) !== null && _b !== void 0 ? _b : null;\n                        }\n                }\n            }\n        } else {\n            return this._chartContainer;\n        }\n        return null;\n    };\n    ChartImp.prototype.getSize = function(paneId, position) {\n        var _a, _b;\n        if (isValid(paneId)) {\n            var pane = this.getDrawPaneById(paneId);\n            if (isValid(pane)) {\n                var pos = position !== null && position !== void 0 ? position : DomPosition.Root;\n                switch(pos){\n                    case DomPosition.Root:\n                        {\n                            return pane.getBounding();\n                        }\n                    case DomPosition.Main:\n                        {\n                            return pane.getMainWidget().getBounding();\n                        }\n                    case DomPosition.YAxis:\n                        {\n                            return (_b = (_a = pane.getYAxisWidget()) === null || _a === void 0 ? void 0 : _a.getBounding()) !== null && _b !== void 0 ? _b : null;\n                        }\n                }\n            }\n        } else {\n            return this._chartBounding;\n        }\n        return null;\n    };\n    ChartImp.prototype.setPrecision = function(precision) {\n        this._chartStore.setPrecision(precision);\n    };\n    ChartImp.prototype.getPrecision = function() {\n        return this._chartStore.getPrecision();\n    };\n    ChartImp.prototype.setStyles = function(value) {\n        var _this = this;\n        this._setOptions(function() {\n            _this._chartStore.setStyles(value);\n        });\n    };\n    ChartImp.prototype.getStyles = function() {\n        return this._chartStore.getStyles();\n    };\n    ChartImp.prototype.setCustomApi = function(api) {\n        var _this = this;\n        this._setOptions(function() {\n            _this._chartStore.setCustomApi(api);\n        });\n    };\n    ChartImp.prototype.getCustomApi = function() {\n        return this._chartStore.getCustomApi();\n    };\n    ChartImp.prototype.setLocale = function(locale) {\n        var _this = this;\n        this._setOptions(function() {\n            _this._chartStore.setLocale(locale);\n        });\n    };\n    ChartImp.prototype.getLocale = function() {\n        return this._chartStore.getLocale();\n    };\n    ChartImp.prototype.setTimezone = function(timezone) {\n        var _this = this;\n        this._setOptions(function() {\n            _this._chartStore.setTimezone(timezone);\n        });\n    };\n    ChartImp.prototype.getTimezone = function() {\n        return this._chartStore.getTimezone();\n    };\n    ChartImp.prototype.setThousandsSeparator = function(thousandsSeparator) {\n        var _this = this;\n        this._setOptions(function() {\n            _this._chartStore.setThousandsSeparator(thousandsSeparator);\n        });\n    };\n    ChartImp.prototype.getThousandsSeparator = function() {\n        return this._chartStore.getThousandsSeparator();\n    };\n    ChartImp.prototype.setDecimalFold = function(decimalFold) {\n        var _this = this;\n        this._setOptions(function() {\n            _this._chartStore.setDecimalFold(decimalFold);\n        });\n    };\n    ChartImp.prototype.getDecimalFold = function() {\n        return this._chartStore.getDecimalFold();\n    };\n    ChartImp.prototype._setOptions = function(fuc) {\n        fuc();\n        this.layout({\n            measureHeight: true,\n            measureWidth: true,\n            update: true,\n            buildYAxisTick: true,\n            forceBuildYAxisTick: true\n        });\n    };\n    ChartImp.prototype.setOffsetRightDistance = function(distance) {\n        this._chartStore.setOffsetRightDistance(distance, true);\n    };\n    ChartImp.prototype.getOffsetRightDistance = function() {\n        return this._chartStore.getOffsetRightDistance();\n    };\n    ChartImp.prototype.setMaxOffsetLeftDistance = function(distance) {\n        if (distance < 0) {\n            logWarn(\"setMaxOffsetLeftDistance\", \"distance\", \"distance must greater than zero!!!\");\n            return;\n        }\n        this._chartStore.setMaxOffsetLeftDistance(distance);\n    };\n    ChartImp.prototype.setMaxOffsetRightDistance = function(distance) {\n        if (distance < 0) {\n            logWarn(\"setMaxOffsetRightDistance\", \"distance\", \"distance must greater than zero!!!\");\n            return;\n        }\n        this._chartStore.setMaxOffsetRightDistance(distance);\n    };\n    ChartImp.prototype.setLeftMinVisibleBarCount = function(barCount) {\n        if (barCount < 0) {\n            logWarn(\"setLeftMinVisibleBarCount\", \"barCount\", \"barCount must greater than zero!!!\");\n            return;\n        }\n        this._chartStore.setLeftMinVisibleBarCount(Math.ceil(barCount));\n    };\n    ChartImp.prototype.setRightMinVisibleBarCount = function(barCount) {\n        if (barCount < 0) {\n            logWarn(\"setRightMinVisibleBarCount\", \"barCount\", \"barCount must greater than zero!!!\");\n            return;\n        }\n        this._chartStore.setRightMinVisibleBarCount(Math.ceil(barCount));\n    };\n    ChartImp.prototype.setBarSpace = function(space) {\n        this._chartStore.setBarSpace(space);\n    };\n    ChartImp.prototype.getBarSpace = function() {\n        return this._chartStore.getBarSpace();\n    };\n    ChartImp.prototype.getVisibleRange = function() {\n        return this._chartStore.getVisibleRange();\n    };\n    ChartImp.prototype.clearData = function() {\n        this._chartStore.clearData();\n    };\n    ChartImp.prototype.getDataList = function() {\n        return this._chartStore.getDataList();\n    };\n    ChartImp.prototype.applyNewData = function(data, more) {\n        this._drawPanes.forEach(function(pane) {\n            pane.getAxisComponent().setAutoCalcTickFlag(true);\n        });\n        var loadDataMore = {\n            forward: false,\n            backward: false\n        };\n        if (isBoolean(more)) {\n            loadDataMore.forward = more;\n            loadDataMore.backward = more;\n        } else {\n            loadDataMore = __assign(__assign({}, loadDataMore), more);\n        }\n        this._chartStore.addData(data, LoadDataType.Init, loadDataMore);\n    };\n    ChartImp.prototype.updateData = function(data) {\n        this._chartStore.addData(data, LoadDataType.Update);\n    };\n    ChartImp.prototype.setLoadMoreDataCallback = function(cb) {\n        this._chartStore.setLoadMoreDataCallback(cb);\n    };\n    ChartImp.prototype.createIndicator = function(value, isStack, paneOptions) {\n        var _a;\n        var indicator = isString(value) ? {\n            name: value\n        } : value;\n        if (getIndicatorClass(indicator.name) === null) {\n            logWarn(\"createIndicator\", \"value\", \"indicator not supported, you may need to use registerIndicator to add one!!!\");\n            return null;\n        }\n        var paneOpts = paneOptions !== null && paneOptions !== void 0 ? paneOptions : {};\n        if (!isString(paneOpts.id)) {\n            paneOpts.id = createId(PaneIdConstants.INDICATOR);\n        }\n        if (!isString(indicator.id)) {\n            indicator.id = createId(indicator.name);\n        }\n        var result = this._chartStore.addIndicator(indicator, paneOpts.id, isStack !== null && isStack !== void 0 ? isStack : false);\n        if (result) {\n            var shouldSort = false;\n            if (!isValid(this.getDrawPaneById(paneOpts.id))) {\n                this._createPane(IndicatorPane, paneOpts.id, paneOpts);\n                (_a = paneOpts.height) !== null && _a !== void 0 ? _a : paneOpts.height = PANE_DEFAULT_HEIGHT;\n                shouldSort = true;\n            }\n            this.setPaneOptions(paneOpts);\n            this.layout({\n                sort: shouldSort,\n                measureHeight: true,\n                measureWidth: true,\n                update: true,\n                buildYAxisTick: true,\n                forceBuildYAxisTick: true\n            });\n            return indicator.id;\n        }\n        return null;\n    };\n    ChartImp.prototype.overrideIndicator = function(override) {\n        return this._chartStore.overrideIndicator(override);\n    };\n    ChartImp.prototype.getIndicators = function(filter) {\n        return this._chartStore.getIndicatorsByFilter(filter !== null && filter !== void 0 ? filter : {});\n    };\n    ChartImp.prototype.removeIndicator = function(filter) {\n        var _this = this;\n        var removed = this._chartStore.removeIndicator(filter !== null && filter !== void 0 ? filter : {});\n        if (removed) {\n            var shouldMeasureHeight_1 = false;\n            var paneIds_1 = [];\n            this._drawPanes.forEach(function(pane) {\n                var paneId = pane.getId();\n                if (paneId !== PaneIdConstants.CANDLE && paneId !== PaneIdConstants.X_AXIS) {\n                    paneIds_1.push(paneId);\n                }\n            });\n            paneIds_1.forEach(function(paneId) {\n                if (!_this._chartStore.hasIndicators(paneId)) {\n                    var index = _this._drawPanes.findIndex(function(pane) {\n                        return pane.getId() === paneId;\n                    });\n                    var pane = _this._drawPanes[index];\n                    if (isValid(pane)) {\n                        shouldMeasureHeight_1 = true;\n                        _this._recalculatePaneHeight(pane, 0, pane.getBounding().height);\n                        _this._drawPanes.splice(index, 1);\n                        pane.destroy();\n                    }\n                }\n            });\n            if (this._drawPanes.length === 2) {\n                this._candlePane.setVisible(true);\n                this._candlePane.setBounding({\n                    height: this._chartBounding.height - this._xAxisPane.getBounding().height\n                });\n            }\n            this.layout({\n                sort: shouldMeasureHeight_1,\n                measureHeight: shouldMeasureHeight_1,\n                measureWidth: true,\n                update: true,\n                buildYAxisTick: true,\n                forceBuildYAxisTick: true\n            });\n        }\n        return removed;\n    };\n    ChartImp.prototype.createOverlay = function(value) {\n        var _this = this;\n        var overlays = [];\n        var appointPaneFlags = [];\n        var build = function(overlay) {\n            if (!isValid(overlay.paneId) || _this.getDrawPaneById(overlay.paneId) === null) {\n                overlay.paneId = PaneIdConstants.CANDLE;\n                appointPaneFlags.push(false);\n            } else {\n                appointPaneFlags.push(true);\n            }\n            overlays.push(overlay);\n        };\n        if (isString(value)) {\n            build({\n                name: value\n            });\n        } else if (isArray(value)) {\n            value.forEach(function(v) {\n                var overlay = null;\n                if (isString(v)) {\n                    overlay = {\n                        name: v\n                    };\n                } else {\n                    overlay = v;\n                }\n                build(overlay);\n            });\n        } else {\n            build(value);\n        }\n        var ids = this._chartStore.addOverlays(overlays, appointPaneFlags);\n        if (isArray(value)) {\n            return ids;\n        }\n        return ids[0];\n    };\n    ChartImp.prototype.getOverlays = function(filter) {\n        return this._chartStore.getOverlaysByFilter(filter !== null && filter !== void 0 ? filter : {});\n    };\n    ChartImp.prototype.overrideOverlay = function(override) {\n        return this._chartStore.overrideOverlay(override);\n    };\n    ChartImp.prototype.removeOverlay = function(filter) {\n        return this._chartStore.removeOverlay(filter !== null && filter !== void 0 ? filter : {});\n    };\n    ChartImp.prototype.setPaneOptions = function(options) {\n        var e_1, _a;\n        var _this = this;\n        var _b;\n        var shouldMeasureHeight = false;\n        var shouldLayout = false;\n        var validId = isValid(options.id);\n        var _loop_1 = function(currentPane) {\n            var currentPaneId = currentPane.getId();\n            if (validId && options.id === currentPaneId || !validId) {\n                if (currentPaneId !== PaneIdConstants.X_AXIS) {\n                    if (isNumber(options.height) && options.height > 0) {\n                        var minHeight = Math.max((_b = options.minHeight) !== null && _b !== void 0 ? _b : currentPane.getOptions().minHeight, 0);\n                        var height = Math.max(minHeight, options.height);\n                        shouldLayout = true;\n                        shouldMeasureHeight = true;\n                        currentPane.setOriginalBounding({\n                            height: height\n                        });\n                        this_1._recalculatePaneHeight(currentPane, height, -height);\n                    }\n                    if (isValid(options.state) && currentPane.getOptions().state !== options.state) {\n                        shouldMeasureHeight = true;\n                        shouldLayout = true;\n                        var state = options.state;\n                        switch(state){\n                            case \"maximize\" /* PaneState.Maximize */ :\n                                {\n                                    var maximizePane = this_1._drawPanes.find(function(pane) {\n                                        var paneId = pane.getId();\n                                        return pane.getOptions().state === \"maximize\" /* PaneState.Maximize */  && paneId !== PaneIdConstants.X_AXIS;\n                                    });\n                                    if (!isValid(maximizePane)) {\n                                        if (currentPane.getOptions().state === \"normal\" /* PaneState.Normal */ ) {\n                                            currentPane.setOriginalBounding({\n                                                height: currentPane.getBounding().height\n                                            });\n                                        }\n                                        currentPane.setOptions({\n                                            state: state\n                                        });\n                                        var totalHeight = this_1._chartBounding.height;\n                                        currentPane.setBounding({\n                                            height: totalHeight - this_1._xAxisPane.getBounding().height\n                                        });\n                                        this_1._drawPanes.forEach(function(pane) {\n                                            var _a;\n                                            if (pane.getId() !== PaneIdConstants.X_AXIS && pane.getId() !== currentPaneId) {\n                                                pane.setBounding({\n                                                    height: pane.getOriginalBounding().height\n                                                });\n                                                pane.setVisible(false);\n                                                (_a = _this._separatorPanes.get(pane)) === null || _a === void 0 ? void 0 : _a.setVisible(false);\n                                            }\n                                        });\n                                    }\n                                    break;\n                                }\n                            case \"minimize\" /* PaneState.Minimize */ :\n                                {\n                                    var height = currentPane.getBounding().height;\n                                    var currentState = currentPane.getOptions().state;\n                                    var changeHeight = height - PANE_MIN_HEIGHT;\n                                    if (currentState === \"maximize\" /* PaneState.Maximize */ ) {\n                                        changeHeight = currentPane.getOriginalBounding().height - PANE_MIN_HEIGHT;\n                                    }\n                                    if (this_1._recalculatePaneHeight(currentPane, PANE_MIN_HEIGHT, changeHeight)) {\n                                        if (currentState === \"normal\" /* PaneState.Normal */ ) {\n                                            currentPane.setOriginalBounding({\n                                                height: height\n                                            });\n                                        }\n                                        currentPane.setOptions({\n                                            state: state\n                                        });\n                                    }\n                                    this_1._drawPanes.forEach(function(pane) {\n                                        var _a;\n                                        if (pane.getId() !== PaneIdConstants.X_AXIS) {\n                                            pane.setVisible(true);\n                                            (_a = _this._separatorPanes.get(pane)) === null || _a === void 0 ? void 0 : _a.setVisible(true);\n                                        }\n                                    });\n                                    break;\n                                }\n                            default:\n                                {\n                                    var height = currentPane.getOriginalBounding().height;\n                                    if (this_1._recalculatePaneHeight(currentPane, height, currentPane.getBounding().height - height)) {\n                                        currentPane.setOptions({\n                                            state: state\n                                        });\n                                    }\n                                    this_1._drawPanes.forEach(function(pane) {\n                                        var _a;\n                                        if (pane.getId() !== PaneIdConstants.X_AXIS) {\n                                            pane.setVisible(true);\n                                            (_a = _this._separatorPanes.get(pane)) === null || _a === void 0 ? void 0 : _a.setVisible(true);\n                                        }\n                                    });\n                                    break;\n                                }\n                        }\n                    }\n                }\n                if (isValid(options.axis)) {\n                    shouldLayout = true;\n                }\n                var ops = __assign({}, options);\n                delete ops.state;\n                currentPane.setOptions(ops);\n                if (currentPaneId === options.id) {\n                    return \"break\";\n                }\n            }\n        };\n        var this_1 = this;\n        try {\n            for(var _c = __values(this._drawPanes), _d = _c.next(); !_d.done; _d = _c.next()){\n                var currentPane = _d.value;\n                var state_1 = _loop_1(currentPane);\n                if (state_1 === \"break\") break;\n            }\n        } catch (e_1_1) {\n            e_1 = {\n                error: e_1_1\n            };\n        } finally{\n            try {\n                if (_d && !_d.done && (_a = _c.return)) _a.call(_c);\n            } finally{\n                if (e_1) throw e_1.error;\n            }\n        }\n        if (shouldLayout) {\n            this.layout({\n                measureHeight: shouldMeasureHeight,\n                measureWidth: true,\n                update: true,\n                buildYAxisTick: true,\n                forceBuildYAxisTick: true\n            });\n        }\n    };\n    ChartImp.prototype.getPaneOptions = function(id) {\n        var _a;\n        if (isValid(id)) {\n            var pane = this.getDrawPaneById(id);\n            return (_a = pane === null || pane === void 0 ? void 0 : pane.getOptions()) !== null && _a !== void 0 ? _a : null;\n        }\n        return this._drawPanes.map(function(pane) {\n            return pane.getOptions();\n        });\n    };\n    ChartImp.prototype.setZoomEnabled = function(enabled) {\n        this._chartStore.setZoomEnabled(enabled);\n    };\n    ChartImp.prototype.isZoomEnabled = function() {\n        return this._chartStore.isZoomEnabled();\n    };\n    ChartImp.prototype.setScrollEnabled = function(enabled) {\n        this._chartStore.setScrollEnabled(enabled);\n    };\n    ChartImp.prototype.isScrollEnabled = function() {\n        return this._chartStore.isScrollEnabled();\n    };\n    ChartImp.prototype.scrollByDistance = function(distance, animationDuration) {\n        var _this = this;\n        var duration = isNumber(animationDuration) && animationDuration > 0 ? animationDuration : 0;\n        this._chartStore.startScroll();\n        if (duration > 0) {\n            var animation = new Animation({\n                duration: duration\n            });\n            animation.doFrame(function(frameTime) {\n                var progressDistance = distance * (frameTime / duration);\n                _this._chartStore.scroll(progressDistance);\n            });\n            animation.start();\n        } else {\n            this._chartStore.scroll(distance);\n        }\n    };\n    ChartImp.prototype.scrollToRealTime = function(animationDuration) {\n        var barSpace = this._chartStore.getBarSpace().bar;\n        var difBarCount = this._chartStore.getLastBarRightSideDiffBarCount() - this._chartStore.getInitialOffsetRightDistance() / barSpace;\n        var distance = difBarCount * barSpace;\n        this.scrollByDistance(distance, animationDuration);\n    };\n    ChartImp.prototype.scrollToDataIndex = function(dataIndex, animationDuration) {\n        var distance = (this._chartStore.getLastBarRightSideDiffBarCount() + (this.getDataList().length - 1 - dataIndex)) * this._chartStore.getBarSpace().bar;\n        this.scrollByDistance(distance, animationDuration);\n    };\n    ChartImp.prototype.scrollToTimestamp = function(timestamp, animationDuration) {\n        var dataIndex = binarySearchNearest(this.getDataList(), \"timestamp\", timestamp);\n        this.scrollToDataIndex(dataIndex, animationDuration);\n    };\n    ChartImp.prototype.zoomAtCoordinate = function(scale, coordinate, animationDuration) {\n        var _this = this;\n        var duration = isNumber(animationDuration) && animationDuration > 0 ? animationDuration : 0;\n        var barSpace = this._chartStore.getBarSpace().bar;\n        var scaleBarSpace = barSpace * scale;\n        var difSpace = scaleBarSpace - barSpace;\n        if (duration > 0) {\n            var prevProgressBarSpace_1 = 0;\n            var animation = new Animation({\n                duration: duration\n            });\n            animation.doFrame(function(frameTime) {\n                var progressBarSpace = difSpace * (frameTime / duration);\n                var scale = (progressBarSpace - prevProgressBarSpace_1) / _this._chartStore.getBarSpace().bar * SCALE_MULTIPLIER;\n                _this._chartStore.zoom(scale, coordinate);\n                prevProgressBarSpace_1 = progressBarSpace;\n            });\n            animation.start();\n        } else {\n            this._chartStore.zoom(difSpace / barSpace * SCALE_MULTIPLIER, coordinate);\n        }\n    };\n    ChartImp.prototype.zoomAtDataIndex = function(scale, dataIndex, animationDuration) {\n        var x = this._chartStore.dataIndexToCoordinate(dataIndex);\n        this.zoomAtCoordinate(scale, {\n            x: x,\n            y: 0\n        }, animationDuration);\n    };\n    ChartImp.prototype.zoomAtTimestamp = function(scale, timestamp, animationDuration) {\n        var dataIndex = binarySearchNearest(this.getDataList(), \"timestamp\", timestamp);\n        this.zoomAtDataIndex(scale, dataIndex, animationDuration);\n    };\n    ChartImp.prototype.convertToPixel = function(points, filter) {\n        var _this = this;\n        var _a;\n        var _b = filter !== null && filter !== void 0 ? filter : {}, _c = _b.paneId, paneId = _c === void 0 ? PaneIdConstants.CANDLE : _c, _d = _b.absolute, absolute = _d === void 0 ? false : _d;\n        var coordinates = [];\n        if (paneId !== PaneIdConstants.X_AXIS) {\n            var pane = this.getDrawPaneById(paneId);\n            if (pane !== null) {\n                var bounding_1 = pane.getBounding();\n                // eslint-disable-next-line @typescript-eslint/ban-ts-comment -- ignore\n                // @ts-expect-error\n                var ps = [].concat(points);\n                var xAxis_1 = this._xAxisPane.getAxisComponent();\n                var yAxis_1 = pane.getAxisComponent();\n                coordinates = ps.map(function(point) {\n                    var coordinate = {};\n                    var dataIndex = point.dataIndex;\n                    if (isNumber(point.timestamp)) {\n                        dataIndex = _this._chartStore.timestampToDataIndex(point.timestamp);\n                    }\n                    if (isNumber(dataIndex)) {\n                        coordinate.x = xAxis_1.convertToPixel(dataIndex);\n                    }\n                    if (isNumber(point.value)) {\n                        var y = yAxis_1.convertToPixel(point.value);\n                        coordinate.y = absolute ? bounding_1.top + y : y;\n                    }\n                    return coordinate;\n                });\n            }\n        }\n        return isArray(points) ? coordinates : (_a = coordinates[0]) !== null && _a !== void 0 ? _a : {};\n    };\n    ChartImp.prototype.convertFromPixel = function(coordinates, filter) {\n        var _this = this;\n        var _a;\n        var _b = filter !== null && filter !== void 0 ? filter : {}, _c = _b.paneId, paneId = _c === void 0 ? PaneIdConstants.CANDLE : _c, _d = _b.absolute, absolute = _d === void 0 ? false : _d;\n        var points = [];\n        if (paneId !== PaneIdConstants.X_AXIS) {\n            var pane = this.getDrawPaneById(paneId);\n            if (pane !== null) {\n                var bounding_2 = pane.getBounding();\n                // eslint-disable-next-line @typescript-eslint/ban-ts-comment -- ignore\n                // @ts-expect-error\n                var cs = [].concat(coordinates);\n                var xAxis_2 = this._xAxisPane.getAxisComponent();\n                var yAxis_2 = pane.getAxisComponent();\n                points = cs.map(function(coordinate) {\n                    var _a;\n                    var point = {};\n                    if (isNumber(coordinate.x)) {\n                        var dataIndex = xAxis_2.convertFromPixel(coordinate.x);\n                        point.dataIndex = dataIndex;\n                        point.timestamp = (_a = _this._chartStore.dataIndexToTimestamp(dataIndex)) !== null && _a !== void 0 ? _a : undefined;\n                    }\n                    if (isNumber(coordinate.y)) {\n                        var y = absolute ? coordinate.y - bounding_2.top : coordinate.y;\n                        point.value = yAxis_2.convertFromPixel(y);\n                    }\n                    return point;\n                });\n            }\n        }\n        return isArray(coordinates) ? points : (_a = points[0]) !== null && _a !== void 0 ? _a : {};\n    };\n    ChartImp.prototype.executeAction = function(type, data) {\n        var _a;\n        switch(type){\n            case ActionType.OnCrosshairChange:\n                {\n                    var crosshair = __assign({}, data);\n                    (_a = crosshair.paneId) !== null && _a !== void 0 ? _a : crosshair.paneId = PaneIdConstants.CANDLE;\n                    this._chartStore.setCrosshair(crosshair, {\n                        notExecuteAction: true\n                    });\n                    break;\n                }\n        }\n    };\n    ChartImp.prototype.subscribeAction = function(type, callback) {\n        this._chartStore.subscribeAction(type, callback);\n    };\n    ChartImp.prototype.unsubscribeAction = function(type, callback) {\n        this._chartStore.unsubscribeAction(type, callback);\n    };\n    ChartImp.prototype.getConvertPictureUrl = function(includeOverlay, type, backgroundColor) {\n        var _this = this;\n        var _a = this._chartBounding, width = _a.width, height = _a.height;\n        var canvas = createDom(\"canvas\", {\n            width: \"\".concat(width, \"px\"),\n            height: \"\".concat(height, \"px\"),\n            boxSizing: \"border-box\"\n        });\n        var ctx = canvas.getContext(\"2d\");\n        var pixelRatio = getPixelRatio(canvas);\n        canvas.width = width * pixelRatio;\n        canvas.height = height * pixelRatio;\n        ctx.scale(pixelRatio, pixelRatio);\n        ctx.fillStyle = backgroundColor !== null && backgroundColor !== void 0 ? backgroundColor : \"#FFFFFF\";\n        ctx.fillRect(0, 0, width, height);\n        var overlayFlag = includeOverlay !== null && includeOverlay !== void 0 ? includeOverlay : false;\n        this._drawPanes.forEach(function(pane) {\n            var separatorPane = _this._separatorPanes.get(pane);\n            if (isValid(separatorPane)) {\n                var separatorBounding = separatorPane.getBounding();\n                ctx.drawImage(separatorPane.getImage(overlayFlag), separatorBounding.left, separatorBounding.top, separatorBounding.width, separatorBounding.height);\n            }\n            var bounding = pane.getBounding();\n            ctx.drawImage(pane.getImage(overlayFlag), 0, bounding.top, width, bounding.height);\n        });\n        return canvas.toDataURL(\"image/\".concat(type !== null && type !== void 0 ? type : \"jpeg\"));\n    };\n    ChartImp.prototype.resize = function() {\n        this._cacheChartBounding();\n        this.layout({\n            measureHeight: true,\n            measureWidth: true,\n            update: true,\n            buildYAxisTick: true,\n            forceBuildYAxisTick: true\n        });\n    };\n    ChartImp.prototype.destroy = function() {\n        this._chartEvent.destroy();\n        this._drawPanes.forEach(function(pane) {\n            pane.destroy();\n        });\n        this._drawPanes = [];\n        this._separatorPanes.clear();\n        this._container.removeChild(this._chartContainer);\n    };\n    return ChartImp;\n}();\n/**\n *       ___           ___                   ___           ___           ___           ___           ___           ___           ___\n *      /\\__\\         /\\__\\      ___        /\\__\\         /\\  \\         /\\  \\         /\\__\\         /\\  \\         /\\  \\         /\\  \\\n *     /:/  /        /:/  /     /\\  \\      /::|  |       /::\\  \\       /::\\  \\       /:/  /        /::\\  \\       /::\\  \\        \\:\\  \\\n *    /:/__/        /:/  /      \\:\\  \\    /:|:|  |      /:/\\:\\  \\     /:/\\:\\  \\     /:/__/        /:/\\:\\  \\     /:/\\:\\  \\        \\:\\  \\\n *   /::\\__\\____   /:/  /       /::\\__\\  /:/|:|  |__   /::\\~\\:\\  \\   /:/  \\:\\  \\   /::\\  \\ ___   /::\\~\\:\\  \\   /::\\~\\:\\  \\       /::\\  \\\n *  /:/\\:::::\\__\\ /:/__/     __/:/\\/__/ /:/ |:| /\\__\\ /:/\\:\\ \\:\\__\\ /:/__/ \\:\\__\\ /:/\\:\\  /\\__\\ /:/\\:\\ \\:\\__\\ /:/\\:\\ \\:\\__\\     /:/\\:\\__\\\n *  \\/_|:|~~|~    \\:\\  \\    /\\/:/  /    \\/__|:|/:/  / \\:\\~\\:\\ \\/__/ \\:\\  \\  \\/__/ \\/__\\:\\/:/  / \\/__\\:\\/:/  / \\/_|::\\/:/  /    /:/  \\/__/\n *     |:|  |      \\:\\  \\   \\::/__/         |:/:/  /   \\:\\ \\:\\__\\    \\:\\  \\            \\::/  /       \\::/  /     |:|::/  /    /:/  /\n *     |:|  |       \\:\\  \\   \\:\\__\\         |::/  /     \\:\\ \\/__/     \\:\\  \\           /:/  /        /:/  /      |:|\\/__/     \\/__/\n *     |:|  |        \\:\\__\\   \\/__/         /:/  /       \\:\\__\\        \\:\\__\\         /:/  /        /:/  /       |:|  |\n *      \\|__|         \\/__/                 \\/__/         \\/__/         \\/__/         \\/__/         \\/__/         \\|__|\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n\n * http://www.apache.org/licenses/LICENSE-2.0\n\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ var charts = new Map();\nvar chartBaseId = 1;\n/**\n * Chart version\n * @return {string}\n */ function version() {\n    return \"10.0.0-alpha5\";\n}\n/**\n * Init chart instance\n * @param ds\n * @param options\n * @returns {Chart}\n */ function init(ds, options) {\n    logTag();\n    var dom = null;\n    if (isString(ds)) {\n        dom = document.getElementById(ds);\n    } else {\n        dom = ds;\n    }\n    if (dom === null) {\n        logError(\"\", \"\", \"The chart cannot be initialized correctly. Please check the parameters. The chart container cannot be null and child elements need to be added!!!\");\n        return null;\n    }\n    var chart = charts.get(dom.id);\n    if (isValid(chart)) {\n        logWarn(\"\", \"\", \"The chart has been initialized on the dom！！！\");\n        return chart;\n    }\n    var id = \"k_line_chart_\".concat(chartBaseId++);\n    chart = new ChartImp(dom, options);\n    chart.id = id;\n    dom.setAttribute(\"k-line-chart-id\", id);\n    charts.set(id, chart);\n    return chart;\n}\n/**\n * Destroy chart instance\n * @param dcs\n */ function dispose(dcs) {\n    var _a, _b;\n    var id = null;\n    if (dcs instanceof ChartImp) {\n        id = dcs.id;\n    } else {\n        var dom = null;\n        if (isString(dcs)) {\n            dom = document.getElementById(dcs);\n        } else {\n            dom = dcs;\n        }\n        id = (_a = dom === null || dom === void 0 ? void 0 : dom.getAttribute(\"k-line-chart-id\")) !== null && _a !== void 0 ? _a : null;\n    }\n    if (id !== null) {\n        (_b = charts.get(id)) === null || _b === void 0 ? void 0 : _b.destroy();\n        charts.delete(id);\n    }\n}\nvar utils = {\n    clone: clone,\n    merge: merge,\n    isString: isString,\n    isNumber: isNumber,\n    isValid: isValid,\n    isObject: isObject,\n    isArray: isArray,\n    isFunction: isFunction,\n    isBoolean: isBoolean,\n    formatValue: formatValue,\n    formatPrecision: formatPrecision,\n    formatBigNumber: formatBigNumber,\n    formatDate: formatTimestampToString,\n    formatThousands: formatThousands,\n    formatFoldDecimal: formatFoldDecimal,\n    calcTextWidth: calcTextWidth,\n    getLinearSlopeIntercept: getLinearSlopeIntercept,\n    getLinearYFromSlopeIntercept: getLinearYFromSlopeIntercept,\n    getLinearYFromCoordinates: getLinearYFromCoordinates,\n    checkCoordinateOnArc: checkCoordinateOnArc,\n    checkCoordinateOnCircle: checkCoordinateOnCircle,\n    checkCoordinateOnLine: checkCoordinateOnLine,\n    checkCoordinateOnPolygon: checkCoordinateOnPolygon,\n    checkCoordinateOnRect: checkCoordinateOnRect,\n    checkCoordinateOnText: checkCoordinateOnText\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/klinecharts/dist/index.esm.js\n");

/***/ })

};
;